
LSM303DLHC_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c214  08009900  08009900  00019900  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b14  08015b14  000309c0  2**0
                  CONTENTS
  4 .ARM          00000000  08015b14  08015b14  000309c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015b14  08015b14  000309c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b14  08015b14  00025b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b18  08015b18  00025b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  08015b1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000309c0  2**0
                  CONTENTS
 10 .bss          000008f8  200009c0  200009c0  000309c0  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  200012b8  200012b8  000309c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000309c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e950  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253c  00000000  00000000  0003f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  00041880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000810  00000000  00000000  000421a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6fb  00000000  00000000  000429b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd50  00000000  00000000  000620b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b68c0  00000000  00000000  0006ee03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ce  00000000  00000000  001256c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003470  00000000  00000000  00125794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009c0 	.word	0x200009c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098e8 	.word	0x080098e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009c4 	.word	0x200009c4
 80001cc:	080098e8 	.word	0x080098e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fd47 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f979 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 fa2f 	bl	8001018 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bba:	f000 f9ed 	bl	8000f98 <MX_I2C1_Init>
  MX_CRC_Init();
 8000bbe:	f000 f9c9 	bl	8000f54 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
   //1. Scan the I2C addresses
    	for(uint8_t i=0; i<255; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e012      	b.n	8000bee <main+0x46>
    	{
    		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10) == HAL_OK)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	b299      	uxth	r1, r3
 8000bcc:	230a      	movs	r3, #10
 8000bce:	2201      	movs	r2, #1
 8000bd0:	489d      	ldr	r0, [pc, #628]	; (8000e48 <main+0x2a0>)
 8000bd2:	f001 fbd9 	bl	8002388 <HAL_I2C_IsDeviceReady>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d105      	bne.n	8000be8 <main+0x40>
    		{
    			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be0:	489a      	ldr	r0, [pc, #616]	; (8000e4c <main+0x2a4>)
 8000be2:	f001 f919 	bl	8001e18 <HAL_GPIO_TogglePin>
    			break;
 8000be6:	e005      	b.n	8000bf4 <main+0x4c>
    	for(uint8_t i=0; i<255; i++)
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	3301      	adds	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	2bff      	cmp	r3, #255	; 0xff
 8000bf2:	d1e9      	bne.n	8000bc8 <main+0x20>
    		}
    	}
    //2. I2C Write example
	//a)Configure MEMS: data rate, power mode, Enable X,Y,Z axes
	i2cBuf[0] = 0x20;			//Register address: CTRL_REG1_A (20h)
 8000bf4:	4b96      	ldr	r3, [pc, #600]	; (8000e50 <main+0x2a8>)
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x37;			//0x47 for Data rate 50 Hz, XYZ En, //0x37 for 25Hz ,XYZ En
 8000bfa:	4b95      	ldr	r3, [pc, #596]	; (8000e50 <main+0x2a8>)
 8000bfc:	2237      	movs	r2, #55	; 0x37
 8000bfe:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, lsm303Address, i2cBuf, 2, 10);
 8000c00:	230a      	movs	r3, #10
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2302      	movs	r3, #2
 8000c06:	4a92      	ldr	r2, [pc, #584]	; (8000e50 <main+0x2a8>)
 8000c08:	2132      	movs	r1, #50	; 0x32
 8000c0a:	488f      	ldr	r0, [pc, #572]	; (8000e48 <main+0x2a0>)
 8000c0c:	f001 f9ae 	bl	8001f6c <HAL_I2C_Master_Transmit>
	//b) Configure MEMS: High Resolution Enable
	i2cBuf[0] = 0x23;			//Register address: CTRL_REG4_A (23h)
 8000c10:	4b8f      	ldr	r3, [pc, #572]	; (8000e50 <main+0x2a8>)
 8000c12:	2223      	movs	r2, #35	; 0x23
 8000c14:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x30;			//0x08 for 2g, High Resol. Enable//0x10 for 4g//0x30 for 16g
 8000c16:	4b8e      	ldr	r3, [pc, #568]	; (8000e50 <main+0x2a8>)
 8000c18:	2230      	movs	r2, #48	; 0x30
 8000c1a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, lsm303Address, i2cBuf, 2, 10);
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2302      	movs	r3, #2
 8000c22:	4a8b      	ldr	r2, [pc, #556]	; (8000e50 <main+0x2a8>)
 8000c24:	2132      	movs	r1, #50	; 0x32
 8000c26:	4888      	ldr	r0, [pc, #544]	; (8000e48 <main+0x2a0>)
 8000c28:	f001 f9a0 	bl	8001f6c <HAL_I2C_Master_Transmit>
	//c) Configure MEMS: Filter mode, cutoff frequency
	i2cBuf[0] = 0x21;			//Register address: CTRL_REG2_A (21h)
 8000c2c:	4b88      	ldr	r3, [pc, #544]	; (8000e50 <main+0x2a8>)
 8000c2e:	2221      	movs	r2, #33	; 0x21
 8000c30:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x90;
 8000c32:	4b87      	ldr	r3, [pc, #540]	; (8000e50 <main+0x2a8>)
 8000c34:	2290      	movs	r2, #144	; 0x90
 8000c36:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, lsm303Address, i2cBuf, 2, 10);
 8000c38:	230a      	movs	r3, #10
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	4a84      	ldr	r2, [pc, #528]	; (8000e50 <main+0x2a8>)
 8000c40:	2132      	movs	r1, #50	; 0x32
 8000c42:	4881      	ldr	r0, [pc, #516]	; (8000e48 <main+0x2a0>)
 8000c44:	f001 f992 	bl	8001f6c <HAL_I2C_Master_Transmit>

	AI_Init(ai_network_data_weights_get(), activations);
 8000c48:	f003 fb28 	bl	800429c <ai_network_data_weights_get>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4981      	ldr	r1, [pc, #516]	; (8000e54 <main+0x2ac>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fa2d 	bl	80010b0 <AI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t write_index = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  //4. Read accelerometer data
	  	  		//Request to read from a register
	  	  		//Register address: X_axis L
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x28, 1, &i2cBuf[1], 1, 10);
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	4b7d      	ldr	r3, [pc, #500]	; (8000e58 <main+0x2b0>)
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	2228      	movs	r2, #40	; 0x28
 8000c6a:	2132      	movs	r1, #50	; 0x32
 8000c6c:	4876      	ldr	r0, [pc, #472]	; (8000e48 <main+0x2a0>)
 8000c6e:	f001 fa71 	bl	8002154 <HAL_I2C_Mem_Read>
				//Register address: X_axis H
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x29, 1, &i2cBuf[2], 1, 10);
 8000c72:	230a      	movs	r3, #10
 8000c74:	9302      	str	r3, [sp, #8]
 8000c76:	2301      	movs	r3, #1
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	4b78      	ldr	r3, [pc, #480]	; (8000e5c <main+0x2b4>)
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2229      	movs	r2, #41	; 0x29
 8000c82:	2132      	movs	r1, #50	; 0x32
 8000c84:	4870      	ldr	r0, [pc, #448]	; (8000e48 <main+0x2a0>)
 8000c86:	f001 fa65 	bl	8002154 <HAL_I2C_Mem_Read>
	  	  		//Register address: Y_axis L
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x2A, 1, &i2cBuf[3], 1, 10);
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	4b73      	ldr	r3, [pc, #460]	; (8000e60 <main+0x2b8>)
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	222a      	movs	r2, #42	; 0x2a
 8000c9a:	2132      	movs	r1, #50	; 0x32
 8000c9c:	486a      	ldr	r0, [pc, #424]	; (8000e48 <main+0x2a0>)
 8000c9e:	f001 fa59 	bl	8002154 <HAL_I2C_Mem_Read>
				//Register address: Y_axis H
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x2B, 1, &i2cBuf[4], 1, 10);
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	4b6e      	ldr	r3, [pc, #440]	; (8000e64 <main+0x2bc>)
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	222b      	movs	r2, #43	; 0x2b
 8000cb2:	2132      	movs	r1, #50	; 0x32
 8000cb4:	4864      	ldr	r0, [pc, #400]	; (8000e48 <main+0x2a0>)
 8000cb6:	f001 fa4d 	bl	8002154 <HAL_I2C_Mem_Read>
	  	  		//Register address: Z_axis L
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x2C, 1, &i2cBuf[5], 1, 10);
 8000cba:	230a      	movs	r3, #10
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	4b69      	ldr	r3, [pc, #420]	; (8000e68 <main+0x2c0>)
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	222c      	movs	r2, #44	; 0x2c
 8000cca:	2132      	movs	r1, #50	; 0x32
 8000ccc:	485e      	ldr	r0, [pc, #376]	; (8000e48 <main+0x2a0>)
 8000cce:	f001 fa41 	bl	8002154 <HAL_I2C_Mem_Read>
				//Register address: Z_axis H
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x2D, 1, &i2cBuf[6], 1, 10);
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	9302      	str	r3, [sp, #8]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	4b64      	ldr	r3, [pc, #400]	; (8000e6c <main+0x2c4>)
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2301      	movs	r3, #1
 8000ce0:	222d      	movs	r2, #45	; 0x2d
 8000ce2:	2132      	movs	r1, #50	; 0x32
 8000ce4:	4858      	ldr	r0, [pc, #352]	; (8000e48 <main+0x2a0>)
 8000ce6:	f001 fa35 	bl	8002154 <HAL_I2C_Mem_Read>
	  	  		ax = ((int16_t)((uint16_t)i2cBuf[2]<<8) | i2cBuf[1]);
 8000cea:	4b59      	ldr	r3, [pc, #356]	; (8000e50 <main+0x2a8>)
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <main+0x2a8>)
 8000cf4:	785b      	ldrb	r3, [r3, #1]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b5c      	ldr	r3, [pc, #368]	; (8000e70 <main+0x2c8>)
 8000cfe:	801a      	strh	r2, [r3, #0]
	  	  		ay = ((int16_t)((uint16_t)i2cBuf[4]<<8) | i2cBuf[3]);
 8000d00:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <main+0x2a8>)
 8000d02:	791b      	ldrb	r3, [r3, #4]
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <main+0x2a8>)
 8000d0a:	78db      	ldrb	r3, [r3, #3]
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <main+0x2cc>)
 8000d14:	801a      	strh	r2, [r3, #0]
	  	  		az = ((int16_t)((uint16_t)i2cBuf[6]<<8) | i2cBuf[5]);
 8000d16:	4b4e      	ldr	r3, [pc, #312]	; (8000e50 <main+0x2a8>)
 8000d18:	799b      	ldrb	r3, [r3, #6]
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b21a      	sxth	r2, r3
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	; (8000e50 <main+0x2a8>)
 8000d20:	795b      	ldrb	r3, [r3, #5]
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <main+0x2d0>)
 8000d2a:	801a      	strh	r2, [r3, #0]

	  	  		Xaccel = ax * sensitivity;
 8000d2c:	4b50      	ldr	r3, [pc, #320]	; (8000e70 <main+0x2c8>)
 8000d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <main+0x2d4>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	fb03 f302 	mul.w	r3, r3, r2
 8000d3c:	ee07 3a90 	vmov	s15, r3
 8000d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d44:	4b4e      	ldr	r3, [pc, #312]	; (8000e80 <main+0x2d8>)
 8000d46:	edc3 7a00 	vstr	s15, [r3]
	  	  		Yaccel = ay * sensitivity;
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <main+0x2cc>)
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <main+0x2d4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	fb03 f302 	mul.w	r3, r3, r2
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <main+0x2dc>)
 8000d64:	edc3 7a00 	vstr	s15, [r3]
	  	  		Zaccel = az * sensitivity;
 8000d68:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <main+0x2d0>)
 8000d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <main+0x2d4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	fb03 f302 	mul.w	r3, r3, r2
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d80:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <main+0x2e0>)
 8000d82:	edc3 7a00 	vstr	s15, [r3]
	  	  		HAL_Delay(50);
 8000d86:	2032      	movs	r0, #50	; 0x32
 8000d88:	f000 fcc0 	bl	800170c <HAL_Delay>

	  	  	 //printf("% 5d, % 5d, % 5d\r\n",  (int) Xaccel, (int) Yaccel, (int) Zaccel);

	  	  	      /* Normalize data to [-1; 1] and accumulate into input buffer */
	  	  	      /* Note: window overlapping can be managed here */
	  	  	      aiInData[write_index + 0] = (float) Xaccel / 16000.0f;
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <main+0x2d8>)
 8000d8e:	ed93 7a00 	vldr	s14, [r3]
 8000d92:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8000e8c <main+0x2e4>
 8000d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d9a:	4a3d      	ldr	r2, [pc, #244]	; (8000e90 <main+0x2e8>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	edc3 7a00 	vstr	s15, [r3]
	  	  	      aiInData[write_index + 1] = (float) Yaccel / 16000.0f;
 8000da6:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <main+0x2dc>)
 8000da8:	ed93 7a00 	vldr	s14, [r3]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	3301      	adds	r3, #1
 8000db0:	eddf 6a36 	vldr	s13, [pc, #216]	; 8000e8c <main+0x2e4>
 8000db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db8:	4a35      	ldr	r2, [pc, #212]	; (8000e90 <main+0x2e8>)
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	edc3 7a00 	vstr	s15, [r3]
	  	  	      aiInData[write_index + 2] = (float) Zaccel / 16000.0f;
 8000dc2:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <main+0x2e0>)
 8000dc4:	ed93 7a00 	vldr	s14, [r3]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	3302      	adds	r3, #2
 8000dcc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8000e8c <main+0x2e4>
 8000dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd4:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <main+0x2e8>)
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	edc3 7a00 	vstr	s15, [r3]
	  	  	      write_index += 3;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3303      	adds	r3, #3
 8000de2:	60bb      	str	r3, [r7, #8]

	  	  	      if (write_index == AI_NETWORK_IN_1_SIZE) {
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b4e      	cmp	r3, #78	; 0x4e
 8000de8:	f47f af37 	bne.w	8000c5a <main+0xb2>
	  	  	        write_index = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]

	  	  	        //printf("Running inference\n");
	  	  	        AI_Run(aiInData, aiOutData);
 8000df0:	4928      	ldr	r1, [pc, #160]	; (8000e94 <main+0x2ec>)
 8000df2:	4827      	ldr	r0, [pc, #156]	; (8000e90 <main+0x2e8>)
 8000df4:	f000 f9c4 	bl	8001180 <AI_Run>

	  	  	        /* Output results */
	  	  	        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	e00f      	b.n	8000e1e <main+0x276>
	  	  	          printf("%8.6f ", aiOutData[i]);
 8000dfe:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <main+0x2ec>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fb9d 	bl	8000548 <__aeabi_f2d>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4821      	ldr	r0, [pc, #132]	; (8000e98 <main+0x2f0>)
 8000e14:	f006 fc8c 	bl	8007730 <iprintf>
	  	  	        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d9ec      	bls.n	8000dfe <main+0x256>
	  	  	        }
	  	  	        uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8000e24:	2103      	movs	r1, #3
 8000e26:	481b      	ldr	r0, [pc, #108]	; (8000e94 <main+0x2ec>)
 8000e28:	f000 f9f8 	bl	800121c <argmax>
 8000e2c:	6038      	str	r0, [r7, #0]
	  	  	        class_read=class;
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <main+0x2f4>)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6013      	str	r3, [r2, #0]
	  	  	        printf(": %d - %s\n", (int) class, activities[class]);
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	4a1a      	ldr	r2, [pc, #104]	; (8000ea0 <main+0x2f8>)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <main+0x2fc>)
 8000e42:	f006 fc75 	bl	8007730 <iprintf>
	  	  		HAL_I2C_Mem_Read(&hi2c1, lsm303Address,0x28, 1, &i2cBuf[1], 1, 10);
 8000e46:	e708      	b.n	8000c5a <main+0xb2>
 8000e48:	20000a8c 	.word	0x20000a8c
 8000e4c:	48001000 	.word	0x48001000
 8000e50:	20001298 	.word	0x20001298
 8000e54:	20000b1c 	.word	0x20000b1c
 8000e58:	20001299 	.word	0x20001299
 8000e5c:	2000129a 	.word	0x2000129a
 8000e60:	2000129b 	.word	0x2000129b
 8000e64:	2000129c 	.word	0x2000129c
 8000e68:	2000129d 	.word	0x2000129d
 8000e6c:	2000129e 	.word	0x2000129e
 8000e70:	20000b18 	.word	0x20000b18
 8000e74:	200012a0 	.word	0x200012a0
 8000e78:	20000b0c 	.word	0x20000b0c
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000b14 	.word	0x20000b14
 8000e84:	20000a88 	.word	0x20000a88
 8000e88:	20000afc 	.word	0x20000afc
 8000e8c:	467a0000 	.word	0x467a0000
 8000e90:	2000115c 	.word	0x2000115c
 8000e94:	20000b00 	.word	0x20000b00
 8000e98:	0800991c 	.word	0x0800991c
 8000e9c:	20000b10 	.word	0x20000b10
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	08009924 	.word	0x08009924

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09e      	sub	sp, #120	; 0x78
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eb2:	2228      	movs	r2, #40	; 0x28
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 ff1e 	bl	8006cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	463b      	mov	r3, r7
 8000ece:	223c      	movs	r2, #60	; 0x3c
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f005 ff10 	bl	8006cf8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000edc:	2301      	movs	r3, #1
 8000ede:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eec:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ef0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fdbe 	bl	8002a78 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f02:	f000 f9bb 	bl	800127c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fcb0 	bl	8003888 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f2e:	f000 f9a5 	bl	800127c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f32:	2320      	movs	r3, #32
 8000f34:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fe89 	bl	8003c54 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f48:	f000 f998 	bl	800127c <Error_Handler>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3778      	adds	r7, #120	; 0x78
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_CRC_Init+0x3c>)
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <MX_CRC_Init+0x40>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_CRC_Init+0x3c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_CRC_Init+0x3c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_CRC_Init+0x3c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_CRC_Init+0x3c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_CRC_Init+0x3c>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_CRC_Init+0x3c>)
 8000f7e:	f000 fccf 	bl	8001920 <HAL_CRC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f88:	f000 f978 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000ad8 	.word	0x20000ad8
 8000f94:	40023000 	.word	0x40023000

08000f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_I2C1_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_I2C1_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_I2C1_Init+0x74>)
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <MX_I2C1_Init+0x7c>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_I2C1_Init+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_I2C1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_I2C1_Init+0x74>)
 8000fd4:	f000 ff3a 	bl	8001e4c <HAL_I2C_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fde:	f000 f94d 	bl	800127c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_I2C1_Init+0x74>)
 8000fe6:	f001 fcaf 	bl	8002948 <HAL_I2CEx_ConfigAnalogFilter>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff0:	f000 f944 	bl	800127c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_I2C1_Init+0x74>)
 8000ff8:	f001 fcf1 	bl	80029de <HAL_I2CEx_ConfigDigitalFilter>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 f93b 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000a8c 	.word	0x20000a8c
 8001010:	40005400 	.word	0x40005400
 8001014:	2000090e 	.word	0x2000090e

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_GPIO_Init+0x90>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <MX_GPIO_Init+0x90>)
 8001034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_GPIO_Init+0x90>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_GPIO_Init+0x90>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <MX_GPIO_Init+0x90>)
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_GPIO_Init+0x90>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_GPIO_Init+0x90>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <MX_GPIO_Init+0x90>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_GPIO_Init+0x90>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <MX_GPIO_Init+0x94>)
 800107e:	f000 feb3 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_GPIO_Init+0x94>)
 800109c:	f000 fd2a 	bl	8001af4 <HAL_GPIO_Init>

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48001000 	.word	0x48001000

080010b0 <AI_Init>:

/* USER CODE BEGIN 4 */
static void AI_Init(ai_handle w_addr, ai_handle act_addr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	; 0x40
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80010ba:	2100      	movs	r1, #0
 80010bc:	482b      	ldr	r0, [pc, #172]	; (800116c <AI_Init+0xbc>)
 80010be:	f003 f88b 	bl	80041d8 <ai_network_create>
 80010c2:	4603      	mov	r3, r0
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 80010c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80010ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010d2:	4619      	mov	r1, r3
 80010d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80010da:	461a      	mov	r2, r3
 80010dc:	4824      	ldr	r0, [pc, #144]	; (8001170 <AI_Init+0xc0>)
 80010de:	f006 fb27 	bl	8007730 <iprintf>
    Error_Handler();
 80010e2:	f000 f8cb 	bl	800127c <Error_Handler>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <AI_Init+0xc4>)
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	2301      	movs	r3, #1
 80010ec:	823b      	strh	r3, [r7, #16]
 80010ee:	2301      	movs	r3, #1
 80010f0:	827b      	strh	r3, [r7, #18]
 80010f2:	2301      	movs	r3, #1
 80010f4:	82bb      	strh	r3, [r7, #20]
 80010f6:	f64b 43ac 	movw	r3, #48300	; 0xbcac
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <AI_Init+0xc8>)
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
 8001108:	2301      	movs	r3, #1
 800110a:	853b      	strh	r3, [r7, #40]	; 0x28
 800110c:	2301      	movs	r3, #1
 800110e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001110:	2301      	movs	r3, #1
 8001112:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001114:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
    AI_NETWORK_DATA_WEIGHTS(w_addr),
    AI_NETWORK_DATA_ACTIVATIONS(act_addr)
  );

  if (!ai_network_init(network, &params)) {
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <AI_Init+0xbc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f107 020c 	add.w	r2, r7, #12
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f003 f869 	bl	8004204 <ai_network_init>
 8001132:	4603      	mov	r3, r0
 8001134:	f083 0301 	eor.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d012      	beq.n	8001164 <AI_Init+0xb4>
    err = ai_network_get_error(network);
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <AI_Init+0xbc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f003 f83c 	bl	80041c0 <ai_network_get_error>
 8001148:	4603      	mov	r3, r0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
    printf("ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
 800114c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001150:	4619      	mov	r1, r3
 8001152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001154:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001158:	461a      	mov	r2, r3
 800115a:	4808      	ldr	r0, [pc, #32]	; (800117c <AI_Init+0xcc>)
 800115c:	f006 fae8 	bl	8007730 <iprintf>
    Error_Handler();
 8001160:	f000 f88c 	bl	800127c <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3740      	adds	r7, #64	; 0x40
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20001294 	.word	0x20001294
 8001170:	08009930 	.word	0x08009930
 8001174:	40040440 	.word	0x40040440
 8001178:	00040440 	.word	0x00040440
 800117c:	0800995c 	.word	0x0800995c

08001180 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b090      	sub	sp, #64	; 0x40
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* 1 - Create the AI buffer IO handlers with the default definition */
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <AI_Run+0x8c>)
 800118c:	f107 0420 	add.w	r4, r7, #32
 8001190:	461d      	mov	r5, r3
 8001192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001196:	e895 0003 	ldmia.w	r5, {r0, r1}
 800119a:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <AI_Run+0x90>)
 80011a0:	f107 0408 	add.w	r4, r7, #8
 80011a4:	461d      	mov	r5, r3
 80011a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011ae:	e884 0003 	stmia.w	r4, {r0, r1}

  /* 2 - Update IO handlers with the data payload */
  ai_input[0].n_batches = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  ai_output[0].n_batches = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	81bb      	strh	r3, [r7, #12]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	61bb      	str	r3, [r7, #24]

  batch = ai_network_run(network, ai_input, ai_output);
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <AI_Run+0x94>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f107 0208 	add.w	r2, r7, #8
 80011ca:	f107 0120 	add.w	r1, r7, #32
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 f854 	bl	800427c <ai_network_run>
 80011d4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (batch != 1) {
 80011d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d012      	beq.n	8001202 <AI_Run+0x82>
    err = ai_network_get_error(network);
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <AI_Run+0x94>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 ffed 	bl	80041c0 <ai_network_get_error>
 80011e6:	4603      	mov	r3, r0
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80011ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80011ee:	4619      	mov	r1, r3
 80011f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80011f6:	461a      	mov	r2, r3
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <AI_Run+0x98>)
 80011fa:	f006 fa99 	bl	8007730 <iprintf>
    Error_Handler();
 80011fe:	f000 f83d 	bl	800127c <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3740      	adds	r7, #64	; 0x40
 8001206:	46bd      	mov	sp, r7
 8001208:	bdb0      	pop	{r4, r5, r7, pc}
 800120a:	bf00      	nop
 800120c:	080099b4 	.word	0x080099b4
 8001210:	080099cc 	.word	0x080099cc
 8001214:	20001294 	.word	0x20001294
 8001218:	08009988 	.word	0x08009988

0800121c <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001230:	2301      	movs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e017      	b.n	8001266 <argmax+0x4a>
    if (values[i] > max_value) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ed97 7a05 	vldr	s14, [r7, #20]
 8001246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d507      	bpl.n	8001260 <argmax+0x44>
      max_value = values[i];
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	617b      	str	r3, [r7, #20]
      max_index = i;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3301      	adds	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d3e3      	bcc.n	8001236 <argmax+0x1a>
    }
  }
  return max_index;
 800126e:	693b      	ldr	r3, [r7, #16]
}
 8001270:	4618      	mov	r0, r3
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x44>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_MspInit+0x44>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x44>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x44>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x44>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x44>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_CRC_MspInit+0x38>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10b      	bne.n	80012fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_CRC_MspInit+0x3c>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <HAL_CRC_MspInit+0x3c>)
 80012e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_CRC_MspInit+0x3c>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023000 	.word	0x40023000
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_I2C_MspInit+0x7c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d127      	bne.n	8001382 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_I2C_MspInit+0x80>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <HAL_I2C_MspInit+0x80>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6153      	str	r3, [r2, #20]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_I2C_MspInit+0x80>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134e:	2312      	movs	r3, #18
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800135a:	2304      	movs	r3, #4
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <HAL_I2C_MspInit+0x84>)
 8001366:	f000 fbc5 	bl	8001af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_I2C_MspInit+0x80>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_I2C_MspInit+0x80>)
 8001370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_I2C_MspInit+0x80>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40005400 	.word	0x40005400
 8001390:	40021000 	.word	0x40021000
 8001394:	48000400 	.word	0x48000400

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 f972 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA

	DEMCR |= ( 1 << 24);
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <ITM_SendChar+0x48>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <ITM_SendChar+0x48>)
 80013fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001400:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <ITM_SendChar+0x4c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <ITM_SendChar+0x4c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800140e:	bf00      	nop
 8001410:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f8      	beq.n	8001410 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800141e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	6013      	str	r3, [r2, #0]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000edfc 	.word	0xe000edfc
 8001438:	e0000e00 	.word	0xe0000e00

0800143c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	return 1;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_kill>:

int _kill(int pid, int sig)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001456:	f005 fc0f 	bl	8006c78 <__errno>
 800145a:	4603      	mov	r3, r0
 800145c:	2216      	movs	r2, #22
 800145e:	601a      	str	r2, [r3, #0]
	return -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_exit>:

void _exit (int status)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffe7 	bl	800144c <_kill>
	while (1) {}		/* Make sure we hang here */
 800147e:	e7fe      	b.n	800147e <_exit+0x12>

08001480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e00a      	b.n	80014a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	4601      	mov	r1, r0
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf0      	blt.n	8001492 <_read+0x12>
	}

return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e009      	b.n	80014e0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff89 	bl	80013ec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf1      	blt.n	80014cc <_write+0x12>
	}
	return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_close>:

int _close(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return -1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151a:	605a      	str	r2, [r3, #4]
	return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_isatty>:

int _isatty(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	return 1;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f005 fb74 	bl	8006c78 <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000a000 	.word	0x2000a000
 80015bc:	00000800 	.word	0x00000800
 80015c0:	200009dc 	.word	0x200009dc
 80015c4:	200012b8 	.word	0x200012b8

080015c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <LoopForever+0xe>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001608:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <LoopForever+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001616:	f7ff ffd7 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f005 fb33 	bl	8006c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161e:	f7ff fac3 	bl	8000ba8 <main>

08001622 <LoopForever>:

LoopForever:
    b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001624:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	200009c0 	.word	0x200009c0
  ldr r2, =_sidata
 8001630:	08015b1c 	.word	0x08015b1c
  ldr r2, =_sbss
 8001634:	200009c0 	.word	0x200009c0
  ldr r4, =_ebss
 8001638:	200012b8 	.word	0x200012b8

0800163c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>
	...

08001640 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_Init+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_Init+0x28>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f931 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001656:	200f      	movs	r0, #15
 8001658:	f000 f808 	bl	800166c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff fe14 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x54>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x58>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f93b 	bl	8001906 <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f000 f911 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_InitTick+0x5c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000010 	.word	0x20000010
 80016c4:	20000018 	.word	0x20000018
 80016c8:	20000014 	.word	0x20000014

080016cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000018 	.word	0x20000018
 80016f0:	200012a4 	.word	0x200012a4

080016f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200012a4 	.word	0x200012a4

0800170c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000018 	.word	0x20000018

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff47 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff5c 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffb0 	bl	8001874 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e054      	b.n	80019dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7f5b      	ldrb	r3, [r3, #29]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fcc4 	bl	80012d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	791b      	ldrb	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <HAL_CRC_Init+0xc4>)
 800195c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0218 	bic.w	r2, r2, #24
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	e00c      	b.n	800198a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6899      	ldr	r1, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	461a      	mov	r2, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f834 	bl	80019e8 <HAL_CRCEx_Polynomial_Set>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e028      	b.n	80019dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	795b      	ldrb	r3, [r3, #5]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f04f 32ff 	mov.w	r2, #4294967295
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	e004      	b.n	80019a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6912      	ldr	r2, [r2, #16]
 80019a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	04c11db7 	.word	0x04c11db7

080019e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80019f8:	231f      	movs	r3, #31
 80019fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80019fc:	bf00      	nop
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	613a      	str	r2, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <HAL_CRCEx_Polynomial_Set+0x34>
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_CRCEx_Polynomial_Set+0x16>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b18      	cmp	r3, #24
 8001a20:	d846      	bhi.n	8001ab0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001ab7 	.word	0x08001ab7
 8001a2c:	08001ab1 	.word	0x08001ab1
 8001a30:	08001ab1 	.word	0x08001ab1
 8001a34:	08001ab1 	.word	0x08001ab1
 8001a38:	08001ab1 	.word	0x08001ab1
 8001a3c:	08001ab1 	.word	0x08001ab1
 8001a40:	08001ab1 	.word	0x08001ab1
 8001a44:	08001ab1 	.word	0x08001ab1
 8001a48:	08001aa5 	.word	0x08001aa5
 8001a4c:	08001ab1 	.word	0x08001ab1
 8001a50:	08001ab1 	.word	0x08001ab1
 8001a54:	08001ab1 	.word	0x08001ab1
 8001a58:	08001ab1 	.word	0x08001ab1
 8001a5c:	08001ab1 	.word	0x08001ab1
 8001a60:	08001ab1 	.word	0x08001ab1
 8001a64:	08001ab1 	.word	0x08001ab1
 8001a68:	08001a99 	.word	0x08001a99
 8001a6c:	08001ab1 	.word	0x08001ab1
 8001a70:	08001ab1 	.word	0x08001ab1
 8001a74:	08001ab1 	.word	0x08001ab1
 8001a78:	08001ab1 	.word	0x08001ab1
 8001a7c:	08001ab1 	.word	0x08001ab1
 8001a80:	08001ab1 	.word	0x08001ab1
 8001a84:	08001ab1 	.word	0x08001ab1
 8001a88:	08001a8d 	.word	0x08001a8d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d913      	bls.n	8001aba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a96:	e010      	b.n	8001aba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	d90f      	bls.n	8001abe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001aa2:	e00c      	b.n	8001abe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	d90b      	bls.n	8001ac2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001aae:	e008      	b.n	8001ac2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ab4:	e006      	b.n	8001ac4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ab6:	bf00      	nop
 8001ab8:	e004      	b.n	8001ac4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001aba:	bf00      	nop
 8001abc:	e002      	b.n	8001ac4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001abe:	bf00      	nop
 8001ac0:	e000      	b.n	8001ac4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ac2:	bf00      	nop
  }
  if (status == HAL_OK)
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 0118 	bic.w	r1, r3, #24
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	e154      	b.n	8001dae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8146 	beq.w	8001da8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d005      	beq.n	8001b34 <HAL_GPIO_Init+0x40>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d130      	bne.n	8001b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 0201 	and.w	r2, r3, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d017      	beq.n	8001bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d123      	bne.n	8001c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	6939      	ldr	r1, [r7, #16]
 8001c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80a0 	beq.w	8001da8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c68:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_GPIO_Init+0x2d8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_GPIO_Init+0x2d8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b55      	ldr	r3, [pc, #340]	; (8001dcc <HAL_GPIO_Init+0x2d8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c80:	4a53      	ldr	r2, [pc, #332]	; (8001dd0 <HAL_GPIO_Init+0x2dc>)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001caa:	d019      	beq.n	8001ce0 <HAL_GPIO_Init+0x1ec>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a49      	ldr	r2, [pc, #292]	; (8001dd4 <HAL_GPIO_Init+0x2e0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <HAL_GPIO_Init+0x1e8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a48      	ldr	r2, [pc, #288]	; (8001dd8 <HAL_GPIO_Init+0x2e4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00d      	beq.n	8001cd8 <HAL_GPIO_Init+0x1e4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a47      	ldr	r2, [pc, #284]	; (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e0>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a46      	ldr	r2, [pc, #280]	; (8001de0 <HAL_GPIO_Init+0x2ec>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_GPIO_Init+0x1dc>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e008      	b.n	8001ce2 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	e006      	b.n	8001ce2 <HAL_GPIO_Init+0x1ee>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e004      	b.n	8001ce2 <HAL_GPIO_Init+0x1ee>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x1ee>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_GPIO_Init+0x1ee>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf2:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_GPIO_Init+0x2dc>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d24:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d4e:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d78:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001da2:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f47f aea3 	bne.w	8001b04 <HAL_GPIO_Init+0x10>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000c00 	.word	0x48000c00
 8001de0:	48001000 	.word	0x48001000
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43d9      	mvns	r1, r3
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	400b      	ands	r3, r1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e081      	b.n	8001f62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fa4c 	bl	8001310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e006      	b.n	8001ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d104      	bne.n	8001ee6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69d9      	ldr	r1, [r3, #28]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	461a      	mov	r2, r3
 8001f78:	460b      	mov	r3, r1
 8001f7a:	817b      	strh	r3, [r7, #10]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	f040 80da 	bne.w	8002142 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_I2C_Master_Transmit+0x30>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e0d3      	b.n	8002144 <HAL_I2C_Master_Transmit+0x1d8>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fa4:	f7ff fba6 	bl	80016f4 <HAL_GetTick>
 8001fa8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2319      	movs	r3, #25
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fb66 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0be      	b.n	8002144 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2221      	movs	r2, #33	; 0x21
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	893a      	ldrh	r2, [r7, #8]
 8001fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2bff      	cmp	r3, #255	; 0xff
 8001ff6:	d90e      	bls.n	8002016 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	b2da      	uxtb	r2, r3
 8002004:	8979      	ldrh	r1, [r7, #10]
 8002006:	4b51      	ldr	r3, [pc, #324]	; (800214c <HAL_I2C_Master_Transmit+0x1e0>)
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fc6c 	bl	80028ec <I2C_TransferConfig>
 8002014:	e06c      	b.n	80020f0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002024:	b2da      	uxtb	r2, r3
 8002026:	8979      	ldrh	r1, [r7, #10]
 8002028:	4b48      	ldr	r3, [pc, #288]	; (800214c <HAL_I2C_Master_Transmit+0x1e0>)
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fc5b 	bl	80028ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002036:	e05b      	b.n	80020f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	6a39      	ldr	r1, [r7, #32]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fb63 	bl	8002708 <I2C_WaitOnTXISFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e07b      	b.n	8002144 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	781a      	ldrb	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d034      	beq.n	80020f0 <HAL_I2C_Master_Transmit+0x184>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	d130      	bne.n	80020f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	2200      	movs	r2, #0
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 faf5 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e04d      	b.n	8002144 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2bff      	cmp	r3, #255	; 0xff
 80020b0:	d90e      	bls.n	80020d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	22ff      	movs	r2, #255	; 0xff
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	8979      	ldrh	r1, [r7, #10]
 80020c0:	2300      	movs	r3, #0
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fc0f 	bl	80028ec <I2C_TransferConfig>
 80020ce:	e00f      	b.n	80020f0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	8979      	ldrh	r1, [r7, #10]
 80020e2:	2300      	movs	r3, #0
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fbfe 	bl	80028ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d19e      	bne.n	8002038 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	6a39      	ldr	r1, [r7, #32]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fb42 	bl	8002788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e01a      	b.n	8002144 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2220      	movs	r2, #32
 8002114:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_I2C_Master_Transmit+0x1e4>)
 8002122:	400b      	ands	r3, r1
 8002124:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	80002000 	.word	0x80002000
 8002150:	fe00e800 	.word	0xfe00e800

08002154 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	4603      	mov	r3, r0
 8002164:	817b      	strh	r3, [r7, #10]
 8002166:	460b      	mov	r3, r1
 8002168:	813b      	strh	r3, [r7, #8]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b20      	cmp	r3, #32
 8002178:	f040 80fd 	bne.w	8002376 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_I2C_Mem_Read+0x34>
 8002182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0f1      	b.n	8002378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Mem_Read+0x4e>
 800219e:	2302      	movs	r3, #2
 80021a0:	e0ea      	b.n	8002378 <HAL_I2C_Mem_Read+0x224>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021aa:	f7ff faa3 	bl	80016f4 <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2319      	movs	r3, #25
 80021b6:	2201      	movs	r2, #1
 80021b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fa63 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0d5      	b.n	8002378 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2222      	movs	r2, #34	; 0x22
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2240      	movs	r2, #64	; 0x40
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f4:	88f8      	ldrh	r0, [r7, #6]
 80021f6:	893a      	ldrh	r2, [r7, #8]
 80021f8:	8979      	ldrh	r1, [r7, #10]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	4603      	mov	r3, r0
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f9c7 	bl	8002598 <I2C_RequestMemoryRead>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0ad      	b.n	8002378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2bff      	cmp	r3, #255	; 0xff
 8002224:	d90e      	bls.n	8002244 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_I2C_Mem_Read+0x22c>)
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fb55 	bl	80028ec <I2C_TransferConfig>
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	b2da      	uxtb	r2, r3
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_I2C_Mem_Read+0x22c>)
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fb44 	bl	80028ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2200      	movs	r2, #0
 800226c:	2104      	movs	r1, #4
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fa0a 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07c      	b.n	8002378 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d034      	beq.n	8002324 <HAL_I2C_Mem_Read+0x1d0>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d130      	bne.n	8002324 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	2200      	movs	r2, #0
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f9db 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e04d      	b.n	8002378 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2bff      	cmp	r3, #255	; 0xff
 80022e4:	d90e      	bls.n	8002304 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	8979      	ldrh	r1, [r7, #10]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 faf5 	bl	80028ec <I2C_TransferConfig>
 8002302:	e00f      	b.n	8002324 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	b2da      	uxtb	r2, r3
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	2300      	movs	r3, #0
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fae4 	bl	80028ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d19a      	bne.n	8002264 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fa28 	bl	8002788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e01a      	b.n	8002378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2220      	movs	r2, #32
 8002348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_I2C_Mem_Read+0x230>)
 8002356:	400b      	ands	r3, r1
 8002358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e000      	b.n	8002378 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002376:	2302      	movs	r3, #2
  }
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	80002400 	.word	0x80002400
 8002384:	fe00e800 	.word	0xfe00e800

08002388 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	460b      	mov	r3, r1
 8002396:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	f040 80f1 	bne.w	800258c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b8:	d101      	bne.n	80023be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0e7      	b.n	800258e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_I2C_IsDeviceReady+0x44>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e0e0      	b.n	800258e <HAL_I2C_IsDeviceReady+0x206>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2224      	movs	r2, #36	; 0x24
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_I2C_IsDeviceReady+0x72>
 80023ea:	897b      	ldrh	r3, [r7, #10]
 80023ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023f8:	e004      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x7c>
 80023fa:	897b      	ldrh	r3, [r7, #10]
 80023fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002400:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800240a:	f7ff f973 	bl	80016f4 <HAL_GetTick>
 800240e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b20      	cmp	r3, #32
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b10      	cmp	r3, #16
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800243c:	e034      	b.n	80024a8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d01a      	beq.n	800247c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7ff f955 	bl	80016f4 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d302      	bcc.n	800245c <HAL_I2C_IsDeviceReady+0xd4>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10f      	bne.n	800247c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e088      	b.n	800258e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b10      	cmp	r3, #16
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_I2C_IsDeviceReady+0x12c>
 80024ae:	7fbb      	ldrb	r3, [r7, #30]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0c4      	beq.n	800243e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d01a      	beq.n	80024f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	2120      	movs	r1, #32
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f8db 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e058      	b.n	800258e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2220      	movs	r2, #32
 80024e2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e04a      	b.n	800258e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	2120      	movs	r1, #32
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f8c0 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e03d      	b.n	800258e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2210      	movs	r2, #16
 8002518:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2220      	movs	r2, #32
 8002520:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d118      	bne.n	800255c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002538:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2200      	movs	r2, #0
 8002542:	2120      	movs	r1, #32
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f89f 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e01c      	b.n	800258e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2220      	movs	r2, #32
 800255a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	f63f af3b 	bhi.w	80023e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	817b      	strh	r3, [r7, #10]
 80025aa:	460b      	mov	r3, r1
 80025ac:	813b      	strh	r3, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	8979      	ldrh	r1, [r7, #10]
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <I2C_RequestMemoryRead+0xa4>)
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2300      	movs	r3, #0
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f994 	bl	80028ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f89d 	bl	8002708 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e02c      	b.n	8002632 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025de:	893b      	ldrh	r3, [r7, #8]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
 80025e8:	e015      	b.n	8002616 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025ea:	893b      	ldrh	r3, [r7, #8]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	69b9      	ldr	r1, [r7, #24]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f883 	bl	8002708 <I2C_WaitOnTXISFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e012      	b.n	8002632 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800260c:	893b      	ldrh	r3, [r7, #8]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2200      	movs	r2, #0
 800261e:	2140      	movs	r1, #64	; 0x40
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f831 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	80002000 	.word	0x80002000

08002640 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b02      	cmp	r3, #2
 8002654:	d103      	bne.n	800265e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d007      	beq.n	800267c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	619a      	str	r2, [r3, #24]
  }
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002698:	e022      	b.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d01e      	beq.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7ff f827 	bl	80016f4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d113      	bne.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e00f      	b.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4013      	ands	r3, r2
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d0cd      	beq.n	800269a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002714:	e02c      	b.n	8002770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f870 	bl	8002800 <I2C_IsAcknowledgeFailed>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e02a      	b.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d01e      	beq.n	8002770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7fe ffdf 	bl	80016f4 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d113      	bne.n	8002770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d1cb      	bne.n	8002716 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002794:	e028      	b.n	80027e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f830 	bl	8002800 <I2C_IsAcknowledgeFailed>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e026      	b.n	80027f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7fe ffa3 	bl	80016f4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d113      	bne.n	80027e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d1cf      	bne.n	8002796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b10      	cmp	r3, #16
 8002818:	d161      	bne.n	80028de <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002828:	d02b      	beq.n	8002882 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002838:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800283a:	e022      	b.n	8002882 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d01e      	beq.n	8002882 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002844:	f7fe ff56 	bl	80016f4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d302      	bcc.n	800285a <I2C_IsAcknowledgeFailed+0x5a>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d113      	bne.n	8002882 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e02e      	b.n	80028e0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d1d5      	bne.n	800283c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2220      	movs	r2, #32
 800289e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff fecd 	bl	8002640 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <I2C_IsAcknowledgeFailed+0xe8>)
 80028b2:	400b      	ands	r3, r1
 80028b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	fe00e800 	.word	0xfe00e800

080028ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	817b      	strh	r3, [r7, #10]
 80028fa:	4613      	mov	r3, r2
 80028fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	0d5b      	lsrs	r3, r3, #21
 8002908:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <I2C_TransferConfig+0x58>)
 800290e:	430b      	orrs	r3, r1
 8002910:	43db      	mvns	r3, r3
 8002912:	ea02 0103 	and.w	r1, r2, r3
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800291c:	7a7b      	ldrb	r3, [r7, #9]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	03ff63ff 	.word	0x03ff63ff

08002948 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	d138      	bne.n	80029d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002968:	2302      	movs	r3, #2
 800296a:	e032      	b.n	80029d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800299a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d139      	bne.n	8002a68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e033      	b.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2224      	movs	r2, #36	; 0x24
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f000 bef4 	b.w	800387a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 816a 	beq.w	8002d76 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002aa2:	4bb3      	ldr	r3, [pc, #716]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d00c      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aae:	4bb0      	ldr	r3, [pc, #704]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d159      	bne.n	8002b6e <HAL_RCC_OscConfig+0xf6>
 8002aba:	4bad      	ldr	r3, [pc, #692]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac6:	d152      	bne.n	8002b6e <HAL_RCC_OscConfig+0xf6>
 8002ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002acc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002adc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_OscConfig+0x82>
 8002af4:	4b9e      	ldr	r3, [pc, #632]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0xae>
 8002afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002afe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b12:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b16:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b22:	4b93      	ldr	r3, [pc, #588]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b2e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b32:	fa92 f2a2 	rbit	r2, r2
 8002b36:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b3a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b3e:	fab2 f282 	clz	r2, r2
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f042 0220 	orr.w	r2, r2, #32
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	f002 021f 	and.w	r2, r2, #31
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 810c 	beq.w	8002d74 <HAL_RCC_OscConfig+0x2fc>
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 8106 	bne.w	8002d74 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f000 be86 	b.w	800387a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d106      	bne.n	8002b88 <HAL_RCC_OscConfig+0x110>
 8002b7a:	4b7d      	ldr	r3, [pc, #500]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7c      	ldr	r2, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e030      	b.n	8002bea <HAL_RCC_OscConfig+0x172>
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x134>
 8002b92:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a76      	ldr	r2, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b74      	ldr	r3, [pc, #464]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a73      	ldr	r2, [pc, #460]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01e      	b.n	8002bea <HAL_RCC_OscConfig+0x172>
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x15a>
 8002bb8:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a6c      	ldr	r2, [pc, #432]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e00b      	b.n	8002bea <HAL_RCC_OscConfig+0x172>
 8002bd2:	4b67      	ldr	r3, [pc, #412]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a66      	ldr	r2, [pc, #408]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a63      	ldr	r2, [pc, #396]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bea:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f023 020f 	bic.w	r2, r3, #15
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	495d      	ldr	r1, [pc, #372]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d059      	beq.n	8002cbc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fd74 	bl	80016f4 <HAL_GetTick>
 8002c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c12:	f7fe fd6f 	bl	80016f4 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d902      	bls.n	8002c28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	f000 be29 	b.w	800387a <HAL_RCC_OscConfig+0xe02>
 8002c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c3c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_OscConfig+0x1e2>
 8002c54:	4b46      	ldr	r3, [pc, #280]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x20e>
 8002c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c76:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c92:	fa92 f2a2 	rbit	r2, r2
 8002c96:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c9a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0220 	orr.w	r2, r2, #32
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ab      	beq.n	8002c12 <HAL_RCC_OscConfig+0x19a>
 8002cba:	e05c      	b.n	8002d76 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fd1a 	bl	80016f4 <HAL_GetTick>
 8002cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fd15 	bl	80016f4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d902      	bls.n	8002cdc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	f000 bdcf 	b.w	800387a <HAL_RCC_OscConfig+0xe02>
 8002cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002cf0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_OscConfig+0x296>
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x2c2>
 8002d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_RCC_OscConfig+0x2f8>)
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d46:	fa92 f2a2 	rbit	r2, r2
 8002d4a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d4e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d52:	fab2 f282 	clz	r2, r2
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f042 0220 	orr.w	r2, r2, #32
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f002 021f 	and.w	r2, r2, #31
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ab      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x24e>
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_OscConfig+0x2fe>
 8002d70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 816f 	beq.w	8003064 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d86:	4bd0      	ldr	r3, [pc, #832]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d92:	4bcd      	ldr	r3, [pc, #820]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d16c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x400>
 8002d9e:	4bca      	ldr	r3, [pc, #808]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d166      	bne.n	8002e78 <HAL_RCC_OscConfig+0x400>
 8002daa:	2302      	movs	r3, #2
 8002dac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002dbc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d102      	bne.n	8002dda <HAL_RCC_OscConfig+0x362>
 8002dd4:	4bbc      	ldr	r3, [pc, #752]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	e013      	b.n	8002e02 <HAL_RCC_OscConfig+0x38a>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002df2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002dfe:	4bb2      	ldr	r3, [pc, #712]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2202      	movs	r2, #2
 8002e04:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e08:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e0c:	fa92 f2a2 	rbit	r2, r2
 8002e10:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e14:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f042 0220 	orr.w	r2, r2, #32
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f002 021f 	and.w	r2, r2, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_RCC_OscConfig+0x3cc>
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f000 bd1b 	b.w	800387a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4ba0      	ldr	r3, [pc, #640]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	21f8      	movs	r1, #248	; 0xf8
 8002e54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e5c:	fa91 f1a1 	rbit	r1, r1
 8002e60:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e64:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e68:	fab1 f181 	clz	r1, r1
 8002e6c:	b2c9      	uxtb	r1, r1
 8002e6e:	408b      	lsls	r3, r1
 8002e70:	4995      	ldr	r1, [pc, #596]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e0f5      	b.n	8003064 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8085 	beq.w	8002f8e <HAL_RCC_OscConfig+0x516>
 8002e84:	2301      	movs	r3, #1
 8002e86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ea4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2301      	movs	r3, #1
 8002eae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fc20 	bl	80016f4 <HAL_GetTick>
 8002eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eba:	f7fe fc1b 	bl	80016f4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d902      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	f000 bcd5 	b.w	800387a <HAL_RCC_OscConfig+0xe02>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ee2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_RCC_OscConfig+0x488>
 8002efa:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e013      	b.n	8002f28 <HAL_RCC_OscConfig+0x4b0>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f12:	2302      	movs	r3, #2
 8002f14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f24:	4b68      	ldr	r3, [pc, #416]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f042 0220 	orr.w	r2, r2, #32
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0af      	beq.n	8002eba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5a:	4b5b      	ldr	r3, [pc, #364]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	21f8      	movs	r1, #248	; 0xf8
 8002f6a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f72:	fa91 f1a1 	rbit	r1, r1
 8002f76:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f7a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f7e:	fab1 f181 	clz	r1, r1
 8002f82:	b2c9      	uxtb	r1, r1
 8002f84:	408b      	lsls	r3, r1
 8002f86:	4950      	ldr	r1, [pc, #320]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
 8002f8c:	e06a      	b.n	8003064 <HAL_RCC_OscConfig+0x5ec>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002fa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fe fb9b 	bl	80016f4 <HAL_GetTick>
 8002fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc4:	f7fe fb96 	bl	80016f4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d902      	bls.n	8002fda <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f000 bc50 	b.w	800387a <HAL_RCC_OscConfig+0xe02>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d102      	bne.n	800300a <HAL_RCC_OscConfig+0x592>
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	e013      	b.n	8003032 <HAL_RCC_OscConfig+0x5ba>
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003022:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCC_OscConfig+0x650>)
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2202      	movs	r2, #2
 8003034:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003038:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800303c:	fa92 f2a2 	rbit	r2, r2
 8003040:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003044:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003048:	fab2 f282 	clz	r2, r2
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	f042 0220 	orr.w	r2, r2, #32
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	f002 021f 	and.w	r2, r2, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f202 	lsl.w	r2, r1, r2
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1af      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80da 	beq.w	8003228 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d069      	beq.n	8003152 <HAL_RCC_OscConfig+0x6da>
 800307e:	2301      	movs	r3, #1
 8003080:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_OscConfig+0x654>)
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	461a      	mov	r2, r3
 80030a4:	2301      	movs	r3, #1
 80030a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fe fb24 	bl	80016f4 <HAL_GetTick>
 80030ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b0:	e00e      	b.n	80030d0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b2:	f7fe fb1f 	bl	80016f4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d906      	bls.n	80030d0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e3d9      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	10908120 	.word	0x10908120
 80030d0:	2302      	movs	r3, #2
 80030d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030e6:	2202      	movs	r2, #2
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	fa93 f2a3 	rbit	r2, r3
 80030f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80030fe:	2202      	movs	r2, #2
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	fa93 f2a3 	rbit	r2, r3
 800310c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003110:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	4ba5      	ldr	r3, [pc, #660]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003116:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800311a:	2102      	movs	r1, #2
 800311c:	6019      	str	r1, [r3, #0]
 800311e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f1a3 	rbit	r1, r3
 8003128:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800312c:	6019      	str	r1, [r3, #0]
  return result;
 800312e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2101      	movs	r1, #1
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0b0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x63a>
 8003150:	e06a      	b.n	8003228 <HAL_RCC_OscConfig+0x7b0>
 8003152:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fa93 f2a3 	rbit	r2, r3
 8003164:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003168:	601a      	str	r2, [r3, #0]
  return result;
 800316a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800316e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003184:	f7fe fab6 	bl	80016f4 <HAL_GetTick>
 8003188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	e009      	b.n	80031a2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe fab1 	bl	80016f4 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e36b      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
 80031a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80031a6:	2202      	movs	r2, #2
 80031a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	fa93 f2a3 	rbit	r2, r3
 80031b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80031be:	2202      	movs	r2, #2
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	fa93 f2a3 	rbit	r2, r3
 80031cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80031d6:	2202      	movs	r2, #2
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ea:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80031ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80031f2:	2102      	movs	r1, #2
 80031f4:	6019      	str	r1, [r3, #0]
 80031f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	fa93 f1a3 	rbit	r1, r3
 8003200:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003204:	6019      	str	r1, [r3, #0]
  return result;
 8003206:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1b2      	bne.n	800318e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8158 	beq.w	80034e8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003238:	2300      	movs	r3, #0
 800323a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b5a      	ldr	r3, [pc, #360]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d112      	bne.n	8003270 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	4b57      	ldr	r3, [pc, #348]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4a56      	ldr	r2, [pc, #344]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	61d3      	str	r3, [r2, #28]
 8003256:	4b54      	ldr	r3, [pc, #336]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f107 0308 	add.w	r3, r7, #8
 8003268:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <HAL_RCC_OscConfig+0x938>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d11a      	bne.n	80032b2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327c:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <HAL_RCC_OscConfig+0x938>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a4b      	ldr	r2, [pc, #300]	; (80033b0 <HAL_RCC_OscConfig+0x938>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003288:	f7fe fa34 	bl	80016f4 <HAL_GetTick>
 800328c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	e009      	b.n	80032a6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003292:	f7fe fa2f 	bl	80016f4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e2e9      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a6:	4b42      	ldr	r3, [pc, #264]	; (80033b0 <HAL_RCC_OscConfig+0x938>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ef      	beq.n	8003292 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x852>
 80032bc:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4a39      	ldr	r2, [pc, #228]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6213      	str	r3, [r2, #32]
 80032c8:	e02f      	b.n	800332a <HAL_RCC_OscConfig+0x8b2>
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x876>
 80032d4:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4a33      	ldr	r2, [pc, #204]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6213      	str	r3, [r2, #32]
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	e01d      	b.n	800332a <HAL_RCC_OscConfig+0x8b2>
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d10c      	bne.n	8003312 <HAL_RCC_OscConfig+0x89a>
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	6213      	str	r3, [r2, #32]
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6213      	str	r3, [r2, #32]
 8003310:	e00b      	b.n	800332a <HAL_RCC_OscConfig+0x8b2>
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6213      	str	r3, [r2, #32]
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4a21      	ldr	r2, [pc, #132]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d06b      	beq.n	800340c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fe f9de 	bl	80016f4 <HAL_GetTick>
 8003338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	e00b      	b.n	8003356 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fe f9d9 	bl	80016f4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e291      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
 8003356:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800335a:	2202      	movs	r2, #2
 800335c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	fa93 f2a3 	rbit	r2, r3
 8003368:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003372:	2202      	movs	r2, #2
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003384:	601a      	str	r2, [r3, #0]
  return result;
 8003386:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800338a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d109      	bne.n	80033b4 <HAL_RCC_OscConfig+0x93c>
 80033a0:	4b01      	ldr	r3, [pc, #4]	; (80033a8 <HAL_RCC_OscConfig+0x930>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x958>
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	10908120 	.word	0x10908120
 80033b0:	40007000 	.word	0x40007000
 80033b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80033b8:	2202      	movs	r2, #2
 80033ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	fa93 f2a3 	rbit	r2, r3
 80033c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	4bbb      	ldr	r3, [pc, #748]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80033d4:	2102      	movs	r1, #2
 80033d6:	6011      	str	r1, [r2, #0]
 80033d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	fa92 f1a2 	rbit	r1, r2
 80033e2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80033e6:	6011      	str	r1, [r2, #0]
  return result;
 80033e8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d099      	beq.n	800333e <HAL_RCC_OscConfig+0x8c6>
 800340a:	e063      	b.n	80034d4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fe f972 	bl	80016f4 <HAL_GetTick>
 8003410:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fe f96d 	bl	80016f4 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e225      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
 800342e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003432:	2202      	movs	r2, #2
 8003434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800344a:	2202      	movs	r2, #2
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	fa93 f2a3 	rbit	r2, r3
 8003458:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800345c:	601a      	str	r2, [r3, #0]
  return result;
 800345e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003462:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d102      	bne.n	800347e <HAL_RCC_OscConfig+0xa06>
 8003478:	4b90      	ldr	r3, [pc, #576]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	e00d      	b.n	800349a <HAL_RCC_OscConfig+0xa22>
 800347e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003482:	2202      	movs	r2, #2
 8003484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f2a3 	rbit	r2, r3
 8003490:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	4b89      	ldr	r3, [pc, #548]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800349e:	2102      	movs	r1, #2
 80034a0:	6011      	str	r1, [r2, #0]
 80034a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	fa92 f1a2 	rbit	r1, r2
 80034ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80034b0:	6011      	str	r1, [r2, #0]
  return result;
 80034b2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	fab2 f282 	clz	r2, r2
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	f002 021f 	and.w	r2, r2, #31
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f202 	lsl.w	r2, r1, r2
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1a0      	bne.n	8003416 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034dc:	4b77      	ldr	r3, [pc, #476]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a76      	ldr	r2, [pc, #472]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 81c2 	beq.w	8003878 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f4:	4b71      	ldr	r3, [pc, #452]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	f000 819c 	beq.w	800383a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b02      	cmp	r3, #2
 800350a:	f040 8114 	bne.w	8003736 <HAL_RCC_OscConfig+0xcbe>
 800350e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003512:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003526:	601a      	str	r2, [r3, #0]
  return result;
 8003528:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800352c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003538:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe f8d6 	bl	80016f4 <HAL_GetTick>
 8003548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800354c:	e009      	b.n	8003562 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe f8d1 	bl	80016f4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e18b      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
 8003562:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	fa93 f2a3 	rbit	r2, r3
 8003576:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800357a:	601a      	str	r2, [r3, #0]
  return result;
 800357c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003580:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <HAL_RCC_OscConfig+0xb24>
 8003596:	4b49      	ldr	r3, [pc, #292]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	e01b      	b.n	80035d4 <HAL_RCC_OscConfig+0xb5c>
 800359c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	fa93 f2a3 	rbit	r2, r3
 80035b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	fa93 f2a3 	rbit	r2, r3
 80035ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80035d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	fa92 f1a2 	rbit	r1, r2
 80035e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80035ec:	6011      	str	r1, [r2, #0]
  return result;
 80035ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f042 0220 	orr.w	r2, r2, #32
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f002 021f 	and.w	r2, r2, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d19e      	bne.n	800354e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	430b      	orrs	r3, r1
 8003626:	4925      	ldr	r1, [pc, #148]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
 800362c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003644:	601a      	str	r2, [r3, #0]
  return result;
 8003646:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800364a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003656:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	461a      	mov	r2, r3
 800365e:	2301      	movs	r3, #1
 8003660:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7fe f847 	bl	80016f4 <HAL_GetTick>
 8003666:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800366a:	e009      	b.n	8003680 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe f842 	bl	80016f4 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0fc      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
 8003680:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003698:	601a      	str	r2, [r3, #0]
  return result;
 800369a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800369e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <HAL_RCC_OscConfig+0xc48>
 80036b4:	4b01      	ldr	r3, [pc, #4]	; (80036bc <HAL_RCC_OscConfig+0xc44>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	e01e      	b.n	80036f8 <HAL_RCC_OscConfig+0xc80>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	fa93 f2a3 	rbit	r2, r3
 80036ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	4b63      	ldr	r3, [pc, #396]	; (8003884 <HAL_RCC_OscConfig+0xe0c>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003700:	6011      	str	r1, [r2, #0]
 8003702:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	fa92 f1a2 	rbit	r1, r2
 800370c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003710:	6011      	str	r1, [r2, #0]
  return result;
 8003712:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f042 0220 	orr.w	r2, r2, #32
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d09b      	beq.n	800366c <HAL_RCC_OscConfig+0xbf4>
 8003734:	e0a0      	b.n	8003878 <HAL_RCC_OscConfig+0xe00>
 8003736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800373a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800373e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800374e:	601a      	str	r2, [r3, #0]
  return result;
 8003750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003754:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	461a      	mov	r2, r3
 8003768:	2300      	movs	r3, #0
 800376a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fd ffc2 	bl	80016f4 <HAL_GetTick>
 8003770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003774:	e009      	b.n	800378a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fd ffbd 	bl	80016f4 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e077      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
 800378a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800378e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	fa93 f2a3 	rbit	r2, r3
 800379e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a2:	601a      	str	r2, [r3, #0]
  return result;
 80037a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d102      	bne.n	80037c4 <HAL_RCC_OscConfig+0xd4c>
 80037be:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_RCC_OscConfig+0xe0c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	e01b      	b.n	80037fc <HAL_RCC_OscConfig+0xd84>
 80037c4:	f107 0320 	add.w	r3, r7, #32
 80037c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f107 0320 	add.w	r3, r7, #32
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	fa93 f2a3 	rbit	r2, r3
 80037d8:	f107 031c 	add.w	r3, r7, #28
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f107 0318 	add.w	r3, r7, #24
 80037e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f107 0318 	add.w	r3, r7, #24
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	4b22      	ldr	r3, [pc, #136]	; (8003884 <HAL_RCC_OscConfig+0xe0c>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f107 0210 	add.w	r2, r7, #16
 8003800:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	f107 0210 	add.w	r2, r7, #16
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	fa92 f1a2 	rbit	r1, r2
 8003810:	f107 020c 	add.w	r2, r7, #12
 8003814:	6011      	str	r1, [r2, #0]
  return result;
 8003816:	f107 020c 	add.w	r2, r7, #12
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	fab2 f282 	clz	r2, r2
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f042 0220 	orr.w	r2, r2, #32
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f002 021f 	and.w	r2, r2, #31
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d19e      	bne.n	8003776 <HAL_RCC_OscConfig+0xcfe>
 8003838:	e01e      	b.n	8003878 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e018      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <HAL_RCC_OscConfig+0xe0c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003850:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003854:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	429a      	cmp	r2, r3
 8003860:	d108      	bne.n	8003874 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003862:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000

08003888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b09e      	sub	sp, #120	; 0x78
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e162      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b90      	ldr	r3, [pc, #576]	; (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d910      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b8d      	ldr	r3, [pc, #564]	; (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 0207 	bic.w	r2, r3, #7
 80038b6:	498b      	ldr	r1, [pc, #556]	; (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b89      	ldr	r3, [pc, #548]	; (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e14a      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b82      	ldr	r3, [pc, #520]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	497f      	ldr	r1, [pc, #508]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80dc 	beq.w	8003ab4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d13c      	bne.n	800397e <HAL_RCC_ClockConfig+0xf6>
 8003904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003908:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d102      	bne.n	800392e <HAL_RCC_ClockConfig+0xa6>
 8003928:	4b6f      	ldr	r3, [pc, #444]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	e00f      	b.n	800394e <HAL_RCC_ClockConfig+0xc6>
 800392e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003932:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	667b      	str	r3, [r7, #100]	; 0x64
 800393c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003940:	663b      	str	r3, [r7, #96]	; 0x60
 8003942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800394a:	4b67      	ldr	r3, [pc, #412]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003952:	65ba      	str	r2, [r7, #88]	; 0x58
 8003954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003956:	fa92 f2a2 	rbit	r2, r2
 800395a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800395c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800395e:	fab2 f282 	clz	r2, r2
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f042 0220 	orr.w	r2, r2, #32
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	f002 021f 	and.w	r2, r2, #31
 800396e:	2101      	movs	r1, #1
 8003970:	fa01 f202 	lsl.w	r2, r1, r2
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d17b      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0f3      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d13c      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x178>
 8003986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800398a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x128>
 80039aa:	4b4f      	ldr	r3, [pc, #316]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e00f      	b.n	80039d0 <HAL_RCC_ClockConfig+0x148>
 80039b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	647b      	str	r3, [r7, #68]	; 0x44
 80039be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
 80039c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039cc:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80039d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039d8:	fa92 f2a2 	rbit	r2, r2
 80039dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80039de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f042 0220 	orr.w	r2, r2, #32
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d13a      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0b2      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
 8003a00:	2302      	movs	r3, #2
 8003a02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x1a0>
 8003a22:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	e00d      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1bc>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	2302      	movs	r3, #2
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2202      	movs	r2, #2
 8003a46:	61ba      	str	r2, [r7, #24]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	fa92 f2a2 	rbit	r2, r2
 8003a4e:	617a      	str	r2, [r7, #20]
  return result;
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	fab2 f282 	clz	r2, r2
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f042 0220 	orr.w	r2, r2, #32
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f002 021f 	and.w	r2, r2, #31
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e079      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f023 0203 	bic.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	491a      	ldr	r1, [pc, #104]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a84:	f7fd fe36 	bl	80016f4 <HAL_GetTick>
 8003a88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7fd fe32 	bl	80016f4 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e061      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 020c 	and.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1eb      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d214      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 0207 	bic.w	r2, r3, #7
 8003aca:	4906      	ldr	r1, [pc, #24]	; (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e040      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
 8003ae4:	40022000 	.word	0x40022000
 8003ae8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	491a      	ldr	r1, [pc, #104]	; (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4912      	ldr	r1, [pc, #72]	; (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b2a:	f000 f829 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b2e:	4601      	mov	r1, r0
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b38:	22f0      	movs	r2, #240	; 0xf0
 8003b3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	fa92 f2a2 	rbit	r2, r2
 8003b42:	60fa      	str	r2, [r7, #12]
  return result;
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	fab2 f282 	clz	r2, r2
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	40d3      	lsrs	r3, r2
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x2ec>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	fa21 f303 	lsr.w	r3, r1, r3
 8003b56:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <HAL_RCC_ClockConfig+0x2f0>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_RCC_ClockConfig+0x2f4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fd84 	bl	800166c <HAL_InitTick>
  
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3778      	adds	r7, #120	; 0x78
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	080099e8 	.word	0x080099e8
 8003b78:	20000010 	.word	0x20000010
 8003b7c:	20000014 	.word	0x20000014

08003b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b08b      	sub	sp, #44	; 0x2c
 8003b84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b9a:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x30>
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x36>
 8003bae:	e03c      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb0:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bb2:	623b      	str	r3, [r7, #32]
      break;
 8003bb4:	e03c      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003bbc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003bc0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	fa92 f2a2 	rbit	r2, r2
 8003bc8:	607a      	str	r2, [r7, #4]
  return result;
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	fab2 f282 	clz	r2, r2
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	40d3      	lsrs	r3, r2
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	220f      	movs	r2, #15
 8003be4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	fa92 f2a2 	rbit	r2, r2
 8003bec:	60fa      	str	r2, [r7, #12]
  return result;
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	fab2 f282 	clz	r2, r2
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	40d3      	lsrs	r3, r2
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
 8003bfc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c08:	4a0e      	ldr	r2, [pc, #56]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
 8003c18:	e004      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	623b      	str	r3, [r7, #32]
      break;
 8003c28:	e002      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c2c:	623b      	str	r3, [r7, #32]
      break;
 8003c2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	372c      	adds	r7, #44	; 0x2c
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	007a1200 	.word	0x007a1200
 8003c48:	080099f8 	.word	0x080099f8
 8003c4c:	08009a08 	.word	0x08009a08
 8003c50:	003d0900 	.word	0x003d0900

08003c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b092      	sub	sp, #72	; 0x48
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80d4 	beq.w	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c78:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10e      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c84:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	61d3      	str	r3, [r2, #28]
 8003c90:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d118      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cae:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a41      	ldr	r2, [pc, #260]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cba:	f7fd fd1b 	bl	80016f4 <HAL_GetTick>
 8003cbe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc2:	f7fd fd17 	bl	80016f4 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b64      	cmp	r3, #100	; 0x64
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e169      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ce0:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8084 	beq.w	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d07c      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d52:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d56:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04b      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fd fcc7 	bl	80016f4 <HAL_GetTick>
 8003d66:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fd fcc3 	bl	80016f4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e113      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003d80:	2302      	movs	r3, #2
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	61fb      	str	r3, [r7, #28]
  return result;
 8003d98:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d108      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003dae:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	e00d      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	10908100 	.word	0x10908100
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	4b78      	ldr	r3, [pc, #480]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	613a      	str	r2, [r7, #16]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	fa92 f2a2 	rbit	r2, r2
 8003dda:	60fa      	str	r2, [r7, #12]
  return result;
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	fab2 f282 	clz	r2, r2
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	f002 021f 	and.w	r2, r2, #31
 8003dee:	2101      	movs	r1, #1
 8003df0:	fa01 f202 	lsl.w	r2, r1, r2
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0b7      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	496a      	ldr	r1, [pc, #424]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e14:	4b66      	ldr	r3, [pc, #408]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4a65      	ldr	r2, [pc, #404]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2c:	4b60      	ldr	r3, [pc, #384]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	f023 0203 	bic.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	495d      	ldr	r1, [pc, #372]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e4a:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	4956      	ldr	r1, [pc, #344]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e68:	4b51      	ldr	r3, [pc, #324]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	494e      	ldr	r1, [pc, #312]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e86:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f023 0210 	bic.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	4947      	ldr	r1, [pc, #284]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ea4:	4b42      	ldr	r3, [pc, #264]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	493f      	ldr	r1, [pc, #252]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	f023 0220 	bic.w	r2, r3, #32
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	4938      	ldr	r1, [pc, #224]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee0:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4930      	ldr	r1, [pc, #192]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003efe:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	4929      	ldr	r1, [pc, #164]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	4921      	ldr	r1, [pc, #132]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	491a      	ldr	r1, [pc, #104]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	4912      	ldr	r1, [pc, #72]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f76:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	490b      	ldr	r1, [pc, #44]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	4903      	ldr	r1, [pc, #12]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3748      	adds	r7, #72	; 0x48
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8003fc2:	f107 030c 	add.w	r3, r7, #12
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f9a8 	bl	8004320 <ai_platform_get_activations_map>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d035      	beq.n	8004042 <network_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <network_configure_activations+0x98>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <network_configure_activations+0x98>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations_map[0] + 64);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3340      	adds	r3, #64	; 0x40
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <network_configure_activations+0x9c>)
 8003fe8:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3340      	adds	r3, #64	; 0x40
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <network_configure_activations+0x9c>)
 8003ff0:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations_map[0] + 0);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <network_configure_activations+0xa0>)
 8003ff6:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <network_configure_activations+0xa0>)
 8003ffc:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations_map[0] + 704);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8004004:	4a14      	ldr	r2, [pc, #80]	; (8004058 <network_configure_activations+0xa4>)
 8004006:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations_map[0] + 704);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800400e:	4a12      	ldr	r2, [pc, #72]	; (8004058 <network_configure_activations+0xa4>)
 8004010:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a11      	ldr	r2, [pc, #68]	; (800405c <network_configure_activations+0xa8>)
 8004016:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a10      	ldr	r2, [pc, #64]	; (800405c <network_configure_activations+0xa8>)
 800401c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 256);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004024:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <network_configure_activations+0xac>)
 8004026:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800402e:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <network_configure_activations+0xac>)
 8004030:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <network_configure_activations+0xb0>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <network_configure_activations+0xb0>)
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]
    
    return true;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <network_configure_activations+0x90>
  }
  return false;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2000001c 	.word	0x2000001c
 8004050:	2000002c 	.word	0x2000002c
 8004054:	2000003c 	.word	0x2000003c
 8004058:	2000004c 	.word	0x2000004c
 800405c:	2000005c 	.word	0x2000005c
 8004060:	2000006c 	.word	0x2000006c
 8004064:	2000007c 	.word	0x2000007c

08004068 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f91a 	bl	80042b8 <ai_platform_get_weights_map>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8084 	beq.w	8004194 <network_configure_weights+0x12c>
    /* Updating weights with array addresses */
    
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 800408c:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <network_configure_weights+0x138>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004094:	4a42      	ldr	r2, [pc, #264]	; (80041a0 <network_configure_weights+0x138>)
 8004096:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a41      	ldr	r2, [pc, #260]	; (80041a0 <network_configure_weights+0x138>)
 800409c:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a3f      	ldr	r2, [pc, #252]	; (80041a0 <network_configure_weights+0x138>)
 80040a2:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 80040a4:	4b3f      	ldr	r3, [pc, #252]	; (80041a4 <network_configure_weights+0x13c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040ac:	4a3d      	ldr	r2, [pc, #244]	; (80041a4 <network_configure_weights+0x13c>)
 80040ae:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights_map[0] + 576);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80040b6:	4a3b      	ldr	r2, [pc, #236]	; (80041a4 <network_configure_weights+0x13c>)
 80040b8:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights_map[0] + 576);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80040c0:	4a38      	ldr	r2, [pc, #224]	; (80041a4 <network_configure_weights+0x13c>)
 80040c2:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80040c4:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <network_configure_weights+0x140>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040cc:	4a36      	ldr	r2, [pc, #216]	; (80041a8 <network_configure_weights+0x140>)
 80040ce:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights_map[0] + 640);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040d6:	4a34      	ldr	r2, [pc, #208]	; (80041a8 <network_configure_weights+0x140>)
 80040d8:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights_map[0] + 640);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040e0:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <network_configure_weights+0x140>)
 80040e2:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80040e4:	4b31      	ldr	r3, [pc, #196]	; (80041ac <network_configure_weights+0x144>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040ec:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <network_configure_weights+0x144>)
 80040ee:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights_map[0] + 2176);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 80040f6:	4a2d      	ldr	r2, [pc, #180]	; (80041ac <network_configure_weights+0x144>)
 80040f8:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights_map[0] + 2176);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8004100:	4a2a      	ldr	r2, [pc, #168]	; (80041ac <network_configure_weights+0x144>)
 8004102:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004104:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <network_configure_weights+0x148>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410c:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <network_configure_weights+0x148>)
 800410e:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights_map[0] + 2208);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8004116:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <network_configure_weights+0x148>)
 8004118:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 2208);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <network_configure_weights+0x148>)
 8004122:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004124:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <network_configure_weights+0x14c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800412c:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <network_configure_weights+0x14c>)
 800412e:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 47264);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8004136:	33a0      	adds	r3, #160	; 0xa0
 8004138:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <network_configure_weights+0x14c>)
 800413a:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 47264);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8004142:	33a0      	adds	r3, #160	; 0xa0
 8004144:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <network_configure_weights+0x14c>)
 8004146:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <network_configure_weights+0x150>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004150:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <network_configure_weights+0x150>)
 8004152:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 47520);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 800415a:	33a0      	adds	r3, #160	; 0xa0
 800415c:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <network_configure_weights+0x150>)
 800415e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 47520);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8004166:	33a0      	adds	r3, #160	; 0xa0
 8004168:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <network_configure_weights+0x150>)
 800416a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <network_configure_weights+0x154>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <network_configure_weights+0x154>)
 8004176:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 48288);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800417e:	33a0      	adds	r3, #160	; 0xa0
 8004180:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <network_configure_weights+0x154>)
 8004182:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 48288);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800418a:	33a0      	adds	r3, #160	; 0xa0
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <network_configure_weights+0x154>)
 800418e:	60d3      	str	r3, [r2, #12]
    return true;
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <network_configure_weights+0x12e>
  }
  return false;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	2000008c 	.word	0x2000008c
 80041a4:	2000009c 	.word	0x2000009c
 80041a8:	200000ac 	.word	0x200000ac
 80041ac:	200000bc 	.word	0x200000bc
 80041b0:	200000cc 	.word	0x200000cc
 80041b4:	200000dc 	.word	0x200000dc
 80041b8:	200000ec 	.word	0x200000ec
 80041bc:	200000fc 	.word	0x200000fc

080041c0 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8dd 	bl	8004388 <ai_platform_network_get_error>
 80041ce:	4603      	mov	r3, r0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af02      	add	r7, sp, #8
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80041e2:	2300      	movs	r3, #0
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	2304      	movs	r3, #4
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	2301      	movs	r3, #1
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <ai_network_create+0x28>)
 80041ee:	6839      	ldr	r1, [r7, #0]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f943 	bl	800447c <ai_platform_network_create>
 80041f6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	200007a4 	.word	0x200007a4

08004204 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800420e:	6839      	ldr	r1, [r7, #0]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa09 	bl	8004628 <ai_platform_network_init>
 8004216:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <ai_network_init+0x1e>
 800421e:	2300      	movs	r3, #0
 8004220:	e028      	b.n	8004274 <ai_network_init+0x70>

  ai_bool ok = true;
 8004222:	2301      	movs	r3, #1
 8004224:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff ff1d 	bl	8004068 <network_configure_weights>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	7afb      	ldrb	r3, [r7, #11]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff feb6 	bl	8003fb4 <network_configure_activations>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 faf6 	bl	800484c <ai_platform_network_post_init>
 8004260:	4603      	mov	r3, r0
 8004262:	461a      	mov	r2, r3
 8004264:	7afb      	ldrb	r3, [r7, #11]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004272:	7afb      	ldrb	r3, [r7, #11]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fb71 	bl	8004974 <ai_platform_network_process>
 8004292:	4603      	mov	r3, r0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);
 80042a0:	4b02      	ldr	r3, [pc, #8]	; (80042ac <ai_network_data_weights_get+0x10>)

}
 80042a2:	4618      	mov	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	08015710 	.word	0x08015710

080042b0 <_ai_platform_acquire_crc>:
 80042b0:	2001      	movs	r0, #1
 80042b2:	4770      	bx	lr

080042b4 <_ai_platform_release_crc>:
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop

080042b8 <ai_platform_get_weights_map>:
 80042b8:	b132      	cbz	r2, 80042c8 <ai_platform_get_weights_map+0x10>
 80042ba:	6912      	ldr	r2, [r2, #16]
 80042bc:	b122      	cbz	r2, 80042c8 <ai_platform_get_weights_map+0x10>
 80042be:	b110      	cbz	r0, 80042c6 <ai_platform_get_weights_map+0xe>
 80042c0:	b921      	cbnz	r1, 80042cc <ai_platform_get_weights_map+0x14>
 80042c2:	4608      	mov	r0, r1
 80042c4:	4770      	bx	lr
 80042c6:	4770      	bx	lr
 80042c8:	4610      	mov	r0, r2
 80042ca:	4770      	bx	lr
 80042cc:	b470      	push	{r4, r5, r6}
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <ai_platform_get_weights_map+0x64>)
 80042d0:	6815      	ldr	r5, [r2, #0]
 80042d2:	429d      	cmp	r5, r3
 80042d4:	d007      	beq.n	80042e6 <ai_platform_get_weights_map+0x2e>
 80042d6:	6002      	str	r2, [r0, #0]
 80042d8:	f1a1 0001 	sub.w	r0, r1, #1
 80042dc:	fab0 f080 	clz	r0, r0
 80042e0:	0940      	lsrs	r0, r0, #5
 80042e2:	bc70      	pop	{r4, r5, r6}
 80042e4:	4770      	bx	lr
 80042e6:	6854      	ldr	r4, [r2, #4]
 80042e8:	42ac      	cmp	r4, r5
 80042ea:	f102 0204 	add.w	r2, r2, #4
 80042ee:	d011      	beq.n	8004314 <ai_platform_get_weights_map+0x5c>
 80042f0:	1f03      	subs	r3, r0, #4
 80042f2:	4616      	mov	r6, r2
 80042f4:	2000      	movs	r0, #0
 80042f6:	e003      	b.n	8004300 <ai_platform_get_weights_map+0x48>
 80042f8:	f856 4f04 	ldr.w	r4, [r6, #4]!
 80042fc:	42ac      	cmp	r4, r5
 80042fe:	d009      	beq.n	8004314 <ai_platform_get_weights_map+0x5c>
 8004300:	3001      	adds	r0, #1
 8004302:	4281      	cmp	r1, r0
 8004304:	f843 4f04 	str.w	r4, [r3, #4]!
 8004308:	d1f6      	bne.n	80042f8 <ai_platform_get_weights_map+0x40>
 800430a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800430e:	4b03      	ldr	r3, [pc, #12]	; (800431c <ai_platform_get_weights_map+0x64>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <ai_platform_get_weights_map+0x60>
 8004314:	2000      	movs	r0, #0
 8004316:	e7e4      	b.n	80042e2 <ai_platform_get_weights_map+0x2a>
 8004318:	2001      	movs	r0, #1
 800431a:	e7e2      	b.n	80042e2 <ai_platform_get_weights_map+0x2a>
 800431c:	a1facade 	.word	0xa1facade

08004320 <ai_platform_get_activations_map>:
 8004320:	b132      	cbz	r2, 8004330 <ai_platform_get_activations_map+0x10>
 8004322:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004324:	b122      	cbz	r2, 8004330 <ai_platform_get_activations_map+0x10>
 8004326:	b110      	cbz	r0, 800432e <ai_platform_get_activations_map+0xe>
 8004328:	b921      	cbnz	r1, 8004334 <ai_platform_get_activations_map+0x14>
 800432a:	4608      	mov	r0, r1
 800432c:	4770      	bx	lr
 800432e:	4770      	bx	lr
 8004330:	4610      	mov	r0, r2
 8004332:	4770      	bx	lr
 8004334:	b470      	push	{r4, r5, r6}
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <ai_platform_get_activations_map+0x64>)
 8004338:	6815      	ldr	r5, [r2, #0]
 800433a:	429d      	cmp	r5, r3
 800433c:	d007      	beq.n	800434e <ai_platform_get_activations_map+0x2e>
 800433e:	6002      	str	r2, [r0, #0]
 8004340:	f1a1 0001 	sub.w	r0, r1, #1
 8004344:	fab0 f080 	clz	r0, r0
 8004348:	0940      	lsrs	r0, r0, #5
 800434a:	bc70      	pop	{r4, r5, r6}
 800434c:	4770      	bx	lr
 800434e:	6854      	ldr	r4, [r2, #4]
 8004350:	42ac      	cmp	r4, r5
 8004352:	f102 0204 	add.w	r2, r2, #4
 8004356:	d011      	beq.n	800437c <ai_platform_get_activations_map+0x5c>
 8004358:	1f03      	subs	r3, r0, #4
 800435a:	4616      	mov	r6, r2
 800435c:	2000      	movs	r0, #0
 800435e:	e003      	b.n	8004368 <ai_platform_get_activations_map+0x48>
 8004360:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8004364:	42ac      	cmp	r4, r5
 8004366:	d009      	beq.n	800437c <ai_platform_get_activations_map+0x5c>
 8004368:	3001      	adds	r0, #1
 800436a:	4281      	cmp	r1, r0
 800436c:	f843 4f04 	str.w	r4, [r3, #4]!
 8004370:	d1f6      	bne.n	8004360 <ai_platform_get_activations_map+0x40>
 8004372:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004376:	4b03      	ldr	r3, [pc, #12]	; (8004384 <ai_platform_get_activations_map+0x64>)
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <ai_platform_get_activations_map+0x60>
 800437c:	2000      	movs	r0, #0
 800437e:	e7e4      	b.n	800434a <ai_platform_get_activations_map+0x2a>
 8004380:	2001      	movs	r0, #1
 8004382:	e7e2      	b.n	800434a <ai_platform_get_activations_map+0x2a>
 8004384:	a1facade 	.word	0xa1facade

08004388 <ai_platform_network_get_error>:
 8004388:	b510      	push	{r4, lr}
 800438a:	b120      	cbz	r0, 8004396 <ai_platform_network_get_error+0xe>
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <ai_platform_network_get_error+0xd0>)
 800438e:	6802      	ldr	r2, [r0, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	4604      	mov	r4, r0
 8004394:	d02e      	beq.n	80043f4 <ai_platform_network_get_error+0x6c>
 8004396:	4a31      	ldr	r2, [pc, #196]	; (800445c <ai_platform_network_get_error+0xd4>)
 8004398:	6813      	ldr	r3, [r2, #0]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	f7ff ff86 	bl	80042b0 <_ai_platform_acquire_crc>
 80043a4:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <ai_platform_network_get_error+0xd8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b0:	d00d      	beq.n	80043ce <ai_platform_network_get_error+0x46>
 80043b2:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <ai_platform_network_get_error+0xdc>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	d1fc      	bne.n	80043b8 <ai_platform_network_get_error+0x30>
 80043be:	4b2a      	ldr	r3, [pc, #168]	; (8004468 <ai_platform_network_get_error+0xe0>)
 80043c0:	4a2a      	ldr	r2, [pc, #168]	; (800446c <ai_platform_network_get_error+0xe4>)
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <ai_platform_network_get_error+0xe8>)
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d00d      	beq.n	80043e8 <ai_platform_network_get_error+0x60>
 80043cc:	e7fe      	b.n	80043cc <ai_platform_network_get_error+0x44>
 80043ce:	4b29      	ldr	r3, [pc, #164]	; (8004474 <ai_platform_network_get_error+0xec>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	2a00      	cmp	r2, #0
 80043d8:	d1fc      	bne.n	80043d4 <ai_platform_network_get_error+0x4c>
 80043da:	4b27      	ldr	r3, [pc, #156]	; (8004478 <ai_platform_network_get_error+0xf0>)
 80043dc:	4a23      	ldr	r2, [pc, #140]	; (800446c <ai_platform_network_get_error+0xe4>)
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b23      	ldr	r3, [pc, #140]	; (8004470 <ai_platform_network_get_error+0xe8>)
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d104      	bne.n	80043f2 <ai_platform_network_get_error+0x6a>
 80043e8:	f7ff ff64 	bl	80042b4 <_ai_platform_release_crc>
 80043ec:	f241 0010 	movw	r0, #4112	; 0x1010
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	e7fe      	b.n	80043f2 <ai_platform_network_get_error+0x6a>
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <ai_platform_network_get_error+0xd4>)
 80043f6:	6813      	ldr	r3, [r2, #0]
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	f7ff ff57 	bl	80042b0 <_ai_platform_acquire_crc>
 8004402:	4b17      	ldr	r3, [pc, #92]	; (8004460 <ai_platform_network_get_error+0xd8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d00d      	beq.n	800442c <ai_platform_network_get_error+0xa4>
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <ai_platform_network_get_error+0xdc>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2a00      	cmp	r2, #0
 800441a:	d1fc      	bne.n	8004416 <ai_platform_network_get_error+0x8e>
 800441c:	4b12      	ldr	r3, [pc, #72]	; (8004468 <ai_platform_network_get_error+0xe0>)
 800441e:	4a13      	ldr	r2, [pc, #76]	; (800446c <ai_platform_network_get_error+0xe4>)
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <ai_platform_network_get_error+0xe8>)
 8004426:	429a      	cmp	r2, r3
 8004428:	d00e      	beq.n	8004448 <ai_platform_network_get_error+0xc0>
 800442a:	e7fe      	b.n	800442a <ai_platform_network_get_error+0xa2>
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <ai_platform_network_get_error+0xec>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2a00      	cmp	r2, #0
 8004436:	d1fc      	bne.n	8004432 <ai_platform_network_get_error+0xaa>
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <ai_platform_network_get_error+0xf0>)
 800443a:	4a0c      	ldr	r2, [pc, #48]	; (800446c <ai_platform_network_get_error+0xe4>)
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <ai_platform_network_get_error+0xe8>)
 8004442:	429a      	cmp	r2, r3
 8004444:	d000      	beq.n	8004448 <ai_platform_network_get_error+0xc0>
 8004446:	e7fe      	b.n	8004446 <ai_platform_network_get_error+0xbe>
 8004448:	f7ff ff34 	bl	80042b4 <_ai_platform_release_crc>
 800444c:	f104 0010 	add.w	r0, r4, #16
 8004450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004454:	f000 bd0e 	b.w	8004e74 <core_get_error>
 8004458:	a1c00100 	.word	0xa1c00100
 800445c:	e0002000 	.word	0xe0002000
 8004460:	e0042000 	.word	0xe0042000
 8004464:	58024c08 	.word	0x58024c08
 8004468:	58024c00 	.word	0x58024c00
 800446c:	f407a5c2 	.word	0xf407a5c2
 8004470:	b5e8b5cd 	.word	0xb5e8b5cd
 8004474:	40023008 	.word	0x40023008
 8004478:	40023000 	.word	0x40023000

0800447c <ai_platform_network_create>:
 800447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	4607      	mov	r7, r0
 8004484:	4616      	mov	r6, r2
 8004486:	461d      	mov	r5, r3
 8004488:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800448c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8004490:	f7ff ff0e 	bl	80042b0 <_ai_platform_acquire_crc>
 8004494:	b178      	cbz	r0, 80044b6 <ai_platform_network_create+0x3a>
 8004496:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <ai_platform_network_create+0x184>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a2:	4602      	mov	r2, r0
 80044a4:	d00c      	beq.n	80044c0 <ai_platform_network_create+0x44>
 80044a6:	4b57      	ldr	r3, [pc, #348]	; (8004604 <ai_platform_network_create+0x188>)
 80044a8:	2118      	movs	r1, #24
 80044aa:	6019      	str	r1, [r3, #0]
 80044ac:	6819      	ldr	r1, [r3, #0]
 80044ae:	2918      	cmp	r1, #24
 80044b0:	d034      	beq.n	800451c <ai_platform_network_create+0xa0>
 80044b2:	f7ff feff 	bl	80042b4 <_ai_platform_release_crc>
 80044b6:	f241 0033 	movw	r0, #4147	; 0x1033
 80044ba:	b002      	add	sp, #8
 80044bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c0:	4b51      	ldr	r3, [pc, #324]	; (8004608 <ai_platform_network_create+0x18c>)
 80044c2:	2101      	movs	r1, #1
 80044c4:	6019      	str	r1, [r3, #0]
 80044c6:	2114      	movs	r1, #20
 80044c8:	e001      	b.n	80044ce <ai_platform_network_create+0x52>
 80044ca:	3901      	subs	r1, #1
 80044cc:	d002      	beq.n	80044d4 <ai_platform_network_create+0x58>
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d1fa      	bne.n	80044ca <ai_platform_network_create+0x4e>
 80044d4:	4b4c      	ldr	r3, [pc, #304]	; (8004608 <ai_platform_network_create+0x18c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	b9f3      	cbnz	r3, 8004518 <ai_platform_network_create+0x9c>
 80044da:	4610      	mov	r0, r2
 80044dc:	f7ff feea 	bl	80042b4 <_ai_platform_release_crc>
 80044e0:	4a4a      	ldr	r2, [pc, #296]	; (800460c <ai_platform_network_create+0x190>)
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	f7ff fee1 	bl	80042b0 <_ai_platform_acquire_crc>
 80044ee:	4b44      	ldr	r3, [pc, #272]	; (8004600 <ai_platform_network_create+0x184>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fa:	d015      	beq.n	8004528 <ai_platform_network_create+0xac>
 80044fc:	4b41      	ldr	r3, [pc, #260]	; (8004604 <ai_platform_network_create+0x188>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2a00      	cmp	r2, #0
 8004506:	d1fc      	bne.n	8004502 <ai_platform_network_create+0x86>
 8004508:	4b41      	ldr	r3, [pc, #260]	; (8004610 <ai_platform_network_create+0x194>)
 800450a:	4a42      	ldr	r2, [pc, #264]	; (8004614 <ai_platform_network_create+0x198>)
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <ai_platform_network_create+0x19c>)
 8004512:	429a      	cmp	r2, r3
 8004514:	d016      	beq.n	8004544 <ai_platform_network_create+0xc8>
 8004516:	e7fe      	b.n	8004516 <ai_platform_network_create+0x9a>
 8004518:	4610      	mov	r0, r2
 800451a:	e7ca      	b.n	80044b2 <ai_platform_network_create+0x36>
 800451c:	2101      	movs	r1, #1
 800451e:	6019      	str	r1, [r3, #0]
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	2900      	cmp	r1, #0
 8004524:	d1fc      	bne.n	8004520 <ai_platform_network_create+0xa4>
 8004526:	e7d8      	b.n	80044da <ai_platform_network_create+0x5e>
 8004528:	4b37      	ldr	r3, [pc, #220]	; (8004608 <ai_platform_network_create+0x18c>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	2a00      	cmp	r2, #0
 8004532:	d1fc      	bne.n	800452e <ai_platform_network_create+0xb2>
 8004534:	4b39      	ldr	r3, [pc, #228]	; (800461c <ai_platform_network_create+0x1a0>)
 8004536:	4a37      	ldr	r2, [pc, #220]	; (8004614 <ai_platform_network_create+0x198>)
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <ai_platform_network_create+0x19c>)
 800453e:	429a      	cmp	r2, r3
 8004540:	d000      	beq.n	8004544 <ai_platform_network_create+0xc8>
 8004542:	e7fe      	b.n	8004542 <ai_platform_network_create+0xc6>
 8004544:	f7ff feb6 	bl	80042b4 <_ai_platform_release_crc>
 8004548:	b1af      	cbz	r7, 8004576 <ai_platform_network_create+0xfa>
 800454a:	4b35      	ldr	r3, [pc, #212]	; (8004620 <ai_platform_network_create+0x1a4>)
 800454c:	6033      	str	r3, [r6, #0]
 800454e:	603e      	str	r6, [r7, #0]
 8004550:	f000 fc8e 	bl	8004e70 <core_init>
 8004554:	b990      	cbnz	r0, 800457c <ai_platform_network_create+0x100>
 8004556:	062d      	lsls	r5, r5, #24
 8004558:	0424      	lsls	r4, r4, #16
 800455a:	2230      	movs	r2, #48	; 0x30
 800455c:	2300      	movs	r3, #0
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	2110      	movs	r1, #16
 8004562:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 8004566:	2000      	movs	r0, #0
 8004568:	432b      	orrs	r3, r5
 800456a:	f362 0007 	bfi	r0, r2, #0, #8
 800456e:	6473      	str	r3, [r6, #68]	; 0x44
 8004570:	f361 201f 	bfi	r0, r1, #8, #24
 8004574:	e7a1      	b.n	80044ba <ai_platform_network_create+0x3e>
 8004576:	f241 0010 	movw	r0, #4112	; 0x1010
 800457a:	e79e      	b.n	80044ba <ai_platform_network_create+0x3e>
 800457c:	4a23      	ldr	r2, [pc, #140]	; (800460c <ai_platform_network_create+0x190>)
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	f7ff fe93 	bl	80042b0 <_ai_platform_acquire_crc>
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <ai_platform_network_create+0x184>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004596:	d00d      	beq.n	80045b4 <ai_platform_network_create+0x138>
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <ai_platform_network_create+0x188>)
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2a00      	cmp	r2, #0
 80045a2:	d1fc      	bne.n	800459e <ai_platform_network_create+0x122>
 80045a4:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <ai_platform_network_create+0x194>)
 80045a6:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <ai_platform_network_create+0x198>)
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <ai_platform_network_create+0x19c>)
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d00e      	beq.n	80045d0 <ai_platform_network_create+0x154>
 80045b2:	e7fe      	b.n	80045b2 <ai_platform_network_create+0x136>
 80045b4:	4b14      	ldr	r3, [pc, #80]	; (8004608 <ai_platform_network_create+0x18c>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2a00      	cmp	r2, #0
 80045be:	d1fc      	bne.n	80045ba <ai_platform_network_create+0x13e>
 80045c0:	4b16      	ldr	r3, [pc, #88]	; (800461c <ai_platform_network_create+0x1a0>)
 80045c2:	4a14      	ldr	r2, [pc, #80]	; (8004614 <ai_platform_network_create+0x198>)
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <ai_platform_network_create+0x19c>)
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d000      	beq.n	80045d0 <ai_platform_network_create+0x154>
 80045ce:	e7fe      	b.n	80045ce <ai_platform_network_create+0x152>
 80045d0:	062d      	lsls	r5, r5, #24
 80045d2:	0424      	lsls	r4, r4, #16
 80045d4:	f7ff fe6e 	bl	80042b4 <_ai_platform_release_crc>
 80045d8:	ea45 0304 	orr.w	r3, r5, r4
 80045dc:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80045e0:	d001      	beq.n	80045e6 <ai_platform_network_create+0x16a>
 80045e2:	2201      	movs	r2, #1
 80045e4:	e7ba      	b.n	800455c <ai_platform_network_create+0xe0>
 80045e6:	a802      	add	r0, sp, #8
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <ai_platform_network_create+0x1a8>)
 80045ea:	f840 3d04 	str.w	r3, [r0, #-4]!
 80045ee:	f002 fa25 	bl	8006a3c <ai_check_custom_types>
 80045f2:	b110      	cbz	r0, 80045fa <ai_platform_network_create+0x17e>
 80045f4:	2100      	movs	r1, #0
 80045f6:	460a      	mov	r2, r1
 80045f8:	e7b3      	b.n	8004562 <ai_platform_network_create+0xe6>
 80045fa:	2202      	movs	r2, #2
 80045fc:	e7ae      	b.n	800455c <ai_platform_network_create+0xe0>
 80045fe:	bf00      	nop
 8004600:	e0042000 	.word	0xe0042000
 8004604:	58024c08 	.word	0x58024c08
 8004608:	40023008 	.word	0x40023008
 800460c:	e0002000 	.word	0xe0002000
 8004610:	58024c00 	.word	0x58024c00
 8004614:	f407a5c2 	.word	0xf407a5c2
 8004618:	b5e8b5cd 	.word	0xb5e8b5cd
 800461c:	40023000 	.word	0x40023000
 8004620:	a1c00100 	.word	0xa1c00100
 8004624:	84048403 	.word	0x84048403

08004628 <ai_platform_network_init>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	2800      	cmp	r0, #0
 800462e:	d04d      	beq.n	80046cc <ai_platform_network_init+0xa4>
 8004630:	4b7c      	ldr	r3, [pc, #496]	; (8004824 <ai_platform_network_init+0x1fc>)
 8004632:	6802      	ldr	r2, [r0, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	4604      	mov	r4, r0
 8004638:	d148      	bne.n	80046cc <ai_platform_network_init+0xa4>
 800463a:	4a7b      	ldr	r2, [pc, #492]	; (8004828 <ai_platform_network_init+0x200>)
 800463c:	6813      	ldr	r3, [r2, #0]
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	460d      	mov	r5, r1
 8004646:	f7ff fe33 	bl	80042b0 <_ai_platform_acquire_crc>
 800464a:	4b78      	ldr	r3, [pc, #480]	; (800482c <ai_platform_network_init+0x204>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004656:	d00d      	beq.n	8004674 <ai_platform_network_init+0x4c>
 8004658:	4b75      	ldr	r3, [pc, #468]	; (8004830 <ai_platform_network_init+0x208>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	2a00      	cmp	r2, #0
 8004662:	d1fc      	bne.n	800465e <ai_platform_network_init+0x36>
 8004664:	4b73      	ldr	r3, [pc, #460]	; (8004834 <ai_platform_network_init+0x20c>)
 8004666:	4a74      	ldr	r2, [pc, #464]	; (8004838 <ai_platform_network_init+0x210>)
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b73      	ldr	r3, [pc, #460]	; (800483c <ai_platform_network_init+0x214>)
 800466e:	429a      	cmp	r2, r3
 8004670:	d00d      	beq.n	800468e <ai_platform_network_init+0x66>
 8004672:	e7fe      	b.n	8004672 <ai_platform_network_init+0x4a>
 8004674:	4b72      	ldr	r3, [pc, #456]	; (8004840 <ai_platform_network_init+0x218>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	2a00      	cmp	r2, #0
 800467e:	d1fc      	bne.n	800467a <ai_platform_network_init+0x52>
 8004680:	4b70      	ldr	r3, [pc, #448]	; (8004844 <ai_platform_network_init+0x21c>)
 8004682:	4a6d      	ldr	r2, [pc, #436]	; (8004838 <ai_platform_network_init+0x210>)
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b6c      	ldr	r3, [pc, #432]	; (800483c <ai_platform_network_init+0x214>)
 800468a:	429a      	cmp	r2, r3
 800468c:	d11d      	bne.n	80046ca <ai_platform_network_init+0xa2>
 800468e:	f7ff fe11 	bl	80042b4 <_ai_platform_release_crc>
 8004692:	2d00      	cmp	r5, #0
 8004694:	d076      	beq.n	8004784 <ai_platform_network_init+0x15c>
 8004696:	4b6c      	ldr	r3, [pc, #432]	; (8004848 <ai_platform_network_init+0x220>)
 8004698:	682a      	ldr	r2, [r5, #0]
 800469a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d030      	beq.n	8004704 <ai_platform_network_init+0xdc>
 80046a2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80046a4:	46a9      	mov	r9, r5
 80046a6:	f105 0118 	add.w	r1, r5, #24
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	f000 8095 	beq.w	80047da <ai_platform_network_init+0x1b2>
 80046b0:	f1bc 0f00 	cmp.w	ip, #0
 80046b4:	f000 80a4 	beq.w	8004800 <ai_platform_network_init+0x1d8>
 80046b8:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 80046bc:	f1b8 0f01 	cmp.w	r8, #1
 80046c0:	d16a      	bne.n	8004798 <ai_platform_network_init+0x170>
 80046c2:	2700      	movs	r7, #0
 80046c4:	468c      	mov	ip, r1
 80046c6:	83a7      	strh	r7, [r4, #28]
 80046c8:	e028      	b.n	800471c <ai_platform_network_init+0xf4>
 80046ca:	e7fe      	b.n	80046ca <ai_platform_network_init+0xa2>
 80046cc:	4a56      	ldr	r2, [pc, #344]	; (8004828 <ai_platform_network_init+0x200>)
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	f7ff fdeb 	bl	80042b0 <_ai_platform_acquire_crc>
 80046da:	4b54      	ldr	r3, [pc, #336]	; (800482c <ai_platform_network_init+0x204>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d067      	beq.n	80047b8 <ai_platform_network_init+0x190>
 80046e8:	4b51      	ldr	r3, [pc, #324]	; (8004830 <ai_platform_network_init+0x208>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2a00      	cmp	r2, #0
 80046f2:	d1fc      	bne.n	80046ee <ai_platform_network_init+0xc6>
 80046f4:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <ai_platform_network_init+0x20c>)
 80046f6:	4a50      	ldr	r2, [pc, #320]	; (8004838 <ai_platform_network_init+0x210>)
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b4f      	ldr	r3, [pc, #316]	; (800483c <ai_platform_network_init+0x214>)
 80046fe:	429a      	cmp	r2, r3
 8004700:	d067      	beq.n	80047d2 <ai_platform_network_init+0x1aa>
 8004702:	e7fe      	b.n	8004702 <ai_platform_network_init+0xda>
 8004704:	8be1      	ldrh	r1, [r4, #30]
 8004706:	88eb      	ldrh	r3, [r5, #6]
 8004708:	89af      	ldrh	r7, [r5, #12]
 800470a:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800470e:	88aa      	ldrh	r2, [r5, #4]
 8004710:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8004714:	428b      	cmp	r3, r1
 8004716:	d13f      	bne.n	8004798 <ai_platform_network_init+0x170>
 8004718:	83a2      	strh	r2, [r4, #28]
 800471a:	b19b      	cbz	r3, 8004744 <ai_platform_network_init+0x11c>
 800471c:	f04f 0e00 	mov.w	lr, #0
 8004720:	46f2      	mov	sl, lr
 8004722:	eb09 060e 	add.w	r6, r9, lr
 8004726:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004728:	6a25      	ldr	r5, [r4, #32]
 800472a:	4475      	add	r5, lr
 800472c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800472e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8004732:	e885 0003 	stmia.w	r5, {r0, r1}
 8004736:	8be3      	ldrh	r3, [r4, #30]
 8004738:	f10a 0a01 	add.w	sl, sl, #1
 800473c:	459a      	cmp	sl, r3
 800473e:	f10e 0e18 	add.w	lr, lr, #24
 8004742:	d3ee      	bcc.n	8004722 <ai_platform_network_init+0xfa>
 8004744:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004746:	4598      	cmp	r8, r3
 8004748:	d12e      	bne.n	80047a8 <ai_platform_network_init+0x180>
 800474a:	84a7      	strh	r7, [r4, #36]	; 0x24
 800474c:	f1b8 0f00 	cmp.w	r8, #0
 8004750:	d012      	beq.n	8004778 <ai_platform_network_init+0x150>
 8004752:	2700      	movs	r7, #0
 8004754:	46be      	mov	lr, r7
 8004756:	eb0c 0607 	add.w	r6, ip, r7
 800475a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800475c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800475e:	443d      	add	r5, r7
 8004760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004762:	e896 0003 	ldmia.w	r6, {r0, r1}
 8004766:	e885 0003 	stmia.w	r5, {r0, r1}
 800476a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800476c:	f10e 0e01 	add.w	lr, lr, #1
 8004770:	459e      	cmp	lr, r3
 8004772:	f107 0718 	add.w	r7, r7, #24
 8004776:	d3ee      	bcc.n	8004756 <ai_platform_network_init+0x12e>
 8004778:	2303      	movs	r3, #3
 800477a:	60e3      	str	r3, [r4, #12]
 800477c:	4620      	mov	r0, r4
 800477e:	f002 f987 	bl	8006a90 <ai_layers_init_all>
 8004782:	e006      	b.n	8004792 <ai_platform_network_init+0x16a>
 8004784:	f104 0010 	add.w	r0, r4, #16
 8004788:	2211      	movs	r2, #17
 800478a:	2110      	movs	r1, #16
 800478c:	462c      	mov	r4, r5
 800478e:	f000 fb77 	bl	8004e80 <core_set_error>
 8004792:	4620      	mov	r0, r4
 8004794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004798:	f104 0010 	add.w	r0, r4, #16
 800479c:	2212      	movs	r2, #18
 800479e:	2116      	movs	r1, #22
 80047a0:	f000 fb6e 	bl	8004e80 <core_set_error>
 80047a4:	2400      	movs	r4, #0
 80047a6:	e7f4      	b.n	8004792 <ai_platform_network_init+0x16a>
 80047a8:	f104 0010 	add.w	r0, r4, #16
 80047ac:	2213      	movs	r2, #19
 80047ae:	2116      	movs	r1, #22
 80047b0:	f000 fb66 	bl	8004e80 <core_set_error>
 80047b4:	2400      	movs	r4, #0
 80047b6:	e7ec      	b.n	8004792 <ai_platform_network_init+0x16a>
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <ai_platform_network_init+0x218>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	d1fc      	bne.n	80047be <ai_platform_network_init+0x196>
 80047c4:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <ai_platform_network_init+0x21c>)
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <ai_platform_network_init+0x210>)
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b1b      	ldr	r3, [pc, #108]	; (800483c <ai_platform_network_init+0x214>)
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d115      	bne.n	80047fe <ai_platform_network_init+0x1d6>
 80047d2:	f7ff fd6f 	bl	80042b4 <_ai_platform_release_crc>
 80047d6:	2400      	movs	r4, #0
 80047d8:	e7db      	b.n	8004792 <ai_platform_network_init+0x16a>
 80047da:	8c28      	ldrh	r0, [r5, #32]
 80047dc:	8bea      	ldrh	r2, [r5, #30]
 80047de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047e0:	fb02 f200 	mul.w	r2, r2, r0
 80047e4:	fb03 f302 	mul.w	r3, r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f43f af61 	beq.w	80046b0 <ai_platform_network_init+0x88>
 80047ee:	f104 0010 	add.w	r0, r4, #16
 80047f2:	2213      	movs	r2, #19
 80047f4:	2110      	movs	r1, #16
 80047f6:	4634      	mov	r4, r6
 80047f8:	f000 fb42 	bl	8004e80 <core_set_error>
 80047fc:	e7c9      	b.n	8004792 <ai_platform_network_init+0x16a>
 80047fe:	e7fe      	b.n	80047fe <ai_platform_network_init+0x1d6>
 8004800:	8928      	ldrh	r0, [r5, #8]
 8004802:	88ea      	ldrh	r2, [r5, #6]
 8004804:	68eb      	ldr	r3, [r5, #12]
 8004806:	fb02 f200 	mul.w	r2, r2, r0
 800480a:	fb03 f302 	mul.w	r3, r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	f43f af52 	beq.w	80046b8 <ai_platform_network_init+0x90>
 8004814:	f104 0010 	add.w	r0, r4, #16
 8004818:	2212      	movs	r2, #18
 800481a:	2110      	movs	r1, #16
 800481c:	4664      	mov	r4, ip
 800481e:	f000 fb2f 	bl	8004e80 <core_set_error>
 8004822:	e7b6      	b.n	8004792 <ai_platform_network_init+0x16a>
 8004824:	a1c00100 	.word	0xa1c00100
 8004828:	e0002000 	.word	0xe0002000
 800482c:	e0042000 	.word	0xe0042000
 8004830:	58024c08 	.word	0x58024c08
 8004834:	58024c00 	.word	0x58024c00
 8004838:	f407a5c2 	.word	0xf407a5c2
 800483c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004840:	40023008 	.word	0x40023008
 8004844:	40023000 	.word	0x40023000
 8004848:	a1facade 	.word	0xa1facade

0800484c <ai_platform_network_post_init>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	b120      	cbz	r0, 800485a <ai_platform_network_post_init+0xe>
 8004850:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <ai_platform_network_post_init+0x104>)
 8004852:	6802      	ldr	r2, [r0, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	4604      	mov	r4, r0
 8004858:	d02d      	beq.n	80048b6 <ai_platform_network_post_init+0x6a>
 800485a:	4a3e      	ldr	r2, [pc, #248]	; (8004954 <ai_platform_network_post_init+0x108>)
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	f7ff fd24 	bl	80042b0 <_ai_platform_acquire_crc>
 8004868:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <ai_platform_network_post_init+0x10c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d00d      	beq.n	8004892 <ai_platform_network_post_init+0x46>
 8004876:	4b39      	ldr	r3, [pc, #228]	; (800495c <ai_platform_network_post_init+0x110>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2a00      	cmp	r2, #0
 8004880:	d1fc      	bne.n	800487c <ai_platform_network_post_init+0x30>
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <ai_platform_network_post_init+0x114>)
 8004884:	4a37      	ldr	r2, [pc, #220]	; (8004964 <ai_platform_network_post_init+0x118>)
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <ai_platform_network_post_init+0x11c>)
 800488c:	429a      	cmp	r2, r3
 800488e:	d00d      	beq.n	80048ac <ai_platform_network_post_init+0x60>
 8004890:	e7fe      	b.n	8004890 <ai_platform_network_post_init+0x44>
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <ai_platform_network_post_init+0x120>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2a00      	cmp	r2, #0
 800489c:	d1fc      	bne.n	8004898 <ai_platform_network_post_init+0x4c>
 800489e:	4b34      	ldr	r3, [pc, #208]	; (8004970 <ai_platform_network_post_init+0x124>)
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <ai_platform_network_post_init+0x118>)
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <ai_platform_network_post_init+0x11c>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d103      	bne.n	80048b4 <ai_platform_network_post_init+0x68>
 80048ac:	f7ff fd02 	bl	80042b4 <_ai_platform_release_crc>
 80048b0:	2000      	movs	r0, #0
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	e7fe      	b.n	80048b4 <ai_platform_network_post_init+0x68>
 80048b6:	4a27      	ldr	r2, [pc, #156]	; (8004954 <ai_platform_network_post_init+0x108>)
 80048b8:	6813      	ldr	r3, [r2, #0]
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	f7ff fcf6 	bl	80042b0 <_ai_platform_acquire_crc>
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <ai_platform_network_post_init+0x10c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d0:	d00d      	beq.n	80048ee <ai_platform_network_post_init+0xa2>
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <ai_platform_network_post_init+0x110>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	2a00      	cmp	r2, #0
 80048dc:	d1fc      	bne.n	80048d8 <ai_platform_network_post_init+0x8c>
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <ai_platform_network_post_init+0x114>)
 80048e0:	4a20      	ldr	r2, [pc, #128]	; (8004964 <ai_platform_network_post_init+0x118>)
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <ai_platform_network_post_init+0x11c>)
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d00e      	beq.n	800490a <ai_platform_network_post_init+0xbe>
 80048ec:	e7fe      	b.n	80048ec <ai_platform_network_post_init+0xa0>
 80048ee:	4b1f      	ldr	r3, [pc, #124]	; (800496c <ai_platform_network_post_init+0x120>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	2a00      	cmp	r2, #0
 80048f8:	d1fc      	bne.n	80048f4 <ai_platform_network_post_init+0xa8>
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <ai_platform_network_post_init+0x124>)
 80048fc:	4a19      	ldr	r2, [pc, #100]	; (8004964 <ai_platform_network_post_init+0x118>)
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b19      	ldr	r3, [pc, #100]	; (8004968 <ai_platform_network_post_init+0x11c>)
 8004904:	429a      	cmp	r2, r3
 8004906:	d000      	beq.n	800490a <ai_platform_network_post_init+0xbe>
 8004908:	e7fe      	b.n	8004908 <ai_platform_network_post_init+0xbc>
 800490a:	f7ff fcd3 	bl	80042b4 <_ai_platform_release_crc>
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	f013 0502 	ands.w	r5, r3, #2
 8004914:	d011      	beq.n	800493a <ai_platform_network_post_init+0xee>
 8004916:	4620      	mov	r0, r4
 8004918:	f002 f8ce 	bl	8006ab8 <ai_layers_post_init_all>
 800491c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800491e:	b1a3      	cbz	r3, 800494a <ai_platform_network_post_init+0xfe>
 8004920:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004922:	b195      	cbz	r5, 800494a <ai_platform_network_post_init+0xfe>
 8004924:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004926:	4629      	mov	r1, r5
 8004928:	2000      	movs	r0, #0
 800492a:	4798      	blx	r3
 800492c:	692b      	ldr	r3, [r5, #16]
 800492e:	42ab      	cmp	r3, r5
 8004930:	d00b      	beq.n	800494a <ai_platform_network_post_init+0xfe>
 8004932:	461d      	mov	r5, r3
 8004934:	b14b      	cbz	r3, 800494a <ai_platform_network_post_init+0xfe>
 8004936:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004938:	e7f4      	b.n	8004924 <ai_platform_network_post_init+0xd8>
 800493a:	f104 0010 	add.w	r0, r4, #16
 800493e:	2210      	movs	r2, #16
 8004940:	2111      	movs	r1, #17
 8004942:	f000 fa9d 	bl	8004e80 <core_set_error>
 8004946:	4628      	mov	r0, r5
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	2001      	movs	r0, #1
 800494c:	bd38      	pop	{r3, r4, r5, pc}
 800494e:	bf00      	nop
 8004950:	a1c00100 	.word	0xa1c00100
 8004954:	e0002000 	.word	0xe0002000
 8004958:	e0042000 	.word	0xe0042000
 800495c:	58024c08 	.word	0x58024c08
 8004960:	58024c00 	.word	0x58024c00
 8004964:	f407a5c2 	.word	0xf407a5c2
 8004968:	b5e8b5cd 	.word	0xb5e8b5cd
 800496c:	40023008 	.word	0x40023008
 8004970:	40023000 	.word	0x40023000

08004974 <ai_platform_network_process>:
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	b085      	sub	sp, #20
 800497a:	460d      	mov	r5, r1
 800497c:	9202      	str	r2, [sp, #8]
 800497e:	4604      	mov	r4, r0
 8004980:	b120      	cbz	r0, 800498c <ai_platform_network_process+0x18>
 8004982:	4b7b      	ldr	r3, [pc, #492]	; (8004b70 <ai_platform_network_process+0x1fc>)
 8004984:	6802      	ldr	r2, [r0, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	bf18      	it	ne
 800498a:	2400      	movne	r4, #0
 800498c:	4a79      	ldr	r2, [pc, #484]	; (8004b74 <ai_platform_network_process+0x200>)
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	f7ff fc8b 	bl	80042b0 <_ai_platform_acquire_crc>
 800499a:	4b77      	ldr	r3, [pc, #476]	; (8004b78 <ai_platform_network_process+0x204>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a6:	d00d      	beq.n	80049c4 <ai_platform_network_process+0x50>
 80049a8:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <ai_platform_network_process+0x208>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2a00      	cmp	r2, #0
 80049b2:	d1fc      	bne.n	80049ae <ai_platform_network_process+0x3a>
 80049b4:	4b72      	ldr	r3, [pc, #456]	; (8004b80 <ai_platform_network_process+0x20c>)
 80049b6:	4a73      	ldr	r2, [pc, #460]	; (8004b84 <ai_platform_network_process+0x210>)
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b72      	ldr	r3, [pc, #456]	; (8004b88 <ai_platform_network_process+0x214>)
 80049be:	429a      	cmp	r2, r3
 80049c0:	d00e      	beq.n	80049e0 <ai_platform_network_process+0x6c>
 80049c2:	e7fe      	b.n	80049c2 <ai_platform_network_process+0x4e>
 80049c4:	4b71      	ldr	r3, [pc, #452]	; (8004b8c <ai_platform_network_process+0x218>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	d1fc      	bne.n	80049ca <ai_platform_network_process+0x56>
 80049d0:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <ai_platform_network_process+0x21c>)
 80049d2:	4a6c      	ldr	r2, [pc, #432]	; (8004b84 <ai_platform_network_process+0x210>)
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4b6b      	ldr	r3, [pc, #428]	; (8004b88 <ai_platform_network_process+0x214>)
 80049da:	429a      	cmp	r2, r3
 80049dc:	d000      	beq.n	80049e0 <ai_platform_network_process+0x6c>
 80049de:	e7fe      	b.n	80049de <ai_platform_network_process+0x6a>
 80049e0:	f7ff fc68 	bl	80042b4 <_ai_platform_release_crc>
 80049e4:	2c00      	cmp	r4, #0
 80049e6:	f000 808e 	beq.w	8004b06 <ai_platform_network_process+0x192>
 80049ea:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	f040 823c 	bne.w	8004e6a <ai_platform_network_process+0x4f6>
 80049f2:	68e3      	ldr	r3, [r4, #12]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	f04f 0b00 	mov.w	fp, #0
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	f8c4 b014 	str.w	fp, [r4, #20]
 8004a02:	f040 822b 	bne.w	8004e5c <ai_platform_network_process+0x4e8>
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	f000 80a8 	beq.w	8004b5c <ai_platform_network_process+0x1e8>
 8004a0c:	2f00      	cmp	r7, #0
 8004a0e:	f000 80a5 	beq.w	8004b5c <ai_platform_network_process+0x1e8>
 8004a12:	883b      	ldrh	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80a1 	beq.w	8004b5c <ai_platform_network_process+0x1e8>
 8004a1a:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8004a1e:	9401      	str	r4, [sp, #4]
 8004a20:	46d8      	mov	r8, fp
 8004a22:	4598      	cmp	r8, r3
 8004a24:	f080 80b6 	bcs.w	8004b94 <ai_platform_network_process+0x220>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80b2 	beq.w	8004b94 <ai_platform_network_process+0x220>
 8004a30:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8004a34:	2e00      	cmp	r6, #0
 8004a36:	f000 80ad 	beq.w	8004b94 <ai_platform_network_process+0x220>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	9303      	str	r3, [sp, #12]
 8004a40:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8004a44:	eb13 0a04 	adds.w	sl, r3, r4
 8004a48:	f000 8087 	beq.w	8004b5a <ai_platform_network_process+0x1e6>
 8004a4c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8004a50:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8004a54:	69b0      	ldr	r0, [r6, #24]
 8004a56:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004a5a:	6841      	ldr	r1, [r0, #4]
 8004a5c:	fb0b f30e 	mul.w	r3, fp, lr
 8004a60:	fb0c f303 	mul.w	r3, ip, r3
 8004a64:	4299      	cmp	r1, r3
 8004a66:	d36e      	bcc.n	8004b46 <ai_platform_network_process+0x1d2>
 8004a68:	68f3      	ldr	r3, [r6, #12]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	455a      	cmp	r2, fp
 8004a6e:	d16a      	bne.n	8004b46 <ai_platform_network_process+0x1d2>
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	4572      	cmp	r2, lr
 8004a74:	d167      	bne.n	8004b46 <ai_platform_network_process+0x1d2>
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	459c      	cmp	ip, r3
 8004a7a:	d164      	bne.n	8004b46 <ai_platform_network_process+0x1d2>
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f002 f8d9 	bl	8006c34 <ai_array_get_byte_size>
 8004a82:	68f2      	ldr	r2, [r6, #12]
 8004a84:	6973      	ldr	r3, [r6, #20]
 8004a86:	68d2      	ldr	r2, [r2, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	fb03 f302 	mul.w	r3, r3, r2
 8004a8e:	4298      	cmp	r0, r3
 8004a90:	d359      	bcc.n	8004b46 <ai_platform_network_process+0x1d2>
 8004a92:	69b3      	ldr	r3, [r6, #24]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	f002 f875 	bl	8006b84 <ai_array_to_buffer_fmt>
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	4043      	eors	r3, r0
 8004a9e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004aa2:	d146      	bne.n	8004b32 <ai_platform_network_process+0x1be>
 8004aa4:	692b      	ldr	r3, [r5, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d03a      	beq.n	8004b20 <ai_platform_network_process+0x1ac>
 8004aaa:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8004aae:	f1bb 0f00 	cmp.w	fp, #0
 8004ab2:	d02d      	beq.n	8004b10 <ai_platform_network_process+0x19c>
 8004ab4:	68f2      	ldr	r2, [r6, #12]
 8004ab6:	6973      	ldr	r3, [r6, #20]
 8004ab8:	68d1      	ldr	r1, [r2, #12]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	fb02 f201 	mul.w	r2, r2, r1
 8004ac0:	f8ca 2008 	str.w	r2, [sl, #8]
 8004ac4:	88ab      	ldrh	r3, [r5, #4]
 8004ac6:	fb02 f203 	mul.w	r2, r2, r3
 8004aca:	f8ca 200c 	str.w	r2, [sl, #12]
 8004ace:	6929      	ldr	r1, [r5, #16]
 8004ad0:	f8ca 1004 	str.w	r1, [sl, #4]
 8004ad4:	692b      	ldr	r3, [r5, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	9a03      	ldr	r2, [sp, #12]
 8004ada:	5113      	str	r3, [r2, r4]
 8004adc:	69b0      	ldr	r0, [r6, #24]
 8004ade:	6803      	ldr	r3, [r0, #0]
 8004ae0:	45d9      	cmp	r9, fp
 8004ae2:	bf38      	it	cc
 8004ae4:	46d9      	movcc	r9, fp
 8004ae6:	009a      	lsls	r2, r3, #2
 8004ae8:	d408      	bmi.n	8004afc <ai_platform_network_process+0x188>
 8004aea:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	4419      	add	r1, r3
 8004af2:	6081      	str	r1, [r0, #8]
 8004af4:	69b3      	ldr	r3, [r6, #24]
 8004af6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004afa:	60da      	str	r2, [r3, #12]
 8004afc:	883b      	ldrh	r3, [r7, #0]
 8004afe:	f108 0801 	add.w	r8, r8, #1
 8004b02:	3518      	adds	r5, #24
 8004b04:	e78d      	b.n	8004a22 <ai_platform_network_process+0xae>
 8004b06:	46a3      	mov	fp, r4
 8004b08:	4658      	mov	r0, fp
 8004b0a:	b005      	add	sp, #20
 8004b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b10:	9c01      	ldr	r4, [sp, #4]
 8004b12:	2221      	movs	r2, #33	; 0x21
 8004b14:	f104 0010 	add.w	r0, r4, #16
 8004b18:	2112      	movs	r1, #18
 8004b1a:	f000 f9b1 	bl	8004e80 <core_set_error>
 8004b1e:	e7f3      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004b20:	9c01      	ldr	r4, [sp, #4]
 8004b22:	2217      	movs	r2, #23
 8004b24:	f104 0010 	add.w	r0, r4, #16
 8004b28:	2112      	movs	r1, #18
 8004b2a:	469b      	mov	fp, r3
 8004b2c:	f000 f9a8 	bl	8004e80 <core_set_error>
 8004b30:	e7ea      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004b32:	9c01      	ldr	r4, [sp, #4]
 8004b34:	2219      	movs	r2, #25
 8004b36:	f104 0010 	add.w	r0, r4, #16
 8004b3a:	2112      	movs	r1, #18
 8004b3c:	f000 f9a0 	bl	8004e80 <core_set_error>
 8004b40:	f04f 0b00 	mov.w	fp, #0
 8004b44:	e7e0      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004b46:	9c01      	ldr	r4, [sp, #4]
 8004b48:	2218      	movs	r2, #24
 8004b4a:	f104 0010 	add.w	r0, r4, #16
 8004b4e:	2112      	movs	r1, #18
 8004b50:	f000 f996 	bl	8004e80 <core_set_error>
 8004b54:	f04f 0b00 	mov.w	fp, #0
 8004b58:	e7d6      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004b5a:	9c01      	ldr	r4, [sp, #4]
 8004b5c:	f104 0010 	add.w	r0, r4, #16
 8004b60:	2217      	movs	r2, #23
 8004b62:	2112      	movs	r1, #18
 8004b64:	f000 f98c 	bl	8004e80 <core_set_error>
 8004b68:	f04f 0b00 	mov.w	fp, #0
 8004b6c:	e7cc      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004b6e:	bf00      	nop
 8004b70:	a1c00100 	.word	0xa1c00100
 8004b74:	e0002000 	.word	0xe0002000
 8004b78:	e0042000 	.word	0xe0042000
 8004b7c:	58024c08 	.word	0x58024c08
 8004b80:	58024c00 	.word	0x58024c00
 8004b84:	f407a5c2 	.word	0xf407a5c2
 8004b88:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b8c:	40023008 	.word	0x40023008
 8004b90:	40023000 	.word	0x40023000
 8004b94:	9c01      	ldr	r4, [sp, #4]
 8004b96:	9a02      	ldr	r2, [sp, #8]
 8004b98:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004b9a:	2a00      	cmp	r2, #0
 8004b9c:	f000 80a9 	beq.w	8004cf2 <ai_platform_network_process+0x37e>
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	f240 809b 	bls.w	8004cdc <ai_platform_network_process+0x368>
 8004ba6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8004baa:	f11a 0f0c 	cmn.w	sl, #12
 8004bae:	f000 8095 	beq.w	8004cdc <ai_platform_network_process+0x368>
 8004bb2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8090 	beq.w	8004cdc <ai_platform_network_process+0x368>
 8004bbc:	9d02      	ldr	r5, [sp, #8]
 8004bbe:	9401      	str	r4, [sp, #4]
 8004bc0:	f04f 0800 	mov.w	r8, #0
 8004bc4:	4598      	cmp	r8, r3
 8004bc6:	f080 8092 	bcs.w	8004cee <ai_platform_network_process+0x37a>
 8004bca:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 808d 	beq.w	8004cee <ai_platform_network_process+0x37a>
 8004bd4:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8004bd8:	2e00      	cmp	r6, #0
 8004bda:	f000 8088 	beq.w	8004cee <ai_platform_network_process+0x37a>
 8004bde:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	9302      	str	r3, [sp, #8]
 8004be6:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8004bea:	191f      	adds	r7, r3, r4
 8004bec:	f000 812d 	beq.w	8004e4a <ai_platform_network_process+0x4d6>
 8004bf0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8004bf4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8004bf8:	69b0      	ldr	r0, [r6, #24]
 8004bfa:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004bfe:	6841      	ldr	r1, [r0, #4]
 8004c00:	fb0b f30e 	mul.w	r3, fp, lr
 8004c04:	fb0c f303 	mul.w	r3, ip, r3
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d366      	bcc.n	8004cda <ai_platform_network_process+0x366>
 8004c0c:	68f3      	ldr	r3, [r6, #12]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	455a      	cmp	r2, fp
 8004c12:	d162      	bne.n	8004cda <ai_platform_network_process+0x366>
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	4572      	cmp	r2, lr
 8004c18:	d15f      	bne.n	8004cda <ai_platform_network_process+0x366>
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	459c      	cmp	ip, r3
 8004c1e:	d15c      	bne.n	8004cda <ai_platform_network_process+0x366>
 8004c20:	6800      	ldr	r0, [r0, #0]
 8004c22:	f002 f807 	bl	8006c34 <ai_array_get_byte_size>
 8004c26:	68f2      	ldr	r2, [r6, #12]
 8004c28:	6973      	ldr	r3, [r6, #20]
 8004c2a:	68d2      	ldr	r2, [r2, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	fb03 f302 	mul.w	r3, r3, r2
 8004c32:	4298      	cmp	r0, r3
 8004c34:	d351      	bcc.n	8004cda <ai_platform_network_process+0x366>
 8004c36:	69b3      	ldr	r3, [r6, #24]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	f001 ffa3 	bl	8006b84 <ai_array_to_buffer_fmt>
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	4043      	eors	r3, r0
 8004c42:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004c46:	d13e      	bne.n	8004cc6 <ai_platform_network_process+0x352>
 8004c48:	692b      	ldr	r3, [r5, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d032      	beq.n	8004cb4 <ai_platform_network_process+0x340>
 8004c4e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8004c52:	f1bb 0f00 	cmp.w	fp, #0
 8004c56:	d025      	beq.n	8004ca4 <ai_platform_network_process+0x330>
 8004c58:	68f2      	ldr	r2, [r6, #12]
 8004c5a:	6973      	ldr	r3, [r6, #20]
 8004c5c:	68d1      	ldr	r1, [r2, #12]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	fb02 f201 	mul.w	r2, r2, r1
 8004c64:	60ba      	str	r2, [r7, #8]
 8004c66:	88ab      	ldrh	r3, [r5, #4]
 8004c68:	fb02 f203 	mul.w	r2, r2, r3
 8004c6c:	60fa      	str	r2, [r7, #12]
 8004c6e:	6929      	ldr	r1, [r5, #16]
 8004c70:	6079      	str	r1, [r7, #4]
 8004c72:	692b      	ldr	r3, [r5, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	9a02      	ldr	r2, [sp, #8]
 8004c78:	5113      	str	r3, [r2, r4]
 8004c7a:	69b0      	ldr	r0, [r6, #24]
 8004c7c:	6803      	ldr	r3, [r0, #0]
 8004c7e:	45d9      	cmp	r9, fp
 8004c80:	bf38      	it	cc
 8004c82:	46d9      	movcc	r9, fp
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	d407      	bmi.n	8004c98 <ai_platform_network_process+0x324>
 8004c88:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	4419      	add	r1, r3
 8004c90:	6081      	str	r1, [r0, #8]
 8004c92:	69b3      	ldr	r3, [r6, #24]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004c9c:	f108 0801 	add.w	r8, r8, #1
 8004ca0:	3518      	adds	r5, #24
 8004ca2:	e78f      	b.n	8004bc4 <ai_platform_network_process+0x250>
 8004ca4:	9c01      	ldr	r4, [sp, #4]
 8004ca6:	2221      	movs	r2, #33	; 0x21
 8004ca8:	f104 0010 	add.w	r0, r4, #16
 8004cac:	2113      	movs	r1, #19
 8004cae:	f000 f8e7 	bl	8004e80 <core_set_error>
 8004cb2:	e729      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004cb4:	9c01      	ldr	r4, [sp, #4]
 8004cb6:	2217      	movs	r2, #23
 8004cb8:	f104 0010 	add.w	r0, r4, #16
 8004cbc:	2113      	movs	r1, #19
 8004cbe:	469b      	mov	fp, r3
 8004cc0:	f000 f8de 	bl	8004e80 <core_set_error>
 8004cc4:	e720      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004cc6:	9c01      	ldr	r4, [sp, #4]
 8004cc8:	2219      	movs	r2, #25
 8004cca:	f104 0010 	add.w	r0, r4, #16
 8004cce:	2113      	movs	r1, #19
 8004cd0:	f000 f8d6 	bl	8004e80 <core_set_error>
 8004cd4:	f04f 0b00 	mov.w	fp, #0
 8004cd8:	e716      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004cda:	9c01      	ldr	r4, [sp, #4]
 8004cdc:	f104 0010 	add.w	r0, r4, #16
 8004ce0:	2218      	movs	r2, #24
 8004ce2:	2113      	movs	r1, #19
 8004ce4:	f000 f8cc 	bl	8004e80 <core_set_error>
 8004ce8:	f04f 0b00 	mov.w	fp, #0
 8004cec:	e70c      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004cee:	9c01      	ldr	r4, [sp, #4]
 8004cf0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004cf2:	f8a4 9014 	strh.w	r9, [r4, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80a4 	beq.w	8004e44 <ai_platform_network_process+0x4d0>
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004d00:	f240 809e 	bls.w	8004e40 <ai_platform_network_process+0x4cc>
 8004d04:	f105 070c 	add.w	r7, r5, #12
 8004d08:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8004d0c:	8aa3      	ldrh	r3, [r4, #20]
 8004d0e:	455b      	cmp	r3, fp
 8004d10:	f67f aefa 	bls.w	8004b08 <ai_platform_network_process+0x194>
 8004d14:	9401      	str	r4, [sp, #4]
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	d036      	beq.n	8004d88 <ai_platform_network_process+0x414>
 8004d1a:	882b      	ldrh	r3, [r5, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d033      	beq.n	8004d88 <ai_platform_network_process+0x414>
 8004d20:	686b      	ldr	r3, [r5, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d030      	beq.n	8004d88 <ai_platform_network_process+0x414>
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f04f 0800 	mov.w	r8, #0
 8004d2c:	b9db      	cbnz	r3, 8004d66 <ai_platform_network_process+0x3f2>
 8004d2e:	e02b      	b.n	8004d88 <ai_platform_network_process+0x414>
 8004d30:	68d4      	ldr	r4, [r2, #12]
 8004d32:	1b00      	subs	r0, r0, r4
 8004d34:	4401      	add	r1, r0
 8004d36:	6091      	str	r1, [r2, #8]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	6872      	ldr	r2, [r6, #4]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004d42:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004d46:	440b      	add	r3, r1
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	bf24      	itt	cs
 8004d4c:	68f3      	ldrcs	r3, [r6, #12]
 8004d4e:	1ad3      	subcs	r3, r2, r3
 8004d50:	6073      	str	r3, [r6, #4]
 8004d52:	882b      	ldrh	r3, [r5, #0]
 8004d54:	f108 0801 	add.w	r8, r8, #1
 8004d58:	4598      	cmp	r8, r3
 8004d5a:	d215      	bcs.n	8004d88 <ai_platform_network_process+0x414>
 8004d5c:	686b      	ldr	r3, [r5, #4]
 8004d5e:	b19b      	cbz	r3, 8004d88 <ai_platform_network_process+0x414>
 8004d60:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004d64:	b183      	cbz	r3, 8004d88 <ai_platform_network_process+0x414>
 8004d66:	68a9      	ldr	r1, [r5, #8]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	f8d1 a000 	ldr.w	sl, [r1]
 8004d6e:	6814      	ldr	r4, [r2, #0]
 8004d70:	6890      	ldr	r0, [r2, #8]
 8004d72:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004d76:	eb0a 0609 	add.w	r6, sl, r9
 8004d7a:	00a4      	lsls	r4, r4, #2
 8004d7c:	6871      	ldr	r1, [r6, #4]
 8004d7e:	d5d7      	bpl.n	8004d30 <ai_platform_network_process+0x3bc>
 8004d80:	68b2      	ldr	r2, [r6, #8]
 8004d82:	f001 ffab 	bl	8006cdc <memcpy>
 8004d86:	e7da      	b.n	8004d3e <ai_platform_network_process+0x3ca>
 8004d88:	9801      	ldr	r0, [sp, #4]
 8004d8a:	f001 fead 	bl	8006ae8 <ai_layers_forward_all>
 8004d8e:	2f00      	cmp	r7, #0
 8004d90:	d047      	beq.n	8004e22 <ai_platform_network_process+0x4ae>
 8004d92:	883b      	ldrh	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d044      	beq.n	8004e22 <ai_platform_network_process+0x4ae>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d041      	beq.n	8004e22 <ai_platform_network_process+0x4ae>
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d03e      	beq.n	8004e22 <ai_platform_network_process+0x4ae>
 8004da4:	f04f 0800 	mov.w	r8, #0
 8004da8:	e019      	b.n	8004dde <ai_platform_network_process+0x46a>
 8004daa:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bf24      	itt	cs
 8004db2:	68f3      	ldrcs	r3, [r6, #12]
 8004db4:	1ad3      	subcs	r3, r2, r3
 8004db6:	6073      	str	r3, [r6, #4]
 8004db8:	6981      	ldr	r1, [r0, #24]
 8004dba:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8004dbe:	1b12      	subs	r2, r2, r4
 8004dc0:	4413      	add	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]
 8004dc4:	6983      	ldr	r3, [r0, #24]
 8004dc6:	6872      	ldr	r2, [r6, #4]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	883b      	ldrh	r3, [r7, #0]
 8004dcc:	f108 0801 	add.w	r8, r8, #1
 8004dd0:	4598      	cmp	r8, r3
 8004dd2:	d226      	bcs.n	8004e22 <ai_platform_network_process+0x4ae>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	b323      	cbz	r3, 8004e22 <ai_platform_network_process+0x4ae>
 8004dd8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004ddc:	b308      	cbz	r0, 8004e22 <ai_platform_network_process+0x4ae>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6981      	ldr	r1, [r0, #24]
 8004de2:	f8d3 a000 	ldr.w	sl, [r3]
 8004de6:	680c      	ldr	r4, [r1, #0]
 8004de8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004dec:	eb0a 0609 	add.w	r6, sl, r9
 8004df0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8004df4:	00a4      	lsls	r4, r4, #2
 8004df6:	eb0c 0302 	add.w	r3, ip, r2
 8004dfa:	d5d6      	bpl.n	8004daa <ai_platform_network_process+0x436>
 8004dfc:	6889      	ldr	r1, [r1, #8]
 8004dfe:	4660      	mov	r0, ip
 8004e00:	f001 ff6c 	bl	8006cdc <memcpy>
 8004e04:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004e08:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004e0c:	440b      	add	r3, r1
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	bf24      	itt	cs
 8004e12:	68f3      	ldrcs	r3, [r6, #12]
 8004e14:	1ad3      	subcs	r3, r2, r3
 8004e16:	6073      	str	r3, [r6, #4]
 8004e18:	883b      	ldrh	r3, [r7, #0]
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	4598      	cmp	r8, r3
 8004e20:	d3d8      	bcc.n	8004dd4 <ai_platform_network_process+0x460>
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f10b 0b01 	add.w	fp, fp, #1
 8004e2e:	8a9b      	ldrh	r3, [r3, #20]
 8004e30:	fa1f fb8b 	uxth.w	fp, fp
 8004e34:	455b      	cmp	r3, fp
 8004e36:	f8a2 b016 	strh.w	fp, [r2, #22]
 8004e3a:	f63f af6c 	bhi.w	8004d16 <ai_platform_network_process+0x3a2>
 8004e3e:	e663      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004e40:	2700      	movs	r7, #0
 8004e42:	e761      	b.n	8004d08 <ai_platform_network_process+0x394>
 8004e44:	461d      	mov	r5, r3
 8004e46:	461f      	mov	r7, r3
 8004e48:	e75e      	b.n	8004d08 <ai_platform_network_process+0x394>
 8004e4a:	9c01      	ldr	r4, [sp, #4]
 8004e4c:	2217      	movs	r2, #23
 8004e4e:	f104 0010 	add.w	r0, r4, #16
 8004e52:	2113      	movs	r1, #19
 8004e54:	f000 f814 	bl	8004e80 <core_set_error>
 8004e58:	46bb      	mov	fp, r7
 8004e5a:	e655      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004e5c:	f104 0010 	add.w	r0, r4, #16
 8004e60:	2230      	movs	r2, #48	; 0x30
 8004e62:	2111      	movs	r1, #17
 8004e64:	f000 f80c 	bl	8004e80 <core_set_error>
 8004e68:	e64e      	b.n	8004b08 <ai_platform_network_process+0x194>
 8004e6a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8004e6c:	e5c1      	b.n	80049f2 <ai_platform_network_process+0x7e>
 8004e6e:	bf00      	nop

08004e70 <core_init>:
 8004e70:	2001      	movs	r0, #1
 8004e72:	4770      	bx	lr

08004e74 <core_get_error>:
 8004e74:	4603      	mov	r3, r0
 8004e76:	2200      	movs	r2, #0
 8004e78:	6800      	ldr	r0, [r0, #0]
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop

08004e80 <core_set_error>:
 8004e80:	7803      	ldrb	r3, [r0, #0]
 8004e82:	b933      	cbnz	r3, 8004e92 <core_set_error+0x12>
 8004e84:	7001      	strb	r1, [r0, #0]
 8004e86:	6803      	ldr	r3, [r0, #0]
 8004e88:	f362 231f 	bfi	r3, r2, #8, #24
 8004e8c:	6003      	str	r3, [r0, #0]
 8004e8e:	2001      	movs	r0, #1
 8004e90:	4770      	bx	lr
 8004e92:	2000      	movs	r0, #0
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <func_dummy>:
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop

08004e9c <ai_dict8_dot_array_f32>:
 8004e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004ea4:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8004ea8:	f000 80c0 	beq.w	800502c <ai_dict8_dot_array_f32+0x190>
 8004eac:	f101 0408 	add.w	r4, r1, #8
 8004eb0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004eb4:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005034 <ai_dict8_dot_array_f32+0x198>
 8004eb8:	eb04 0e09 	add.w	lr, r4, r9
 8004ebc:	f103 0520 	add.w	r5, r3, #32
 8004ec0:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8004ec4:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8004ec8:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8004ecc:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8004ed0:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8004ed4:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8004ed8:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8004edc:	ed55 3a04 	vldr	s7, [r5, #-16]
 8004ee0:	ed55 4a03 	vldr	s9, [r5, #-12]
 8004ee4:	ed55 5a02 	vldr	s11, [r5, #-8]
 8004ee8:	ed55 6a01 	vldr	s13, [r5, #-4]
 8004eec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004ef0:	edd6 7a00 	vldr	s15, [r6]
 8004ef4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8004ef8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004efc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004f00:	ed9a 3a00 	vldr	s6, [sl]
 8004f04:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8004f08:	eee3 7a05 	vfma.f32	s15, s6, s10
 8004f0c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004f10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004f14:	ed97 3a00 	vldr	s6, [r7]
 8004f18:	ed96 5a00 	vldr	s10, [r6]
 8004f1c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8004f20:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8004f24:	eee3 7a04 	vfma.f32	s15, s6, s8
 8004f28:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004f2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004f30:	ed9a 3a00 	vldr	s6, [sl]
 8004f34:	ed96 4a00 	vldr	s8, [r6]
 8004f38:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8004f3c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8004f40:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004f44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004f48:	ed97 5a00 	vldr	s10, [r7]
 8004f4c:	ed96 6a00 	vldr	s12, [r6]
 8004f50:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004f54:	3408      	adds	r4, #8
 8004f56:	45a6      	cmp	lr, r4
 8004f58:	f105 0520 	add.w	r5, r5, #32
 8004f5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004f60:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004f64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f6c:	d1a8      	bne.n	8004ec0 <ai_dict8_dot_array_f32+0x24>
 8004f6e:	4449      	add	r1, r9
 8004f70:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004f74:	f01c 0c07 	ands.w	ip, ip, #7
 8004f78:	d050      	beq.n	800501c <ai_dict8_dot_array_f32+0x180>
 8004f7a:	780c      	ldrb	r4, [r1, #0]
 8004f7c:	edd3 6a00 	vldr	s13, [r3]
 8004f80:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004f84:	edd4 7a00 	vldr	s15, [r4]
 8004f88:	f1bc 0f01 	cmp.w	ip, #1
 8004f8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004f90:	d044      	beq.n	800501c <ai_dict8_dot_array_f32+0x180>
 8004f92:	784c      	ldrb	r4, [r1, #1]
 8004f94:	edd3 6a01 	vldr	s13, [r3, #4]
 8004f98:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004f9c:	edd4 7a00 	vldr	s15, [r4]
 8004fa0:	f1bc 0f02 	cmp.w	ip, #2
 8004fa4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004fa8:	d038      	beq.n	800501c <ai_dict8_dot_array_f32+0x180>
 8004faa:	788c      	ldrb	r4, [r1, #2]
 8004fac:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fb0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004fb4:	edd4 7a00 	vldr	s15, [r4]
 8004fb8:	f1bc 0f03 	cmp.w	ip, #3
 8004fbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004fc0:	d02c      	beq.n	800501c <ai_dict8_dot_array_f32+0x180>
 8004fc2:	78cc      	ldrb	r4, [r1, #3]
 8004fc4:	edd3 6a03 	vldr	s13, [r3, #12]
 8004fc8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004fcc:	edd4 7a00 	vldr	s15, [r4]
 8004fd0:	f1bc 0f04 	cmp.w	ip, #4
 8004fd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004fd8:	d020      	beq.n	800501c <ai_dict8_dot_array_f32+0x180>
 8004fda:	790c      	ldrb	r4, [r1, #4]
 8004fdc:	edd3 6a04 	vldr	s13, [r3, #16]
 8004fe0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004fe4:	edd4 7a00 	vldr	s15, [r4]
 8004fe8:	f1bc 0f05 	cmp.w	ip, #5
 8004fec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ff0:	d014      	beq.n	800501c <ai_dict8_dot_array_f32+0x180>
 8004ff2:	794c      	ldrb	r4, [r1, #5]
 8004ff4:	edd3 6a05 	vldr	s13, [r3, #20]
 8004ff8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004ffc:	edd4 7a00 	vldr	s15, [r4]
 8005000:	f1bc 0f06 	cmp.w	ip, #6
 8005004:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005008:	d008      	beq.n	800501c <ai_dict8_dot_array_f32+0x180>
 800500a:	7989      	ldrb	r1, [r1, #6]
 800500c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005010:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005014:	edd2 6a00 	vldr	s13, [r2]
 8005018:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800501c:	edd0 7a00 	vldr	s15, [r0]
 8005020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005024:	ed80 7a00 	vstr	s14, [r0]
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005034 <ai_dict8_dot_array_f32+0x198>
 8005030:	e7a0      	b.n	8004f74 <ai_dict8_dot_array_f32+0xd8>
 8005032:	bf00      	nop
 8005034:	00000000 	.word	0x00000000

08005038 <ai_dict4_dot_array_f32>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800503e:	f027 0c01 	bic.w	ip, r7, #1
 8005042:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8005046:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800504a:	f000 80ae 	beq.w	80051aa <ai_dict4_dot_array_f32+0x172>
 800504e:	1d0d      	adds	r5, r1, #4
 8005050:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005054:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80051b0 <ai_dict4_dot_array_f32+0x178>
 8005058:	eb05 0e09 	add.w	lr, r5, r9
 800505c:	f103 0420 	add.w	r4, r3, #32
 8005060:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005064:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005068:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800506c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8005070:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005074:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005078:	ed14 5a04 	vldr	s10, [r4, #-16]
 800507c:	ed54 5a03 	vldr	s11, [r4, #-12]
 8005080:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005084:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005088:	f006 0a0f 	and.w	sl, r6, #15
 800508c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005090:	edda 7a00 	vldr	s15, [sl]
 8005094:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005098:	0936      	lsrs	r6, r6, #4
 800509a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800509e:	ee67 7a83 	vmul.f32	s15, s15, s6
 80050a2:	ed96 3a00 	vldr	s6, [r6]
 80050a6:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80050aa:	eee3 7a23 	vfma.f32	s15, s6, s7
 80050ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80050b2:	f00b 0b0f 	and.w	fp, fp, #15
 80050b6:	edd6 3a00 	vldr	s7, [r6]
 80050ba:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80050be:	eee3 7a84 	vfma.f32	s15, s7, s8
 80050c2:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80050c6:	3504      	adds	r5, #4
 80050c8:	ed9b 4a00 	vldr	s8, [fp]
 80050cc:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80050d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80050d4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80050d8:	f00a 0a0f 	and.w	sl, sl, #15
 80050dc:	eddb 4a00 	vldr	s9, [fp]
 80050e0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80050e4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80050e8:	45ae      	cmp	lr, r5
 80050ea:	ed9a 5a00 	vldr	s10, [sl]
 80050ee:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80050f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80050f6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80050fa:	f006 060f 	and.w	r6, r6, #15
 80050fe:	edda 5a00 	vldr	s11, [sl]
 8005102:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005106:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800510a:	f104 0420 	add.w	r4, r4, #32
 800510e:	ed96 6a00 	vldr	s12, [r6]
 8005112:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800511a:	d1a1      	bne.n	8005060 <ai_dict4_dot_array_f32+0x28>
 800511c:	4449      	add	r1, r9
 800511e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005122:	459c      	cmp	ip, r3
 8005124:	d92d      	bls.n	8005182 <ai_dict4_dot_array_f32+0x14a>
 8005126:	f10c 0c07 	add.w	ip, ip, #7
 800512a:	f103 0508 	add.w	r5, r3, #8
 800512e:	ebac 0c05 	sub.w	ip, ip, r5
 8005132:	f02c 0407 	bic.w	r4, ip, #7
 8005136:	f103 0810 	add.w	r8, r3, #16
 800513a:	44a0      	add	r8, r4
 800513c:	f101 3eff 	add.w	lr, r1, #4294967295
 8005140:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005144:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005148:	ed55 6a02 	vldr	s13, [r5, #-8]
 800514c:	f004 060f 	and.w	r6, r4, #15
 8005150:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005154:	0924      	lsrs	r4, r4, #4
 8005156:	edd6 7a00 	vldr	s15, [r6]
 800515a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800515e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005162:	ed94 6a00 	vldr	s12, [r4]
 8005166:	eee6 7a26 	vfma.f32	s15, s12, s13
 800516a:	3508      	adds	r5, #8
 800516c:	45a8      	cmp	r8, r5
 800516e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005172:	d1e5      	bne.n	8005140 <ai_dict4_dot_array_f32+0x108>
 8005174:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005178:	f10c 0c01 	add.w	ip, ip, #1
 800517c:	4461      	add	r1, ip
 800517e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005182:	07fc      	lsls	r4, r7, #31
 8005184:	d509      	bpl.n	800519a <ai_dict4_dot_array_f32+0x162>
 8005186:	7809      	ldrb	r1, [r1, #0]
 8005188:	edd3 7a00 	vldr	s15, [r3]
 800518c:	090b      	lsrs	r3, r1, #4
 800518e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005192:	edd2 6a00 	vldr	s13, [r2]
 8005196:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800519a:	edd0 7a00 	vldr	s15, [r0]
 800519e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a2:	ed80 7a00 	vstr	s14, [r0]
 80051a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051aa:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80051b0 <ai_dict4_dot_array_f32+0x178>
 80051ae:	e7b8      	b.n	8005122 <ai_dict4_dot_array_f32+0xea>
 80051b0:	00000000 	.word	0x00000000

080051b4 <ai_dict_decompress_f32>:
 80051b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051b8:	9f08      	ldr	r7, [sp, #32]
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80051c0:	d00e      	beq.n	80051e0 <ai_dict_decompress_f32+0x2c>
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d10a      	bne.n	80051dc <ai_dict_decompress_f32+0x28>
 80051c6:	42b8      	cmp	r0, r7
 80051c8:	d208      	bcs.n	80051dc <ai_dict_decompress_f32+0x28>
 80051ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f840 3b04 	str.w	r3, [r0], #4
 80051d8:	4287      	cmp	r7, r0
 80051da:	d8f6      	bhi.n	80051ca <ai_dict_decompress_f32+0x16>
 80051dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051e0:	9b07      	ldr	r3, [sp, #28]
 80051e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80051e6:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80051ea:	f10c 38ff 	add.w	r8, ip, #4294967295
 80051ee:	f003 0e01 	and.w	lr, r3, #1
 80051f2:	42b8      	cmp	r0, r7
 80051f4:	d2f2      	bcs.n	80051dc <ai_dict_decompress_f32+0x28>
 80051f6:	f1bc 0f00 	cmp.w	ip, #0
 80051fa:	d01a      	beq.n	8005232 <ai_dict_decompress_f32+0x7e>
 80051fc:	f100 0508 	add.w	r5, r0, #8
 8005200:	1e4c      	subs	r4, r1, #1
 8005202:	eb01 0608 	add.w	r6, r1, r8
 8005206:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005210:	42a6      	cmp	r6, r4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f845 3c08 	str.w	r3, [r5, #-8]
 8005218:	7823      	ldrb	r3, [r4, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005222:	f105 0508 	add.w	r5, r5, #8
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f845 3c0c 	str.w	r3, [r5, #-12]
 800522c:	d1eb      	bne.n	8005206 <ai_dict_decompress_f32+0x52>
 800522e:	4461      	add	r1, ip
 8005230:	4448      	add	r0, r9
 8005232:	f1be 0f00 	cmp.w	lr, #0
 8005236:	d103      	bne.n	8005240 <ai_dict_decompress_f32+0x8c>
 8005238:	4287      	cmp	r7, r0
 800523a:	d8dc      	bhi.n	80051f6 <ai_dict_decompress_f32+0x42>
 800523c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005240:	780b      	ldrb	r3, [r1, #0]
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005248:	3101      	adds	r1, #1
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6003      	str	r3, [r0, #0]
 800524e:	3004      	adds	r0, #4
 8005250:	e7cf      	b.n	80051f2 <ai_dict_decompress_f32+0x3e>
 8005252:	bf00      	nop

08005254 <forward_conv2d>:
 8005254:	6983      	ldr	r3, [r0, #24]
 8005256:	881a      	ldrh	r2, [r3, #0]
 8005258:	2a00      	cmp	r2, #0
 800525a:	f000 87c7 	beq.w	80061ec <forward_conv2d+0xf98>
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	b101      	cbz	r1, 8005266 <forward_conv2d+0x12>
 8005264:	6809      	ldr	r1, [r1, #0]
 8005266:	2a01      	cmp	r2, #1
 8005268:	f240 87bd 	bls.w	80061e6 <forward_conv2d+0xf92>
 800526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005270:	ed2d 8b10 	vpush	{d8-d15}
 8005274:	b0cb      	sub	sp, #300	; 0x12c
 8005276:	691c      	ldr	r4, [r3, #16]
 8005278:	af02      	add	r7, sp, #8
 800527a:	2c00      	cmp	r4, #0
 800527c:	f000 87af 	beq.w	80061de <forward_conv2d+0xf8a>
 8005280:	6824      	ldr	r4, [r4, #0]
 8005282:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8005286:	2a02      	cmp	r2, #2
 8005288:	f000 87a4 	beq.w	80061d4 <forward_conv2d+0xf80>
 800528c:	69dd      	ldr	r5, [r3, #28]
 800528e:	2d00      	cmp	r5, #0
 8005290:	f000 8799 	beq.w	80061c6 <forward_conv2d+0xf72>
 8005294:	f113 0218 	adds.w	r2, r3, #24
 8005298:	682c      	ldr	r4, [r5, #0]
 800529a:	d004      	beq.n	80052a6 <forward_conv2d+0x52>
 800529c:	8b1b      	ldrh	r3, [r3, #24]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f240 87a6 	bls.w	80061f0 <forward_conv2d+0xf9c>
 80052a4:	686a      	ldr	r2, [r5, #4]
 80052a6:	68ab      	ldr	r3, [r5, #8]
 80052a8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80052ac:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80052b0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80052b4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80052b8:	68ce      	ldr	r6, [r1, #12]
 80052ba:	69a1      	ldr	r1, [r4, #24]
 80052bc:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80052c0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80052c4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80052c8:	f8de 1004 	ldr.w	r1, [lr, #4]
 80052cc:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80052d0:	f8de 100c 	ldr.w	r1, [lr, #12]
 80052d4:	6479      	str	r1, [r7, #68]	; 0x44
 80052d6:	f8de 1008 	ldr.w	r1, [lr, #8]
 80052da:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80052de:	6871      	ldr	r1, [r6, #4]
 80052e0:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80052e4:	68f1      	ldr	r1, [r6, #12]
 80052e6:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80052ea:	68b1      	ldr	r1, [r6, #8]
 80052ec:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80052f0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80052f4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80052f8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80052fc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8005300:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005304:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8005306:	6889      	ldr	r1, [r1, #8]
 8005308:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800530c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800530e:	e9d5 ba00 	ldrd	fp, sl, [r5]
 8005312:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8005316:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005318:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800531c:	69c1      	ldr	r1, [r0, #28]
 800531e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005322:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 8005326:	2a00      	cmp	r2, #0
 8005328:	f000 8749 	beq.w	80061be <forward_conv2d+0xf6a>
 800532c:	6992      	ldr	r2, [r2, #24]
 800532e:	6892      	ldr	r2, [r2, #8]
 8005330:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005334:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005338:	6992      	ldr	r2, [r2, #24]
 800533a:	6892      	ldr	r2, [r2, #8]
 800533c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005340:	4606      	mov	r6, r0
 8005342:	6a00      	ldr	r0, [r0, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 872c 	beq.w	80061a2 <forward_conv2d+0xf4e>
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	2a00      	cmp	r2, #0
 800534e:	f000 8594 	beq.w	8005e7a <forward_conv2d+0xc26>
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800535a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800535e:	6893      	ldr	r3, [r2, #8]
 8005360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005364:	f001 fc66 	bl	8006c34 <ai_array_get_byte_size>
 8005368:	69a3      	ldr	r3, [r4, #24]
 800536a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800536e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8005378:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800537a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800537e:	f3c3 5441 	ubfx	r4, r3, #21, #2
 8005382:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 8005386:	fa1f f088 	uxth.w	r0, r8
 800538a:	4125      	asrs	r5, r4
 800538c:	3801      	subs	r0, #1
 800538e:	1e4c      	subs	r4, r1, #1
 8005390:	fb04 1100 	mla	r1, r4, r0, r1
 8005394:	6439      	str	r1, [r7, #64]	; 0x40
 8005396:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800539a:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800573c <forward_conv2d+0x4e8>
 800539e:	fa1f f289 	uxth.w	r2, r9
 80053a2:	3a01      	subs	r2, #1
 80053a4:	1e48      	subs	r0, r1, #1
 80053a6:	fb00 1102 	mla	r1, r0, r2, r1
 80053aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053ae:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80053b2:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80053b6:	4610      	mov	r0, r2
 80053b8:	2a00      	cmp	r2, #0
 80053ba:	bf08      	it	eq
 80053bc:	4660      	moveq	r0, ip
 80053be:	2b04      	cmp	r3, #4
 80053c0:	b2ad      	uxth	r5, r5
 80053c2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80053c6:	f000 8533 	beq.w	8005e30 <forward_conv2d+0xbdc>
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	f000 8530 	beq.w	8005e30 <forward_conv2d+0xbdc>
 80053d0:	fa1f f38b 	uxth.w	r3, fp
 80053d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80053d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053dc:	425b      	negs	r3, r3
 80053de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053e2:	2900      	cmp	r1, #0
 80053e4:	f000 8242 	beq.w	800586c <forward_conv2d+0x618>
 80053e8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80053ec:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 80053f0:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8005738 <forward_conv2d+0x4e4>
 80053f4:	fb00 f305 	mul.w	r3, r0, r5
 80053f8:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 80053fc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8005400:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8005404:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 8005408:	663d      	str	r5, [r7, #96]	; 0x60
 800540a:	fa0f f288 	sxth.w	r2, r8
 800540e:	fb03 f400 	mul.w	r4, r3, r0
 8005412:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8005416:	fa1f f18a 	uxth.w	r1, sl
 800541a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800541e:	67bc      	str	r4, [r7, #120]	; 0x78
 8005420:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8005424:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8005428:	4249      	negs	r1, r1
 800542a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800542e:	0092      	lsls	r2, r2, #2
 8005430:	0081      	lsls	r1, r0, #2
 8005432:	4605      	mov	r5, r0
 8005434:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8005438:	fb04 f200 	mul.w	r2, r4, r0
 800543c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8005440:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8005444:	fb01 fc00 	mul.w	ip, r1, r0
 8005448:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800544c:	fb01 fc03 	mul.w	ip, r1, r3
 8005450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005452:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005460:	fa0f f689 	sxth.w	r6, r9
 8005464:	469c      	mov	ip, r3
 8005466:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800546a:	4633      	mov	r3, r6
 800546c:	fb0c f606 	mul.w	r6, ip, r6
 8005470:	677e      	str	r6, [r7, #116]	; 0x74
 8005472:	4666      	mov	r6, ip
 8005474:	fb04 f606 	mul.w	r6, r4, r6
 8005478:	4686      	mov	lr, r0
 800547a:	4620      	mov	r0, r4
 800547c:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8005480:	62be      	str	r6, [r7, #40]	; 0x28
 8005482:	fb01 f404 	mul.w	r4, r1, r4
 8005486:	fb03 f605 	mul.w	r6, r3, r5
 800548a:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800548c:	66bc      	str	r4, [r7, #104]	; 0x68
 800548e:	460b      	mov	r3, r1
 8005490:	4604      	mov	r4, r0
 8005492:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8005496:	627e      	str	r6, [r7, #36]	; 0x24
 8005498:	fb05 f404 	mul.w	r4, r5, r4
 800549c:	617c      	str	r4, [r7, #20]
 800549e:	460c      	mov	r4, r1
 80054a0:	fb04 f403 	mul.w	r4, r4, r3
 80054a4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80054a8:	65bc      	str	r4, [r7, #88]	; 0x58
 80054aa:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80054ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054b2:	fb01 f104 	mul.w	r1, r1, r4
 80054b6:	61b9      	str	r1, [r7, #24]
 80054b8:	0091      	lsls	r1, r2, #2
 80054ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054be:	64b9      	str	r1, [r7, #72]	; 0x48
 80054c0:	fb00 f202 	mul.w	r2, r0, r2
 80054c4:	0081      	lsls	r1, r0, #2
 80054c6:	61f9      	str	r1, [r7, #28]
 80054c8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80054cc:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80054d0:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80054d4:	011a      	lsls	r2, r3, #4
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054e4:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80054e8:	2300      	movs	r3, #0
 80054ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054f0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80054f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80054fc:	2900      	cmp	r1, #0
 80054fe:	441a      	add	r2, r3
 8005500:	bfb4      	ite	lt
 8005502:	2100      	movlt	r1, #0
 8005504:	2300      	movge	r3, #0
 8005506:	4282      	cmp	r2, r0
 8005508:	bf28      	it	cs
 800550a:	4602      	movcs	r2, r0
 800550c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8005510:	2801      	cmp	r0, #1
 8005512:	f000 8320 	beq.w	8005b56 <forward_conv2d+0x902>
 8005516:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800551a:	4281      	cmp	r1, r0
 800551c:	f000 81c3 	beq.w	80058a6 <forward_conv2d+0x652>
 8005520:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005524:	2900      	cmp	r1, #0
 8005526:	f000 8182 	beq.w	800582e <forward_conv2d+0x5da>
 800552a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800552e:	fb93 f1f0 	sdiv	r1, r3, r0
 8005532:	fb00 3111 	mls	r1, r0, r1, r3
 8005536:	1a41      	subs	r1, r0, r1
 8005538:	1ad2      	subs	r2, r2, r3
 800553a:	fb91 f5f0 	sdiv	r5, r1, r0
 800553e:	fb00 1515 	mls	r5, r0, r5, r1
 8005542:	1b52      	subs	r2, r2, r5
 8005544:	4601      	mov	r1, r0
 8005546:	4402      	add	r2, r0
 8005548:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800554c:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 8005550:	f8c7 b020 	str.w	fp, [r7, #32]
 8005554:	4604      	mov	r4, r0
 8005556:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800555a:	fbb4 f4f0 	udiv	r4, r4, r0
 800555e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005560:	3a01      	subs	r2, #1
 8005562:	fb92 f8f1 	sdiv	r8, r2, r1
 8005566:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800556a:	eba0 0c04 	sub.w	ip, r0, r4
 800556e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8005572:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005576:	4614      	mov	r4, r2
 8005578:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800557c:	fbb4 f2f2 	udiv	r2, r4, r2
 8005580:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8005584:	657a      	str	r2, [r7, #84]	; 0x54
 8005586:	441d      	add	r5, r3
 8005588:	fb0e f000 	mul.w	r0, lr, r0
 800558c:	440b      	add	r3, r1
 800558e:	eba6 0608 	sub.w	r6, r6, r8
 8005592:	fb04 f505 	mul.w	r5, r4, r5
 8005596:	3b01      	subs	r3, #1
 8005598:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800559c:	fb93 f3f4 	sdiv	r3, r3, r4
 80055a0:	fb00 f406 	mul.w	r4, r0, r6
 80055a4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80055a8:	66fd      	str	r5, [r7, #108]	; 0x6c
 80055aa:	0091      	lsls	r1, r2, #2
 80055ac:	fb00 f003 	mul.w	r0, r0, r3
 80055b0:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 80055b4:	6538      	str	r0, [r7, #80]	; 0x50
 80055b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055ba:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80055be:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80055c2:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80055c6:	1ac3      	subs	r3, r0, r3
 80055c8:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80055cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055d0:	008b      	lsls	r3, r1, #2
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
 80055d4:	00d3      	lsls	r3, r2, #3
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055e8:	2300      	movs	r3, #0
 80055ea:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80055ee:	673b      	str	r3, [r7, #112]	; 0x70
 80055f0:	46c2      	mov	sl, r8
 80055f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055fa:	eb03 0c02 	add.w	ip, r3, r2
 80055fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005602:	2b00      	cmp	r3, #0
 8005604:	f2c0 813b 	blt.w	800587e <forward_conv2d+0x62a>
 8005608:	2000      	movs	r0, #0
 800560a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800560c:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 8005610:	4605      	mov	r5, r0
 8005612:	4606      	mov	r6, r0
 8005614:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005620:	4413      	add	r3, r2
 8005622:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005626:	440a      	add	r2, r1
 8005628:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800562c:	428b      	cmp	r3, r1
 800562e:	bf94      	ite	ls
 8005630:	ebc6 0303 	rsbls	r3, r6, r3
 8005634:	ebc6 0301 	rsbhi	r3, r6, r1
 8005638:	4415      	add	r5, r2
 800563a:	1a1b      	subs	r3, r3, r0
 800563c:	00a4      	lsls	r4, r4, #2
 800563e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8005642:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8005646:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800564a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800564c:	4602      	mov	r2, r0
 800564e:	2800      	cmp	r0, #0
 8005650:	bf08      	it	eq
 8005652:	4662      	moveq	r2, ip
 8005654:	f108 31ff 	add.w	r1, r8, #4294967295
 8005658:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800565c:	fb91 f1f0 	sdiv	r1, r1, r0
 8005660:	4429      	add	r1, r5
 8005662:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8005666:	fb0e 5501 	mla	r5, lr, r1, r5
 800566a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800566e:	4403      	add	r3, r0
 8005670:	fb01 6104 	mla	r1, r1, r4, r6
 8005674:	3b01      	subs	r3, #1
 8005676:	fb93 f6f0 	sdiv	r6, r3, r0
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8005680:	fb06 3110 	mls	r1, r6, r0, r3
 8005684:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005688:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800568c:	4562      	cmp	r2, ip
 800568e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005692:	bf08      	it	eq
 8005694:	eeb0 6a48 	vmoveq.f32	s12, s16
 8005698:	1b9b      	subs	r3, r3, r6
 800569a:	2800      	cmp	r0, #0
 800569c:	d076      	beq.n	800578c <forward_conv2d+0x538>
 800569e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80056a2:	fb0e f803 	mul.w	r8, lr, r3
 80056a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a8:	fb00 fb01 	mul.w	fp, r0, r1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d06d      	beq.n	800578c <forward_conv2d+0x538>
 80056b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056b4:	18d3      	adds	r3, r2, r3
 80056b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	633b      	str	r3, [r7, #48]	; 0x30
 80056c2:	2300      	movs	r3, #0
 80056c4:	667b      	str	r3, [r7, #100]	; 0x64
 80056c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	4413      	add	r3, r2
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	4413      	add	r3, r2
 80056d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056e0:	ecf3 7a01 	vldmia	r3!, {s15}
 80056e4:	f1ba 0f00 	cmp.w	sl, #0
 80056e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80056f0:	f340 80c3 	ble.w	800587a <forward_conv2d+0x626>
 80056f4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80056f8:	f04f 0c00 	mov.w	ip, #0
 80056fc:	2e00      	cmp	r6, #0
 80056fe:	dd1f      	ble.n	8005740 <forward_conv2d+0x4ec>
 8005700:	2100      	movs	r1, #0
 8005702:	eb00 040e 	add.w	r4, r0, lr
 8005706:	4284      	cmp	r4, r0
 8005708:	d910      	bls.n	800572c <forward_conv2d+0x4d8>
 800570a:	4603      	mov	r3, r0
 800570c:	462a      	mov	r2, r5
 800570e:	ecb3 7a01 	vldmia	r3!, {s14}
 8005712:	ecf2 6a01 	vldmia	r2!, {s13}
 8005716:	429c      	cmp	r4, r3
 8005718:	eee6 7a87 	vfma.f32	s15, s13, s14
 800571c:	d8f7      	bhi.n	800570e <forward_conv2d+0x4ba>
 800571e:	43c3      	mvns	r3, r0
 8005720:	441c      	add	r4, r3
 8005722:	f024 0403 	bic.w	r4, r4, #3
 8005726:	3404      	adds	r4, #4
 8005728:	4425      	add	r5, r4
 800572a:	4420      	add	r0, r4
 800572c:	3101      	adds	r1, #1
 800572e:	428e      	cmp	r6, r1
 8005730:	4448      	add	r0, r9
 8005732:	d1e6      	bne.n	8005702 <forward_conv2d+0x4ae>
 8005734:	e004      	b.n	8005740 <forward_conv2d+0x4ec>
 8005736:	bf00      	nop
 8005738:	00000000 	.word	0x00000000
 800573c:	08004e99 	.word	0x08004e99
 8005740:	f10c 0c01 	add.w	ip, ip, #1
 8005744:	45e2      	cmp	sl, ip
 8005746:	4458      	add	r0, fp
 8005748:	4445      	add	r5, r8
 800574a:	d1d7      	bne.n	80056fc <forward_conv2d+0x4a8>
 800574c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005750:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005754:	441d      	add	r5, r3
 8005756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800575a:	ece3 7a01 	vstmia	r3!, {s15}
 800575e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005766:	4293      	cmp	r3, r2
 8005768:	d1b8      	bne.n	80056dc <forward_conv2d+0x488>
 800576a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800576e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005772:	4472      	add	r2, lr
 8005774:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800577a:	1a52      	subs	r2, r2, r1
 800577c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005780:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8005784:	3301      	adds	r3, #1
 8005786:	429a      	cmp	r2, r3
 8005788:	667b      	str	r3, [r7, #100]	; 0x64
 800578a:	d19c      	bne.n	80056c6 <forward_conv2d+0x472>
 800578c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005790:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005796:	4608      	mov	r0, r1
 8005798:	4410      	add	r0, r2
 800579a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800579e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80057a2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80057a6:	4401      	add	r1, r0
 80057a8:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80057ac:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80057b0:	1a8a      	subs	r2, r1, r2
 80057b2:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80057b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80057ba:	3301      	adds	r3, #1
 80057bc:	429a      	cmp	r2, r3
 80057be:	673b      	str	r3, [r7, #112]	; 0x70
 80057c0:	f47f af17 	bne.w	80055f2 <forward_conv2d+0x39e>
 80057c4:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80057c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057cc:	b37b      	cbz	r3, 800582e <forward_conv2d+0x5da>
 80057ce:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80057d2:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 80057d6:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 80057da:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 80057de:	2500      	movs	r5, #0
 80057e0:	46a2      	mov	sl, r4
 80057e2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80057e6:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80057ea:	f8c2 a008 	str.w	sl, [r2, #8]
 80057ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80057f2:	4633      	mov	r3, r6
 80057f4:	4641      	mov	r1, r8
 80057f6:	4416      	add	r6, r2
 80057f8:	4640      	mov	r0, r8
 80057fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80057fe:	47a0      	blx	r4
 8005800:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005804:	4492      	add	sl, r2
 8005806:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800580a:	eba6 0309 	sub.w	r3, r6, r9
 800580e:	4293      	cmp	r3, r2
 8005810:	bfa8      	it	ge
 8005812:	464e      	movge	r6, r9
 8005814:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005818:	3501      	adds	r5, #1
 800581a:	42ab      	cmp	r3, r5
 800581c:	d1e1      	bne.n	80057e2 <forward_conv2d+0x58e>
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8005828:	4413      	add	r3, r2
 800582a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800582e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005832:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800583e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005840:	4610      	mov	r0, r2
 8005842:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005846:	4418      	add	r0, r3
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005854:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8005858:	4413      	add	r3, r2
 800585a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800585e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005862:	3101      	adds	r1, #1
 8005864:	428b      	cmp	r3, r1
 8005866:	67f9      	str	r1, [r7, #124]	; 0x7c
 8005868:	f47f ae42 	bne.w	80054f0 <forward_conv2d+0x29c>
 800586c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8005870:	46bd      	mov	sp, r7
 8005872:	ecbd 8b10 	vpop	{d8-d15}
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	461a      	mov	r2, r3
 800587c:	e768      	b.n	8005750 <forward_conv2d+0x4fc>
 800587e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005882:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8005886:	fb90 f3f2 	sdiv	r3, r0, r2
 800588a:	fb02 0313 	mls	r3, r2, r3, r0
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	4605      	mov	r5, r0
 8005892:	fb93 f0f2 	sdiv	r0, r3, r2
 8005896:	fb02 3010 	mls	r0, r2, r0, r3
 800589a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589c:	462e      	mov	r6, r5
 800589e:	18c4      	adds	r4, r0, r3
 80058a0:	eb02 0805 	add.w	r8, r2, r5
 80058a4:	e6b6      	b.n	8005614 <forward_conv2d+0x3c0>
 80058a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80058a8:	2901      	cmp	r1, #1
 80058aa:	f47f ae39 	bne.w	8005520 <forward_conv2d+0x2cc>
 80058ae:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80058b2:	2900      	cmp	r1, #0
 80058b4:	d0bb      	beq.n	800582e <forward_conv2d+0x5da>
 80058b6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80058ba:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80058be:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 80058c2:	fbb1 f5f0 	udiv	r5, r1, r0
 80058c6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80058ca:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80058ce:	633d      	str	r5, [r7, #48]	; 0x30
 80058d0:	1ad2      	subs	r2, r2, r3
 80058d2:	1a8c      	subs	r4, r1, r2
 80058d4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058d8:	00b2      	lsls	r2, r6, #2
 80058da:	fb02 f204 	mul.w	r2, r2, r4
 80058de:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 80058e2:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 80058e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058e8:	0082      	lsls	r2, r0, #2
 80058ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80058ec:	00ca      	lsls	r2, r1, #3
 80058ee:	603a      	str	r2, [r7, #0]
 80058f0:	00aa      	lsls	r2, r5, #2
 80058f2:	60ba      	str	r2, [r7, #8]
 80058f4:	fb03 f206 	mul.w	r2, r3, r6
 80058f8:	673a      	str	r2, [r7, #112]	; 0x70
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	fb02 f303 	mul.w	r3, r2, r3
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
 8005902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800590a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005912:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005916:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800591a:	2300      	movs	r3, #0
 800591c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005920:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	f2c0 8110 	blt.w	8005b4a <forward_conv2d+0x8f6>
 800592a:	2100      	movs	r1, #0
 800592c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800592e:	460a      	mov	r2, r1
 8005930:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8005934:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8005938:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800593c:	4420      	add	r0, r4
 800593e:	4408      	add	r0, r1
 8005940:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8005944:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8005948:	190c      	adds	r4, r1, r4
 800594a:	42ac      	cmp	r4, r5
 800594c:	bf28      	it	cs
 800594e:	462c      	movcs	r4, r5
 8005950:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8005954:	0080      	lsls	r0, r0, #2
 8005956:	1aa4      	subs	r4, r4, r2
 8005958:	2d00      	cmp	r5, #0
 800595a:	f000 80e7 	beq.w	8005b2c <forward_conv2d+0x8d8>
 800595e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005962:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 8005966:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800596a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800596e:	42b5      	cmp	r5, r6
 8005970:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8005974:	eba3 0204 	sub.w	r2, r3, r4
 8005978:	eba1 0104 	sub.w	r1, r1, r4
 800597c:	bf08      	it	eq
 800597e:	eef0 3a48 	vmoveq.f32	s7, s16
 8005982:	462b      	mov	r3, r5
 8005984:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8005986:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800598a:	4428      	add	r0, r5
 800598c:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8005990:	fb05 6e00 	mla	lr, r5, r0, r6
 8005994:	eb0e 000b 	add.w	r0, lr, fp
 8005998:	4586      	cmp	lr, r0
 800599a:	6238      	str	r0, [r7, #32]
 800599c:	f080 80a5 	bcs.w	8005aea <forward_conv2d+0x896>
 80059a0:	0092      	lsls	r2, r2, #2
 80059a2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a8:	fb0b f101 	mul.w	r1, fp, r1
 80059ac:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80059b0:	f024 0803 	bic.w	r8, r4, #3
 80059b4:	2a00      	cmp	r2, #0
 80059b6:	f000 8098 	beq.w	8005aea <forward_conv2d+0x896>
 80059ba:	f108 32ff 	add.w	r2, r8, #4294967295
 80059be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80059c0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80059c4:	0892      	lsrs	r2, r2, #2
 80059c6:	3201      	adds	r2, #1
 80059c8:	4401      	add	r1, r0
 80059ca:	fb02 f00a 	mul.w	r0, r2, sl
 80059ce:	6578      	str	r0, [r7, #84]	; 0x54
 80059d0:	0110      	lsls	r0, r2, #4
 80059d2:	0092      	lsls	r2, r2, #2
 80059d4:	653a      	str	r2, [r7, #80]	; 0x50
 80059d6:	1aca      	subs	r2, r1, r3
 80059d8:	613a      	str	r2, [r7, #16]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	6678      	str	r0, [r7, #100]	; 0x64
 80059de:	4413      	add	r3, r2
 80059e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ea:	4413      	add	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059fc:	ecf3 6a01 	vldmia	r3!, {s13}
 8005a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005a0e:	dd57      	ble.n	8005ac0 <forward_conv2d+0x86c>
 8005a10:	4676      	mov	r6, lr
 8005a12:	f04f 0c00 	mov.w	ip, #0
 8005a16:	f1b8 0f00 	cmp.w	r8, #0
 8005a1a:	f340 8085 	ble.w	8005b28 <forward_conv2d+0x8d4>
 8005a1e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005a22:	f109 0310 	add.w	r3, r9, #16
 8005a26:	18b1      	adds	r1, r6, r2
 8005a28:	2000      	movs	r0, #0
 8005a2a:	4632      	mov	r2, r6
 8005a2c:	eb02 050b 	add.w	r5, r2, fp
 8005a30:	ed95 7a00 	vldr	s14, [r5]
 8005a34:	ed53 7a03 	vldr	s15, [r3, #-12]
 8005a38:	ed92 4a00 	vldr	s8, [r2]
 8005a3c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8005a40:	ed91 5a00 	vldr	s10, [r1]
 8005a44:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005a48:	ed13 6a01 	vldr	s12, [r3, #-4]
 8005a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a50:	eb01 050b 	add.w	r5, r1, fp
 8005a54:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005a58:	3004      	adds	r0, #4
 8005a5a:	4540      	cmp	r0, r8
 8005a5c:	ed95 7a00 	vldr	s14, [r5]
 8005a60:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005a64:	4452      	add	r2, sl
 8005a66:	4451      	add	r1, sl
 8005a68:	f103 0310 	add.w	r3, r3, #16
 8005a6c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005a70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a74:	dbda      	blt.n	8005a2c <forward_conv2d+0x7d8>
 8005a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a78:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a7a:	441e      	add	r6, r3
 8005a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7e:	4499      	add	r9, r3
 8005a80:	42a0      	cmp	r0, r4
 8005a82:	da11      	bge.n	8005aa8 <forward_conv2d+0x854>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4633      	mov	r3, r6
 8005a88:	4649      	mov	r1, r9
 8005a8a:	edd3 7a00 	vldr	s15, [r3]
 8005a8e:	ecb1 7a01 	vldmia	r1!, {s14}
 8005a92:	3201      	adds	r2, #1
 8005a94:	42a2      	cmp	r2, r4
 8005a96:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a9a:	445b      	add	r3, fp
 8005a9c:	d1f5      	bne.n	8005a8a <forward_conv2d+0x836>
 8005a9e:	1a20      	subs	r0, r4, r0
 8005aa0:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8005aa4:	fb00 660b 	mla	r6, r0, fp, r6
 8005aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005aac:	441e      	add	r6, r3
 8005aae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ab2:	4499      	add	r9, r3
 8005ab4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ab8:	f10c 0c01 	add.w	ip, ip, #1
 8005abc:	4563      	cmp	r3, ip
 8005abe:	d1aa      	bne.n	8005a16 <forward_conv2d+0x7c2>
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	4499      	add	r9, r3
 8005ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac6:	ece3 6a01 	vstmia	r3!, {s13}
 8005aca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005acc:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d191      	bne.n	80059f8 <forward_conv2d+0x7a4>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f10e 0e04 	add.w	lr, lr, #4
 8005ae4:	459e      	cmp	lr, r3
 8005ae6:	f4ff af7d 	bcc.w	80059e4 <forward_conv2d+0x790>
 8005aea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005aee:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005af6:	440a      	add	r2, r1
 8005af8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8005afc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005b00:	4608      	mov	r0, r1
 8005b02:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005b06:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005b0a:	4410      	add	r0, r2
 8005b0c:	1a8a      	subs	r2, r1, r2
 8005b0e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005b12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005b16:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b22:	f47f aefd 	bne.w	8005920 <forward_conv2d+0x6cc>
 8005b26:	e64f      	b.n	80057c8 <forward_conv2d+0x574>
 8005b28:	2000      	movs	r0, #0
 8005b2a:	e7a9      	b.n	8005a80 <forward_conv2d+0x82c>
 8005b2c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005b30:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b38:	1b19      	subs	r1, r3, r4
 8005b3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b3e:	eef0 3a48 	vmov.f32	s7, s16
 8005b42:	1b1a      	subs	r2, r3, r4
 8005b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b48:	e71c      	b.n	8005984 <forward_conv2d+0x730>
 8005b4a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b50:	460a      	mov	r2, r1
 8005b52:	440b      	add	r3, r1
 8005b54:	e6ec      	b.n	8005930 <forward_conv2d+0x6dc>
 8005b56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8005b58:	2801      	cmp	r0, #1
 8005b5a:	f47f ace1 	bne.w	8005520 <forward_conv2d+0x2cc>
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005b62:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005b66:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b6c:	fb00 4101 	mla	r1, r0, r1, r4
 8005b70:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8005b74:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8005b78:	f080 8191 	bcs.w	8005e9e <forward_conv2d+0xc4a>
 8005b7c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	f43f ae21 	beq.w	80057c8 <forward_conv2d+0x574>
 8005b86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b88:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b92:	667b      	str	r3, [r7, #100]	; 0x64
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b98:	188b      	adds	r3, r1, r2
 8005b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ba0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8133 	beq.w	8005e2a <forward_conv2d+0xbd6>
 8005bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bc8:	ed93 6a00 	vldr	s12, [r3]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 8101 	beq.w	8005dde <forward_conv2d+0xb8a>
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005be4:	eb03 0802 	add.w	r8, r3, r2
 8005be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf8:	673b      	str	r3, [r7, #112]	; 0x70
 8005bfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c02:	f04f 0b00 	mov.w	fp, #0
 8005c06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f2c0 8104 	blt.w	8005e18 <forward_conv2d+0xbc4>
 8005c10:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005c14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c16:	2300      	movs	r3, #0
 8005c18:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8005c1c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8005c20:	eb02 0c04 	add.w	ip, r2, r4
 8005c24:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005c28:	4540      	cmp	r0, r8
 8005c2a:	bf94      	ite	ls
 8005c2c:	ebc3 0300 	rsbls	r3, r3, r0
 8005c30:	ebc3 0308 	rsbhi	r3, r3, r8
 8005c34:	eba2 0903 	sub.w	r9, r2, r3
 8005c38:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005c3c:	1ac4      	subs	r4, r0, r3
 8005c3e:	fb03 f302 	mul.w	r3, r3, r2
 8005c42:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	f340 80e3 	ble.w	8005e12 <forward_conv2d+0xbbe>
 8005c4c:	f023 050f 	bic.w	r5, r3, #15
 8005c50:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8005c54:	1e68      	subs	r0, r5, #1
 8005c56:	0900      	lsrs	r0, r0, #4
 8005c58:	3001      	adds	r0, #1
 8005c5a:	fb06 f204 	mul.w	r2, r6, r4
 8005c5e:	657a      	str	r2, [r7, #84]	; 0x54
 8005c60:	0102      	lsls	r2, r0, #4
 8005c62:	653a      	str	r2, [r7, #80]	; 0x50
 8005c64:	fb06 f909 	mul.w	r9, r6, r9
 8005c68:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8005c6c:	eef0 6a46 	vmov.f32	s13, s12
 8005c70:	f04f 0e00 	mov.w	lr, #0
 8005c74:	4662      	mov	r2, ip
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	f340 80c9 	ble.w	8005e0e <forward_conv2d+0xbba>
 8005c7c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8005c80:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8005c84:	2600      	movs	r6, #0
 8005c86:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8005c8a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8005c8e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8005c92:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8005c96:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 8005c9a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8005c9e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8005ca2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8005ca6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8005caa:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8005cae:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8005cb2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8005cb6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8005cba:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8005cbe:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8005cc2:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8005cc6:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8005cca:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8005cce:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8005cd2:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8005cd6:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 8005cda:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8005cde:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8005ce2:	ed50 3a04 	vldr	s7, [r0, #-16]
 8005ce6:	ed14 4a04 	vldr	s8, [r4, #-16]
 8005cea:	ed50 4a03 	vldr	s9, [r0, #-12]
 8005cee:	ed14 5a03 	vldr	s10, [r4, #-12]
 8005cf2:	ed50 5a02 	vldr	s11, [r0, #-8]
 8005cf6:	ed14 7a02 	vldr	s14, [r4, #-8]
 8005cfa:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8005cfe:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 8005d02:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8005d06:	3610      	adds	r6, #16
 8005d08:	42ae      	cmp	r6, r5
 8005d0a:	ed14 fa01 	vldr	s30, [r4, #-4]
 8005d0e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8005d12:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8005d16:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8005d1a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8005d1e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8005d22:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8005d26:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005d2a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8005d2e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005d32:	eee8 7a80 	vfma.f32	s15, s17, s0
 8005d36:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005d3a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8005d3e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005d42:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005d46:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005d4a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005d4e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8005d52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d56:	db96      	blt.n	8005c86 <forward_conv2d+0xa32>
 8005d58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005d5a:	4451      	add	r1, sl
 8005d5c:	4452      	add	r2, sl
 8005d5e:	4283      	cmp	r3, r0
 8005d60:	dd0f      	ble.n	8005d82 <forward_conv2d+0xb2e>
 8005d62:	4604      	mov	r4, r0
 8005d64:	468c      	mov	ip, r1
 8005d66:	4616      	mov	r6, r2
 8005d68:	ecb6 7a01 	vldmia	r6!, {s14}
 8005d6c:	ecfc 7a01 	vldmia	ip!, {s15}
 8005d70:	3401      	adds	r4, #1
 8005d72:	42a3      	cmp	r3, r4
 8005d74:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d78:	d1f6      	bne.n	8005d68 <forward_conv2d+0xb14>
 8005d7a:	1a18      	subs	r0, r3, r0
 8005d7c:	0080      	lsls	r0, r0, #2
 8005d7e:	4402      	add	r2, r0
 8005d80:	4401      	add	r1, r0
 8005d82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005d84:	4402      	add	r2, r0
 8005d86:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005d8a:	f10e 0e01 	add.w	lr, lr, #1
 8005d8e:	4570      	cmp	r0, lr
 8005d90:	4449      	add	r1, r9
 8005d92:	f47f af70 	bne.w	8005c76 <forward_conv2d+0xa22>
 8005d96:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d9c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005da0:	edc3 6a00 	vstr	s13, [r3]
 8005da4:	4608      	mov	r0, r1
 8005da6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005daa:	440b      	add	r3, r1
 8005dac:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005db0:	673b      	str	r3, [r7, #112]	; 0x70
 8005db2:	4410      	add	r0, r2
 8005db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005db6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8005dba:	4608      	mov	r0, r1
 8005dbc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8005dc0:	4418      	add	r0, r3
 8005dc2:	1acb      	subs	r3, r1, r3
 8005dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005dc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005dcc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8005dd0:	f10b 0b01 	add.w	fp, fp, #1
 8005dd4:	455b      	cmp	r3, fp
 8005dd6:	eba8 0802 	sub.w	r8, r8, r2
 8005dda:	f47f af14 	bne.w	8005c06 <forward_conv2d+0x9b2>
 8005dde:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005de2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005de8:	440a      	add	r2, r1
 8005dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005df2:	3204      	adds	r2, #4
 8005df4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005df8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e04:	f47f aed9 	bne.w	8005bba <forward_conv2d+0x966>
 8005e08:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 8005e0c:	e4dc      	b.n	80057c8 <forward_conv2d+0x574>
 8005e0e:	2000      	movs	r0, #0
 8005e10:	e7a5      	b.n	8005d5e <forward_conv2d+0xb0a>
 8005e12:	eef0 6a46 	vmov.f32	s13, s12
 8005e16:	e7be      	b.n	8005d96 <forward_conv2d+0xb42>
 8005e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e20:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8005e24:	eba8 0303 	sub.w	r3, r8, r3
 8005e28:	e6f6      	b.n	8005c18 <forward_conv2d+0x9c4>
 8005e2a:	eeb0 6a48 	vmov.f32	s12, s16
 8005e2e:	e6d0      	b.n	8005bd2 <forward_conv2d+0x97e>
 8005e30:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005e34:	68ca      	ldr	r2, [r1, #12]
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	f43f aaca 	beq.w	80053d0 <forward_conv2d+0x17c>
 8005e3c:	69b3      	ldr	r3, [r6, #24]
 8005e3e:	8818      	ldrh	r0, [r3, #0]
 8005e40:	2803      	cmp	r0, #3
 8005e42:	f240 819f 	bls.w	8006184 <forward_conv2d+0xf30>
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	b32b      	cbz	r3, 8005e98 <forward_conv2d+0xc44>
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	b31b      	cbz	r3, 8005e98 <forward_conv2d+0xc44>
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	6889      	ldr	r1, [r1, #8]
 8005e54:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8005e5e:	9000      	str	r0, [sp, #0]
 8005e60:	462b      	mov	r3, r5
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff f9a6 	bl	80051b4 <ai_dict_decompress_f32>
 8005e68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	bf18      	it	ne
 8005e70:	4623      	movne	r3, r4
 8005e72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e76:	f7ff baab 	b.w	80053d0 <forward_conv2d+0x17c>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	f000 8185 	beq.w	800618a <forward_conv2d+0xf36>
 8005e80:	6883      	ldr	r3, [r0, #8]
 8005e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e86:	2301      	movs	r3, #1
 8005e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e94:	f7ff ba6d 	b.w	8005372 <forward_conv2d+0x11e>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	deff      	udf	#255	; 0xff
 8005e9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005ea2:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 8005ea6:	320a      	adds	r2, #10
 8005ea8:	f022 0207 	bic.w	r2, r2, #7
 8005eac:	ebad 0d02 	sub.w	sp, sp, r2
 8005eb0:	aa02      	add	r2, sp, #8
 8005eb2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005eb6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005eba:	2a00      	cmp	r2, #0
 8005ebc:	f000 814d 	beq.w	800615a <forward_conv2d+0xf06>
 8005ec0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ec2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
 8005eca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ed6:	4413      	add	r3, r2
 8005ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ee8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005eec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef8:	b13b      	cbz	r3, 8005f0a <forward_conv2d+0xcb6>
 8005efa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005efe:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005f02:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005f06:	f000 fee9 	bl	8006cdc <memcpy>
 8005f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8135 	beq.w	800617e <forward_conv2d+0xf2a>
 8005f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f16:	ed93 6a00 	vldr	s12, [r3]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	673b      	str	r3, [r7, #112]	; 0x70
 8005f1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8101 	beq.w	800612a <forward_conv2d+0xed6>
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f30:	eb03 0802 	add.w	r8, r3, r2
 8005f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f4e:	f04f 0b00 	mov.w	fp, #0
 8005f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f2c0 8108 	blt.w	800616c <forward_conv2d+0xf18>
 8005f5c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f62:	2300      	movs	r3, #0
 8005f64:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8005f68:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8005f6c:	eb02 0c04 	add.w	ip, r2, r4
 8005f70:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005f74:	4540      	cmp	r0, r8
 8005f76:	bf94      	ite	ls
 8005f78:	ebc3 0300 	rsbls	r3, r3, r0
 8005f7c:	ebc3 0308 	rsbhi	r3, r3, r8
 8005f80:	eba2 0903 	sub.w	r9, r2, r3
 8005f84:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005f88:	1ac4      	subs	r4, r0, r3
 8005f8a:	fb03 f302 	mul.w	r3, r3, r2
 8005f8e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	f340 80e7 	ble.w	8006166 <forward_conv2d+0xf12>
 8005f98:	f023 050f 	bic.w	r5, r3, #15
 8005f9c:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8005fa0:	1e68      	subs	r0, r5, #1
 8005fa2:	0900      	lsrs	r0, r0, #4
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	fb06 f204 	mul.w	r2, r6, r4
 8005faa:	653a      	str	r2, [r7, #80]	; 0x50
 8005fac:	0102      	lsls	r2, r0, #4
 8005fae:	633a      	str	r2, [r7, #48]	; 0x30
 8005fb0:	fb06 f909 	mul.w	r9, r6, r9
 8005fb4:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8005fb8:	eef0 6a46 	vmov.f32	s13, s12
 8005fbc:	f04f 0e00 	mov.w	lr, #0
 8005fc0:	4662      	mov	r2, ip
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	f340 80cd 	ble.w	8006162 <forward_conv2d+0xf0e>
 8005fc8:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8005fcc:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 8005fd6:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 8005fda:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8005fde:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8005fe2:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8005fe6:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8005fea:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8005fee:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 8005ff2:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 8005ff6:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 8005ffa:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 8005ffe:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8006002:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8006006:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800600a:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800600e:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8006012:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8006016:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800601a:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800601e:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8006022:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8006026:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800602a:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800602e:	ed54 3a04 	vldr	s7, [r4, #-16]
 8006032:	ed10 4a04 	vldr	s8, [r0, #-16]
 8006036:	ed50 4a03 	vldr	s9, [r0, #-12]
 800603a:	ed14 5a03 	vldr	s10, [r4, #-12]
 800603e:	ed54 5a02 	vldr	s11, [r4, #-8]
 8006042:	ed10 7a02 	vldr	s14, [r0, #-8]
 8006046:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800604a:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800604e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006052:	3610      	adds	r6, #16
 8006054:	42b5      	cmp	r5, r6
 8006056:	ed14 fa01 	vldr	s30, [r4, #-4]
 800605a:	ed50 ea01 	vldr	s29, [r0, #-4]
 800605e:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8006062:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8006066:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800606a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800606e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8006072:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006076:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800607a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800607e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8006082:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006086:	eee1 7a82 	vfma.f32	s15, s3, s4
 800608a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800608e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006092:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006096:	eee5 7a87 	vfma.f32	s15, s11, s14
 800609a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800609e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80060a2:	dc96      	bgt.n	8005fd2 <forward_conv2d+0xd7e>
 80060a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a6:	4451      	add	r1, sl
 80060a8:	4452      	add	r2, sl
 80060aa:	4283      	cmp	r3, r0
 80060ac:	dd0f      	ble.n	80060ce <forward_conv2d+0xe7a>
 80060ae:	4604      	mov	r4, r0
 80060b0:	468c      	mov	ip, r1
 80060b2:	4616      	mov	r6, r2
 80060b4:	ecb6 7a01 	vldmia	r6!, {s14}
 80060b8:	ecfc 7a01 	vldmia	ip!, {s15}
 80060bc:	3401      	adds	r4, #1
 80060be:	42a3      	cmp	r3, r4
 80060c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80060c4:	d1f6      	bne.n	80060b4 <forward_conv2d+0xe60>
 80060c6:	1a18      	subs	r0, r3, r0
 80060c8:	0080      	lsls	r0, r0, #2
 80060ca:	4402      	add	r2, r0
 80060cc:	4401      	add	r1, r0
 80060ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80060d0:	4402      	add	r2, r0
 80060d2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80060d6:	f10e 0e01 	add.w	lr, lr, #1
 80060da:	4570      	cmp	r0, lr
 80060dc:	4449      	add	r1, r9
 80060de:	f47f af70 	bne.w	8005fc2 <forward_conv2d+0xd6e>
 80060e2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80060e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80060ec:	edc3 6a00 	vstr	s13, [r3]
 80060f0:	4608      	mov	r0, r1
 80060f2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80060f6:	440b      	add	r3, r1
 80060f8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80060fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060fe:	4410      	add	r0, r2
 8006100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006102:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8006106:	4608      	mov	r0, r1
 8006108:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800610c:	4418      	add	r0, r3
 800610e:	1acb      	subs	r3, r1, r3
 8006110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006114:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006118:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800611c:	f10b 0b01 	add.w	fp, fp, #1
 8006120:	455b      	cmp	r3, fp
 8006122:	eba8 0802 	sub.w	r8, r8, r2
 8006126:	f47f af14 	bne.w	8005f52 <forward_conv2d+0xcfe>
 800612a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800612e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006136:	440a      	add	r2, r1
 8006138:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800613c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006140:	3204      	adds	r2, #4
 8006142:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8006146:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800614a:	3301      	adds	r3, #1
 800614c:	429a      	cmp	r2, r3
 800614e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006152:	f47f aed0 	bne.w	8005ef6 <forward_conv2d+0xca2>
 8006156:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800615a:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800615e:	f7ff bb33 	b.w	80057c8 <forward_conv2d+0x574>
 8006162:	2000      	movs	r0, #0
 8006164:	e7a1      	b.n	80060aa <forward_conv2d+0xe56>
 8006166:	eef0 6a46 	vmov.f32	s13, s12
 800616a:	e7ba      	b.n	80060e2 <forward_conv2d+0xe8e>
 800616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006170:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006174:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8006178:	eba8 0303 	sub.w	r3, r8, r3
 800617c:	e6f2      	b.n	8005f64 <forward_conv2d+0xd10>
 800617e:	eeb0 6a48 	vmov.f32	s12, s16
 8006182:	e6cc      	b.n	8005f1e <forward_conv2d+0xcca>
 8006184:	2300      	movs	r3, #0
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	deff      	udf	#255	; 0xff
 800618a:	4603      	mov	r3, r0
 800618c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006194:	2301      	movs	r3, #1
 8006196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800619a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800619e:	f7ff b8e8 	b.w	8005372 <forward_conv2d+0x11e>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d0f2      	beq.n	800618c <forward_conv2d+0xf38>
 80061a6:	6882      	ldr	r2, [r0, #8]
 80061a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061ac:	2301      	movs	r3, #1
 80061ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061b2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80061b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061ba:	f7ff b8da 	b.w	8005372 <forward_conv2d+0x11e>
 80061be:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80061c2:	f7ff b8b7 	b.w	8005334 <forward_conv2d+0xe0>
 80061c6:	3318      	adds	r3, #24
 80061c8:	d007      	beq.n	80061da <forward_conv2d+0xf86>
 80061ca:	462a      	mov	r2, r5
 80061cc:	462c      	mov	r4, r5
 80061ce:	462b      	mov	r3, r5
 80061d0:	f7ff b86a 	b.w	80052a8 <forward_conv2d+0x54>
 80061d4:	2300      	movs	r3, #0
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	deff      	udf	#255	; 0xff
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	deff      	udf	#255	; 0xff
 80061de:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 80061e2:	f7ff b850 	b.w	8005286 <forward_conv2d+0x32>
 80061e6:	2300      	movs	r3, #0
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	deff      	udf	#255	; 0xff
 80061ec:	6853      	ldr	r3, [r2, #4]
 80061ee:	deff      	udf	#255	; 0xff
 80061f0:	2200      	movs	r2, #0
 80061f2:	f7ff b858 	b.w	80052a6 <forward_conv2d+0x52>
 80061f6:	bf00      	nop

080061f8 <forward_dense>:
 80061f8:	6983      	ldr	r3, [r0, #24]
 80061fa:	881a      	ldrh	r2, [r3, #0]
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	f000 80b5 	beq.w	800636c <forward_dense+0x174>
 8006202:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006206:	ed2d 8b10 	vpush	{d8-d15}
 800620a:	685f      	ldr	r7, [r3, #4]
 800620c:	687e      	ldr	r6, [r7, #4]
 800620e:	b091      	sub	sp, #68	; 0x44
 8006210:	b106      	cbz	r6, 8006214 <forward_dense+0x1c>
 8006212:	6836      	ldr	r6, [r6, #0]
 8006214:	2a01      	cmp	r2, #1
 8006216:	f240 80a6 	bls.w	8006366 <forward_dense+0x16e>
 800621a:	693d      	ldr	r5, [r7, #16]
 800621c:	b105      	cbz	r5, 8006220 <forward_dense+0x28>
 800621e:	682d      	ldr	r5, [r5, #0]
 8006220:	2a02      	cmp	r2, #2
 8006222:	f000 80a5 	beq.w	8006370 <forward_dense+0x178>
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 821b 	beq.w	8006664 <forward_dense+0x46c>
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	9106      	str	r1, [sp, #24]
 8006232:	f117 0118 	adds.w	r1, r7, #24
 8006236:	f000 80c9 	beq.w	80063cc <forward_dense+0x1d4>
 800623a:	8b39      	ldrh	r1, [r7, #24]
 800623c:	2901      	cmp	r1, #1
 800623e:	f240 820e 	bls.w	800665e <forward_dense+0x466>
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80c4 	beq.w	80063d0 <forward_dense+0x1d8>
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	9307      	str	r3, [sp, #28]
 800624c:	9b06      	ldr	r3, [sp, #24]
 800624e:	68ec      	ldr	r4, [r5, #12]
 8006250:	6998      	ldr	r0, [r3, #24]
 8006252:	68f1      	ldr	r1, [r6, #12]
 8006254:	6803      	ldr	r3, [r0, #0]
 8006256:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800625a:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800625e:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8006262:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8006266:	fa49 f101 	asr.w	r1, r9, r1
 800626a:	910b      	str	r1, [sp, #44]	; 0x2c
 800626c:	2a03      	cmp	r2, #3
 800626e:	fb0e f10c 	mul.w	r1, lr, ip
 8006272:	6864      	ldr	r4, [r4, #4]
 8006274:	9108      	str	r1, [sp, #32]
 8006276:	f000 81de 	beq.w	8006636 <forward_dense+0x43e>
 800627a:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800627c:	b117      	cbz	r7, 8006284 <forward_dense+0x8c>
 800627e:	683f      	ldr	r7, [r7, #0]
 8006280:	b107      	cbz	r7, 8006284 <forward_dense+0x8c>
 8006282:	69bf      	ldr	r7, [r7, #24]
 8006284:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006288:	2b04      	cmp	r3, #4
 800628a:	f000 81d7 	beq.w	800663c <forward_dense+0x444>
 800628e:	2b08      	cmp	r3, #8
 8006290:	f000 81d4 	beq.w	800663c <forward_dense+0x444>
 8006294:	f04f 0a00 	mov.w	sl, #0
 8006298:	69ab      	ldr	r3, [r5, #24]
 800629a:	69b2      	ldr	r2, [r6, #24]
 800629c:	6899      	ldr	r1, [r3, #8]
 800629e:	9b06      	ldr	r3, [sp, #24]
 80062a0:	9104      	str	r1, [sp, #16]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	6897      	ldr	r7, [r2, #8]
 80062a6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80062aa:	00a3      	lsls	r3, r4, #2
 80062ac:	9309      	str	r3, [sp, #36]	; 0x24
 80062ae:	18ce      	adds	r6, r1, r3
 80062b0:	9b08      	ldr	r3, [sp, #32]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d052      	beq.n	800635c <forward_dense+0x164>
 80062b6:	f1a8 0310 	sub.w	r3, r8, #16
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	3301      	adds	r3, #1
 80062be:	019b      	lsls	r3, r3, #6
 80062c0:	930c      	str	r3, [sp, #48]	; 0x30
 80062c2:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80062c6:	930a      	str	r3, [sp, #40]	; 0x28
 80062c8:	2300      	movs	r3, #0
 80062ca:	9305      	str	r3, [sp, #20]
 80062cc:	eddf aace 	vldr	s21, [pc, #824]	; 8006608 <forward_dense+0x410>
 80062d0:	f008 030f 	and.w	r3, r8, #15
 80062d4:	930d      	str	r3, [sp, #52]	; 0x34
 80062d6:	9b06      	ldr	r3, [sp, #24]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	689d      	ldr	r5, [r3, #8]
 80062dc:	9b07      	ldr	r3, [sp, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 818f 	beq.w	8006602 <forward_dense+0x40a>
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	689c      	ldr	r4, [r3, #8]
 80062e8:	9b04      	ldr	r3, [sp, #16]
 80062ea:	f1ba 0f00 	cmp.w	sl, #0
 80062ee:	d071      	beq.n	80063d4 <forward_dense+0x1dc>
 80062f0:	42b3      	cmp	r3, r6
 80062f2:	d229      	bcs.n	8006348 <forward_dense+0x150>
 80062f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062f6:	469b      	mov	fp, r3
 80062f8:	ab0f      	add	r3, sp, #60	; 0x3c
 80062fa:	9303      	str	r3, [sp, #12]
 80062fc:	2a04      	cmp	r2, #4
 80062fe:	4633      	mov	r3, r6
 8006300:	4646      	mov	r6, r8
 8006302:	4698      	mov	r8, r3
 8006304:	d037      	beq.n	8006376 <forward_dense+0x17e>
 8006306:	2c00      	cmp	r4, #0
 8006308:	f000 8180 	beq.w	800660c <forward_dense+0x414>
 800630c:	f8d4 c000 	ldr.w	ip, [r4]
 8006310:	9803      	ldr	r0, [sp, #12]
 8006312:	9600      	str	r6, [sp, #0]
 8006314:	463b      	mov	r3, r7
 8006316:	4629      	mov	r1, r5
 8006318:	4652      	mov	r2, sl
 800631a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800631e:	f7fe fdbd 	bl	8004e9c <ai_dict8_dot_array_f32>
 8006322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006324:	f84b 3b04 	str.w	r3, [fp], #4
 8006328:	45c3      	cmp	fp, r8
 800632a:	f104 0404 	add.w	r4, r4, #4
 800632e:	444d      	add	r5, r9
 8006330:	d3e9      	bcc.n	8006306 <forward_dense+0x10e>
 8006332:	4643      	mov	r3, r8
 8006334:	46b0      	mov	r8, r6
 8006336:	461e      	mov	r6, r3
 8006338:	9a04      	ldr	r2, [sp, #16]
 800633a:	43d3      	mvns	r3, r2
 800633c:	4433      	add	r3, r6
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	3304      	adds	r3, #4
 8006344:	18d3      	adds	r3, r2, r3
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800634a:	9b05      	ldr	r3, [sp, #20]
 800634c:	4417      	add	r7, r2
 800634e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006350:	4416      	add	r6, r2
 8006352:	9a08      	ldr	r2, [sp, #32]
 8006354:	3301      	adds	r3, #1
 8006356:	4293      	cmp	r3, r2
 8006358:	9305      	str	r3, [sp, #20]
 800635a:	d1bc      	bne.n	80062d6 <forward_dense+0xde>
 800635c:	b011      	add	sp, #68	; 0x44
 800635e:	ecbd 8b10 	vpop	{d8-d15}
 8006362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006366:	2300      	movs	r3, #0
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	deff      	udf	#255	; 0xff
 800636c:	6853      	ldr	r3, [r2, #4]
 800636e:	deff      	udf	#255	; 0xff
 8006370:	2300      	movs	r3, #0
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	deff      	udf	#255	; 0xff
 8006376:	b1a4      	cbz	r4, 80063a2 <forward_dense+0x1aa>
 8006378:	f8d4 c000 	ldr.w	ip, [r4]
 800637c:	9803      	ldr	r0, [sp, #12]
 800637e:	9600      	str	r6, [sp, #0]
 8006380:	463b      	mov	r3, r7
 8006382:	4629      	mov	r1, r5
 8006384:	4652      	mov	r2, sl
 8006386:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800638a:	f7fe fe55 	bl	8005038 <ai_dict4_dot_array_f32>
 800638e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006390:	f84b 3b04 	str.w	r3, [fp], #4
 8006394:	45c3      	cmp	fp, r8
 8006396:	f104 0404 	add.w	r4, r4, #4
 800639a:	444d      	add	r5, r9
 800639c:	d2c9      	bcs.n	8006332 <forward_dense+0x13a>
 800639e:	2c00      	cmp	r4, #0
 80063a0:	d1ea      	bne.n	8006378 <forward_dense+0x180>
 80063a2:	4634      	mov	r4, r6
 80063a4:	4646      	mov	r6, r8
 80063a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063aa:	9400      	str	r4, [sp, #0]
 80063ac:	463b      	mov	r3, r7
 80063ae:	4629      	mov	r1, r5
 80063b0:	4652      	mov	r2, sl
 80063b2:	4640      	mov	r0, r8
 80063b4:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80063b8:	f7fe fe3e 	bl	8005038 <ai_dict4_dot_array_f32>
 80063bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063be:	f84b 3b04 	str.w	r3, [fp], #4
 80063c2:	45b3      	cmp	fp, r6
 80063c4:	444d      	add	r5, r9
 80063c6:	d3f0      	bcc.n	80063aa <forward_dense+0x1b2>
 80063c8:	46a0      	mov	r8, r4
 80063ca:	e7b5      	b.n	8006338 <forward_dense+0x140>
 80063cc:	9107      	str	r1, [sp, #28]
 80063ce:	e73d      	b.n	800624c <forward_dense+0x54>
 80063d0:	9307      	str	r3, [sp, #28]
 80063d2:	e73b      	b.n	800624c <forward_dense+0x54>
 80063d4:	42b3      	cmp	r3, r6
 80063d6:	d2b7      	bcs.n	8006348 <forward_dense+0x150>
 80063d8:	4618      	mov	r0, r3
 80063da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063dc:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80063e0:	eb07 0c03 	add.w	ip, r7, r3
 80063e4:	469e      	mov	lr, r3
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	f000 80ff 	beq.w	80065ea <forward_dense+0x3f2>
 80063ec:	f1b8 0f0f 	cmp.w	r8, #15
 80063f0:	edd4 fa00 	vldr	s31, [r4]
 80063f4:	eddf 6a84 	vldr	s13, [pc, #528]	; 8006608 <forward_dense+0x410>
 80063f8:	f104 0404 	add.w	r4, r4, #4
 80063fc:	f240 80fd 	bls.w	80065fa <forward_dense+0x402>
 8006400:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006404:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8006408:	4641      	mov	r1, r8
 800640a:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800640e:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006412:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8006416:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800641a:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800641e:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8006422:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8006426:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800642a:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800642e:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8006432:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8006436:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800643a:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800643e:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8006442:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8006446:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800644a:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800644e:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8006452:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8006456:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800645a:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800645e:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8006462:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8006466:	ed12 4a04 	vldr	s8, [r2, #-16]
 800646a:	ed53 4a04 	vldr	s9, [r3, #-16]
 800646e:	ed13 5a03 	vldr	s10, [r3, #-12]
 8006472:	ed52 5a03 	vldr	s11, [r2, #-12]
 8006476:	ed13 6a02 	vldr	s12, [r3, #-8]
 800647a:	ed12 7a02 	vldr	s14, [r2, #-8]
 800647e:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8006482:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8006486:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800648a:	3910      	subs	r1, #16
 800648c:	290f      	cmp	r1, #15
 800648e:	ed52 ea01 	vldr	s29, [r2, #-4]
 8006492:	ed13 ea01 	vldr	s28, [r3, #-4]
 8006496:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800649a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800649e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80064a2:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80064a6:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80064aa:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80064ae:	eee9 7a89 	vfma.f32	s15, s19, s18
 80064b2:	eee8 7a88 	vfma.f32	s15, s17, s16
 80064b6:	eee0 7a20 	vfma.f32	s15, s0, s1
 80064ba:	eee1 7a21 	vfma.f32	s15, s2, s3
 80064be:	eee2 7a22 	vfma.f32	s15, s4, s5
 80064c2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80064c6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80064ca:	eee5 7a25 	vfma.f32	s15, s10, s11
 80064ce:	eee6 7a07 	vfma.f32	s15, s12, s14
 80064d2:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80064d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80064da:	d896      	bhi.n	800640a <forward_dense+0x212>
 80064dc:	eb05 010e 	add.w	r1, r5, lr
 80064e0:	465b      	mov	r3, fp
 80064e2:	4662      	mov	r2, ip
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d075      	beq.n	80065d4 <forward_dense+0x3dc>
 80064e8:	ed91 7a00 	vldr	s14, [r1]
 80064ec:	edd2 7a00 	vldr	s15, [r2]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80064f6:	d06d      	beq.n	80065d4 <forward_dense+0x3dc>
 80064f8:	ed91 7a01 	vldr	s14, [r1, #4]
 80064fc:	edd2 7a01 	vldr	s15, [r2, #4]
 8006500:	2b02      	cmp	r3, #2
 8006502:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006506:	d065      	beq.n	80065d4 <forward_dense+0x3dc>
 8006508:	ed91 7a02 	vldr	s14, [r1, #8]
 800650c:	edd2 7a02 	vldr	s15, [r2, #8]
 8006510:	2b03      	cmp	r3, #3
 8006512:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006516:	d05d      	beq.n	80065d4 <forward_dense+0x3dc>
 8006518:	ed91 7a03 	vldr	s14, [r1, #12]
 800651c:	edd2 7a03 	vldr	s15, [r2, #12]
 8006520:	2b04      	cmp	r3, #4
 8006522:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006526:	d055      	beq.n	80065d4 <forward_dense+0x3dc>
 8006528:	ed91 7a04 	vldr	s14, [r1, #16]
 800652c:	edd2 7a04 	vldr	s15, [r2, #16]
 8006530:	2b05      	cmp	r3, #5
 8006532:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006536:	d04d      	beq.n	80065d4 <forward_dense+0x3dc>
 8006538:	ed91 7a05 	vldr	s14, [r1, #20]
 800653c:	edd2 7a05 	vldr	s15, [r2, #20]
 8006540:	2b06      	cmp	r3, #6
 8006542:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006546:	d045      	beq.n	80065d4 <forward_dense+0x3dc>
 8006548:	ed91 7a06 	vldr	s14, [r1, #24]
 800654c:	edd2 7a06 	vldr	s15, [r2, #24]
 8006550:	2b07      	cmp	r3, #7
 8006552:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006556:	d03d      	beq.n	80065d4 <forward_dense+0x3dc>
 8006558:	ed91 7a07 	vldr	s14, [r1, #28]
 800655c:	edd2 7a07 	vldr	s15, [r2, #28]
 8006560:	2b08      	cmp	r3, #8
 8006562:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006566:	d035      	beq.n	80065d4 <forward_dense+0x3dc>
 8006568:	ed91 7a08 	vldr	s14, [r1, #32]
 800656c:	edd2 7a08 	vldr	s15, [r2, #32]
 8006570:	2b09      	cmp	r3, #9
 8006572:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006576:	d02d      	beq.n	80065d4 <forward_dense+0x3dc>
 8006578:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800657c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8006580:	2b0a      	cmp	r3, #10
 8006582:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006586:	d025      	beq.n	80065d4 <forward_dense+0x3dc>
 8006588:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800658c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8006590:	2b0b      	cmp	r3, #11
 8006592:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006596:	d01d      	beq.n	80065d4 <forward_dense+0x3dc>
 8006598:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800659c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80065a0:	2b0c      	cmp	r3, #12
 80065a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065a6:	d015      	beq.n	80065d4 <forward_dense+0x3dc>
 80065a8:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80065ac:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80065b0:	2b0d      	cmp	r3, #13
 80065b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065b6:	d00d      	beq.n	80065d4 <forward_dense+0x3dc>
 80065b8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80065bc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80065c0:	2b0e      	cmp	r3, #14
 80065c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065c6:	d005      	beq.n	80065d4 <forward_dense+0x3dc>
 80065c8:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80065cc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80065d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065d4:	444d      	add	r5, r9
 80065d6:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80065da:	ece0 6a01 	vstmia	r0!, {s13}
 80065de:	42b0      	cmp	r0, r6
 80065e0:	f4bf aeaa 	bcs.w	8006338 <forward_dense+0x140>
 80065e4:	2c00      	cmp	r4, #0
 80065e6:	f47f af01 	bne.w	80063ec <forward_dense+0x1f4>
 80065ea:	f1b8 0f0f 	cmp.w	r8, #15
 80065ee:	eef0 fa6a 	vmov.f32	s31, s21
 80065f2:	eddf 6a05 	vldr	s13, [pc, #20]	; 8006608 <forward_dense+0x410>
 80065f6:	f63f af03 	bhi.w	8006400 <forward_dense+0x208>
 80065fa:	4643      	mov	r3, r8
 80065fc:	4629      	mov	r1, r5
 80065fe:	463a      	mov	r2, r7
 8006600:	e770      	b.n	80064e4 <forward_dense+0x2ec>
 8006602:	461c      	mov	r4, r3
 8006604:	e670      	b.n	80062e8 <forward_dense+0xf0>
 8006606:	bf00      	nop
 8006608:	00000000 	.word	0x00000000
 800660c:	4634      	mov	r4, r6
 800660e:	4646      	mov	r6, r8
 8006610:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006614:	9400      	str	r4, [sp, #0]
 8006616:	463b      	mov	r3, r7
 8006618:	4629      	mov	r1, r5
 800661a:	4652      	mov	r2, sl
 800661c:	4640      	mov	r0, r8
 800661e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8006622:	f7fe fc3b 	bl	8004e9c <ai_dict8_dot_array_f32>
 8006626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006628:	f84b 3b04 	str.w	r3, [fp], #4
 800662c:	455e      	cmp	r6, fp
 800662e:	444d      	add	r5, r9
 8006630:	d8f0      	bhi.n	8006614 <forward_dense+0x41c>
 8006632:	46a0      	mov	r8, r4
 8006634:	e680      	b.n	8006338 <forward_dense+0x140>
 8006636:	2300      	movs	r3, #0
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	deff      	udf	#255	; 0xff
 800663c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8006640:	2f00      	cmp	r7, #0
 8006642:	f43f ae29 	beq.w	8006298 <forward_dense+0xa0>
 8006646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800664a:	f000 faf3 	bl	8006c34 <ai_array_get_byte_size>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4602      	mov	r2, r0
 8006652:	4651      	mov	r1, sl
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fb41 	bl	8006cdc <memcpy>
 800665a:	4682      	mov	sl, r0
 800665c:	e61c      	b.n	8006298 <forward_dense+0xa0>
 800665e:	2300      	movs	r3, #0
 8006660:	9307      	str	r3, [sp, #28]
 8006662:	e5f3      	b.n	800624c <forward_dense+0x54>
 8006664:	9306      	str	r3, [sp, #24]
 8006666:	e5e4      	b.n	8006232 <forward_dense+0x3a>

08006668 <nl_func_relu_array_f32>:
 8006668:	b410      	push	{r4}
 800666a:	698c      	ldr	r4, [r1, #24]
 800666c:	6981      	ldr	r1, [r0, #24]
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	6889      	ldr	r1, [r1, #8]
 8006672:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006676:	3a01      	subs	r2, #1
 8006678:	0092      	lsls	r2, r2, #2
 800667a:	189b      	adds	r3, r3, r2
 800667c:	d216      	bcs.n	80066ac <nl_func_relu_array_f32+0x44>
 800667e:	3204      	adds	r2, #4
 8006680:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80066b4 <nl_func_relu_array_f32+0x4c>
 8006684:	4411      	add	r1, r2
 8006686:	3304      	adds	r3, #4
 8006688:	ed53 7a01 	vldr	s15, [r3, #-4]
 800668c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	bfb8      	it	lt
 8006696:	eef0 7a47 	vmovlt.f32	s15, s14
 800669a:	ed61 7a01 	vstmdb	r1!, {s15}
 800669e:	68a0      	ldr	r0, [r4, #8]
 80066a0:	f1a3 0208 	sub.w	r2, r3, #8
 80066a4:	4290      	cmp	r0, r2
 80066a6:	f1a3 0304 	sub.w	r3, r3, #4
 80066aa:	d9ed      	bls.n	8006688 <nl_func_relu_array_f32+0x20>
 80066ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	00000000 	.word	0x00000000

080066b8 <nl_func_sm_array_f32>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	ed2d 8b04 	vpush	{d8-d9}
 80066c0:	b089      	sub	sp, #36	; 0x24
 80066c2:	698f      	ldr	r7, [r1, #24]
 80066c4:	6984      	ldr	r4, [r0, #24]
 80066c6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80066ca:	68bd      	ldr	r5, [r7, #8]
 80066cc:	9402      	str	r4, [sp, #8]
 80066ce:	4626      	mov	r6, r4
 80066d0:	4696      	mov	lr, r2
 80066d2:	eba2 020c 	sub.w	r2, r2, ip
 80066d6:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80066da:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	68b6      	ldr	r6, [r6, #8]
 80066e0:	ebae 0e04 	sub.w	lr, lr, r4
 80066e4:	4295      	cmp	r5, r2
 80066e6:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 80066ea:	d354      	bcc.n	8006796 <nl_func_sm_array_f32+0xde>
 80066ec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80066f0:	f1cc 0200 	rsb	r2, ip, #0
 80066f4:	00a4      	lsls	r4, r4, #2
 80066f6:	e9cd 1006 	strd	r1, r0, [sp, #24]
 80066fa:	9303      	str	r3, [sp, #12]
 80066fc:	9204      	str	r2, [sp, #16]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4262      	negs	r2, r4
 8006702:	9205      	str	r2, [sp, #20]
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800670a:	9b02      	ldr	r3, [sp, #8]
 800670c:	9a07      	ldr	r2, [sp, #28]
 800670e:	60bd      	str	r5, [r7, #8]
 8006710:	609e      	str	r6, [r3, #8]
 8006712:	9b06      	ldr	r3, [sp, #24]
 8006714:	6992      	ldr	r2, [r2, #24]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	6894      	ldr	r4, [r2, #8]
 800671a:	9a03      	ldr	r2, [sp, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2a01      	cmp	r2, #1
 8006720:	ed93 8a00 	vldr	s16, [r3]
 8006724:	d940      	bls.n	80067a8 <nl_func_sm_array_f32+0xf0>
 8006726:	9901      	ldr	r1, [sp, #4]
 8006728:	1d1a      	adds	r2, r3, #4
 800672a:	eb03 0b01 	add.w	fp, r3, r1
 800672e:	ecf2 7a01 	vldmia	r2!, {s15}
 8006732:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673a:	bfb8      	it	lt
 800673c:	eeb0 8a67 	vmovlt.f32	s16, s15
 8006740:	4593      	cmp	fp, r2
 8006742:	d1f4      	bne.n	800672e <nl_func_sm_array_f32+0x76>
 8006744:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80067b4 <nl_func_sm_array_f32+0xfc>
 8006748:	469a      	mov	sl, r3
 800674a:	46a1      	mov	r9, r4
 800674c:	46a0      	mov	r8, r4
 800674e:	ecba 0a01 	vldmia	sl!, {s0}
 8006752:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006756:	f002 ffa7 	bl	80096a8 <expf>
 800675a:	45d3      	cmp	fp, sl
 800675c:	eca8 0a01 	vstmia	r8!, {s0}
 8006760:	ee78 8a80 	vadd.f32	s17, s17, s0
 8006764:	d1f3      	bne.n	800674e <nl_func_sm_array_f32+0x96>
 8006766:	eef5 8a40 	vcmp.f32	s17, #0.0
 800676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676e:	d00b      	beq.n	8006788 <nl_func_sm_array_f32+0xd0>
 8006770:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	441c      	add	r4, r3
 8006778:	edd9 7a00 	vldr	s15, [r9]
 800677c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006780:	ece9 7a01 	vstmia	r9!, {s15}
 8006784:	454c      	cmp	r4, r9
 8006786:	d1f7      	bne.n	8006778 <nl_func_sm_array_f32+0xc0>
 8006788:	9b04      	ldr	r3, [sp, #16]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	441d      	add	r5, r3
 800678e:	9b05      	ldr	r3, [sp, #20]
 8006790:	42aa      	cmp	r2, r5
 8006792:	441e      	add	r6, r3
 8006794:	d9b9      	bls.n	800670a <nl_func_sm_array_f32+0x52>
 8006796:	60ba      	str	r2, [r7, #8]
 8006798:	9a02      	ldr	r2, [sp, #8]
 800679a:	68d3      	ldr	r3, [r2, #12]
 800679c:	6093      	str	r3, [r2, #8]
 800679e:	b009      	add	sp, #36	; 0x24
 80067a0:	ecbd 8b04 	vpop	{d8-d9}
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	d0ed      	beq.n	8006788 <nl_func_sm_array_f32+0xd0>
 80067ac:	9a01      	ldr	r2, [sp, #4]
 80067ae:	eb03 0b02 	add.w	fp, r3, r2
 80067b2:	e7c7      	b.n	8006744 <nl_func_sm_array_f32+0x8c>
 80067b4:	00000000 	.word	0x00000000

080067b8 <nl_func_relu_generic_array_f32>:
 80067b8:	b430      	push	{r4, r5}
 80067ba:	6989      	ldr	r1, [r1, #24]
 80067bc:	6980      	ldr	r0, [r0, #24]
 80067be:	edd3 6a02 	vldr	s13, [r3, #8]
 80067c2:	688c      	ldr	r4, [r1, #8]
 80067c4:	6880      	ldr	r0, [r0, #8]
 80067c6:	ed93 7a00 	vldr	s14, [r3]
 80067ca:	ed93 6a01 	vldr	s12, [r3, #4]
 80067ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80067d2:	3a01      	subs	r2, #1
 80067d4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80067d8:	0092      	lsls	r2, r2, #2
 80067da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067de:	4410      	add	r0, r2
 80067e0:	4422      	add	r2, r4
 80067e2:	d421      	bmi.n	8006828 <nl_func_relu_generic_array_f32+0x70>
 80067e4:	4294      	cmp	r4, r2
 80067e6:	d83d      	bhi.n	8006864 <nl_func_relu_generic_array_f32+0xac>
 80067e8:	1d13      	adds	r3, r2, #4
 80067ea:	1d02      	adds	r2, r0, #4
 80067ec:	e010      	b.n	8006810 <nl_func_relu_generic_array_f32+0x58>
 80067ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80067fa:	d501      	bpl.n	8006800 <nl_func_relu_generic_array_f32+0x48>
 80067fc:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006800:	ed62 7a01 	vstmdb	r2!, {s15}
 8006804:	6888      	ldr	r0, [r1, #8]
 8006806:	f1a3 0408 	sub.w	r4, r3, #8
 800680a:	4284      	cmp	r4, r0
 800680c:	462b      	mov	r3, r5
 800680e:	d329      	bcc.n	8006864 <nl_func_relu_generic_array_f32+0xac>
 8006810:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006814:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681c:	f1a3 0504 	sub.w	r5, r3, #4
 8006820:	d4e5      	bmi.n	80067ee <nl_func_relu_generic_array_f32+0x36>
 8006822:	eef0 7a66 	vmov.f32	s15, s13
 8006826:	e7eb      	b.n	8006800 <nl_func_relu_generic_array_f32+0x48>
 8006828:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006830:	d01a      	beq.n	8006868 <nl_func_relu_generic_array_f32+0xb0>
 8006832:	4294      	cmp	r4, r2
 8006834:	d816      	bhi.n	8006864 <nl_func_relu_generic_array_f32+0xac>
 8006836:	1d13      	adds	r3, r2, #4
 8006838:	1d02      	adds	r2, r0, #4
 800683a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800683e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006846:	f1a3 0408 	sub.w	r4, r3, #8
 800684a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684e:	f1a3 0004 	sub.w	r0, r3, #4
 8006852:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006856:	4623      	mov	r3, r4
 8006858:	d51e      	bpl.n	8006898 <nl_func_relu_generic_array_f32+0xe0>
 800685a:	ed62 6a01 	vstmdb	r2!, {s13}
 800685e:	688b      	ldr	r3, [r1, #8]
 8006860:	42a3      	cmp	r3, r4
 8006862:	d91e      	bls.n	80068a2 <nl_func_relu_generic_array_f32+0xea>
 8006864:	bc30      	pop	{r4, r5}
 8006866:	4770      	bx	lr
 8006868:	4294      	cmp	r4, r2
 800686a:	d8fb      	bhi.n	8006864 <nl_func_relu_generic_array_f32+0xac>
 800686c:	1d13      	adds	r3, r2, #4
 800686e:	2500      	movs	r5, #0
 8006870:	1d02      	adds	r2, r0, #4
 8006872:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800687a:	f1a3 0408 	sub.w	r4, r3, #8
 800687e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006882:	f1a3 0004 	sub.w	r0, r3, #4
 8006886:	4623      	mov	r3, r4
 8006888:	db0d      	blt.n	80068a6 <nl_func_relu_generic_array_f32+0xee>
 800688a:	ed62 7a01 	vstmdb	r2!, {s15}
 800688e:	688b      	ldr	r3, [r1, #8]
 8006890:	42a3      	cmp	r3, r4
 8006892:	d8e7      	bhi.n	8006864 <nl_func_relu_generic_array_f32+0xac>
 8006894:	4603      	mov	r3, r0
 8006896:	e7ec      	b.n	8006872 <nl_func_relu_generic_array_f32+0xba>
 8006898:	ed62 7a01 	vstmdb	r2!, {s15}
 800689c:	688c      	ldr	r4, [r1, #8]
 800689e:	429c      	cmp	r4, r3
 80068a0:	d8e0      	bhi.n	8006864 <nl_func_relu_generic_array_f32+0xac>
 80068a2:	4603      	mov	r3, r0
 80068a4:	e7c9      	b.n	800683a <nl_func_relu_generic_array_f32+0x82>
 80068a6:	f842 5d04 	str.w	r5, [r2, #-4]!
 80068aa:	688c      	ldr	r4, [r1, #8]
 80068ac:	429c      	cmp	r4, r3
 80068ae:	d8d9      	bhi.n	8006864 <nl_func_relu_generic_array_f32+0xac>
 80068b0:	4603      	mov	r3, r0
 80068b2:	e7de      	b.n	8006872 <nl_func_relu_generic_array_f32+0xba>

080068b4 <forward_relu>:
 80068b4:	6982      	ldr	r2, [r0, #24]
 80068b6:	8813      	ldrh	r3, [r2, #0]
 80068b8:	b333      	cbz	r3, 8006908 <forward_relu+0x54>
 80068ba:	6852      	ldr	r2, [r2, #4]
 80068bc:	6851      	ldr	r1, [r2, #4]
 80068be:	b101      	cbz	r1, 80068c2 <forward_relu+0xe>
 80068c0:	6809      	ldr	r1, [r1, #0]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d91d      	bls.n	8006902 <forward_relu+0x4e>
 80068c6:	b4f0      	push	{r4, r5, r6, r7}
 80068c8:	6917      	ldr	r7, [r2, #16]
 80068ca:	b107      	cbz	r7, 80068ce <forward_relu+0x1a>
 80068cc:	683f      	ldr	r7, [r7, #0]
 80068ce:	688c      	ldr	r4, [r1, #8]
 80068d0:	69c3      	ldr	r3, [r0, #28]
 80068d2:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d044      	beq.n	8006964 <forward_relu+0xb0>
 80068da:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80068de:	2d01      	cmp	r5, #1
 80068e0:	d014      	beq.n	800690c <forward_relu+0x58>
 80068e2:	2c00      	cmp	r4, #0
 80068e4:	d074      	beq.n	80069d0 <forward_relu+0x11c>
 80068e6:	68ce      	ldr	r6, [r1, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80068ee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068f2:	42a6      	cmp	r6, r4
 80068f4:	fb05 f202 	mul.w	r2, r5, r2
 80068f8:	d1f9      	bne.n	80068ee <forward_relu+0x3a>
 80068fa:	4638      	mov	r0, r7
 80068fc:	bcf0      	pop	{r4, r5, r6, r7}
 80068fe:	f7ff bf5b 	b.w	80067b8 <nl_func_relu_generic_array_f32>
 8006902:	2300      	movs	r3, #0
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	deff      	udf	#255	; 0xff
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	deff      	udf	#255	; 0xff
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	6988      	ldr	r0, [r1, #24]
 8006910:	6896      	ldr	r6, [r2, #8]
 8006912:	ed93 7a00 	vldr	s14, [r3]
 8006916:	6882      	ldr	r2, [r0, #8]
 8006918:	b184      	cbz	r4, 800693c <forward_relu+0x88>
 800691a:	68cf      	ldr	r7, [r1, #12]
 800691c:	462b      	mov	r3, r5
 800691e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8006922:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8006926:	42a7      	cmp	r7, r4
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	d1f9      	bne.n	8006922 <forward_relu+0x6e>
 800692e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006932:	3b01      	subs	r3, #1
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	18d2      	adds	r2, r2, r3
 8006938:	441e      	add	r6, r3
 800693a:	d23f      	bcs.n	80069bc <forward_relu+0x108>
 800693c:	1d13      	adds	r3, r2, #4
 800693e:	2500      	movs	r5, #0
 8006940:	1d32      	adds	r2, r6, #4
 8006942:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800694a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800694e:	f1a3 0104 	sub.w	r1, r3, #4
 8006952:	d835      	bhi.n	80069c0 <forward_relu+0x10c>
 8006954:	ed62 7a01 	vstmdb	r2!, {s15}
 8006958:	6884      	ldr	r4, [r0, #8]
 800695a:	3b08      	subs	r3, #8
 800695c:	429c      	cmp	r4, r3
 800695e:	d82d      	bhi.n	80069bc <forward_relu+0x108>
 8006960:	460b      	mov	r3, r1
 8006962:	e7ee      	b.n	8006942 <forward_relu+0x8e>
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	698d      	ldr	r5, [r1, #24]
 8006968:	6898      	ldr	r0, [r3, #8]
 800696a:	68ab      	ldr	r3, [r5, #8]
 800696c:	b184      	cbz	r4, 8006990 <forward_relu+0xdc>
 800696e:	68ce      	ldr	r6, [r1, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006976:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800697a:	42a6      	cmp	r6, r4
 800697c:	fb01 f202 	mul.w	r2, r1, r2
 8006980:	d1f9      	bne.n	8006976 <forward_relu+0xc2>
 8006982:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006986:	3a01      	subs	r2, #1
 8006988:	0092      	lsls	r2, r2, #2
 800698a:	189b      	adds	r3, r3, r2
 800698c:	4410      	add	r0, r2
 800698e:	d215      	bcs.n	80069bc <forward_relu+0x108>
 8006990:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80069d4 <forward_relu+0x120>
 8006994:	3304      	adds	r3, #4
 8006996:	1d01      	adds	r1, r0, #4
 8006998:	ed53 7a01 	vldr	s15, [r3, #-4]
 800699c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a4:	bfb8      	it	lt
 80069a6:	eef0 7a47 	vmovlt.f32	s15, s14
 80069aa:	ed61 7a01 	vstmdb	r1!, {s15}
 80069ae:	68a8      	ldr	r0, [r5, #8]
 80069b0:	f1a3 0208 	sub.w	r2, r3, #8
 80069b4:	4290      	cmp	r0, r2
 80069b6:	f1a3 0304 	sub.w	r3, r3, #4
 80069ba:	d9ed      	bls.n	8006998 <forward_relu+0xe4>
 80069bc:	bcf0      	pop	{r4, r5, r6, r7}
 80069be:	4770      	bx	lr
 80069c0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80069c4:	6884      	ldr	r4, [r0, #8]
 80069c6:	3b08      	subs	r3, #8
 80069c8:	429c      	cmp	r4, r3
 80069ca:	d8f7      	bhi.n	80069bc <forward_relu+0x108>
 80069cc:	460b      	mov	r3, r1
 80069ce:	e7b8      	b.n	8006942 <forward_relu+0x8e>
 80069d0:	2201      	movs	r2, #1
 80069d2:	e792      	b.n	80068fa <forward_relu+0x46>
 80069d4:	00000000 	.word	0x00000000

080069d8 <forward_sm>:
 80069d8:	6982      	ldr	r2, [r0, #24]
 80069da:	8813      	ldrh	r3, [r2, #0]
 80069dc:	b32b      	cbz	r3, 8006a2a <forward_sm+0x52>
 80069de:	6852      	ldr	r2, [r2, #4]
 80069e0:	6851      	ldr	r1, [r2, #4]
 80069e2:	b101      	cbz	r1, 80069e6 <forward_sm+0xe>
 80069e4:	6809      	ldr	r1, [r1, #0]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d91c      	bls.n	8006a24 <forward_sm+0x4c>
 80069ea:	6913      	ldr	r3, [r2, #16]
 80069ec:	b1c3      	cbz	r3, 8006a20 <forward_sm+0x48>
 80069ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	688c      	ldr	r4, [r1, #8]
 80069f4:	68c3      	ldr	r3, [r0, #12]
 80069f6:	68ce      	ldr	r6, [r1, #12]
 80069f8:	685f      	ldr	r7, [r3, #4]
 80069fa:	6873      	ldr	r3, [r6, #4]
 80069fc:	0a24      	lsrs	r4, r4, #8
 80069fe:	b083      	sub	sp, #12
 8006a00:	d015      	beq.n	8006a2e <forward_sm+0x56>
 8006a02:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006a06:	2201      	movs	r2, #1
 8006a08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a0c:	42a6      	cmp	r6, r4
 8006a0e:	fb05 f202 	mul.w	r2, r5, r2
 8006a12:	d1f9      	bne.n	8006a08 <forward_sm+0x30>
 8006a14:	e9cd 3700 	strd	r3, r7, [sp]
 8006a18:	f7ff fe4e 	bl	80066b8 <nl_func_sm_array_f32>
 8006a1c:	b003      	add	sp, #12
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	deff      	udf	#255	; 0xff
 8006a24:	2300      	movs	r3, #0
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	deff      	udf	#255	; 0xff
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	deff      	udf	#255	; 0xff
 8006a2e:	2201      	movs	r2, #1
 8006a30:	e9cd 3700 	strd	r3, r7, [sp]
 8006a34:	f7ff fe40 	bl	80066b8 <nl_func_sm_array_f32>
 8006a38:	b003      	add	sp, #12
 8006a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a3c <ai_check_custom_types>:
 8006a3c:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <ai_check_custom_types+0x50>)
 8006a3e:	b082      	sub	sp, #8
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	b118      	cbz	r0, 8006a4e <ai_check_custom_types+0x12>
 8006a46:	7803      	ldrb	r3, [r0, #0]
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d002      	beq.n	8006a52 <ai_check_custom_types+0x16>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	b002      	add	sp, #8
 8006a50:	4770      	bx	lr
 8006a52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <ai_check_custom_types+0x28>
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	f080 0001 	eor.w	r0, r0, #1
 8006a60:	b002      	add	sp, #8
 8006a62:	4770      	bx	lr
 8006a64:	7842      	ldrb	r2, [r0, #1]
 8006a66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	f100 0001 	add.w	r0, r0, #1
 8006a70:	d1f3      	bne.n	8006a5a <ai_check_custom_types+0x1e>
 8006a72:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006a76:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d1ed      	bne.n	8006a5a <ai_check_custom_types+0x1e>
 8006a7e:	7842      	ldrb	r2, [r0, #1]
 8006a80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1e8      	bne.n	8006a5a <ai_check_custom_types+0x1e>
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e7e7      	b.n	8006a5c <ai_check_custom_types+0x20>
 8006a8c:	080099e4 	.word	0x080099e4

08006a90 <ai_layers_init_all>:
 8006a90:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006a92:	b17a      	cbz	r2, 8006ab4 <ai_layers_init_all+0x24>
 8006a94:	6913      	ldr	r3, [r2, #16]
 8006a96:	60d0      	str	r0, [r2, #12]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	f04f 0201 	mov.w	r2, #1
 8006a9e:	d009      	beq.n	8006ab4 <ai_layers_init_all+0x24>
 8006aa0:	b143      	cbz	r3, 8006ab4 <ai_layers_init_all+0x24>
 8006aa2:	6919      	ldr	r1, [r3, #16]
 8006aa4:	60d8      	str	r0, [r3, #12]
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	f102 0201 	add.w	r2, r2, #1
 8006aac:	d002      	beq.n	8006ab4 <ai_layers_init_all+0x24>
 8006aae:	460b      	mov	r3, r1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1f6      	bne.n	8006aa2 <ai_layers_init_all+0x12>
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4770      	bx	lr

08006ab8 <ai_layers_post_init_all>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006abc:	b18c      	cbz	r4, 8006ae2 <ai_layers_post_init_all+0x2a>
 8006abe:	2500      	movs	r5, #0
 8006ac0:	6863      	ldr	r3, [r4, #4]
 8006ac2:	f013 0f01 	tst.w	r3, #1
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	d003      	beq.n	8006ad2 <ai_layers_post_init_all+0x1a>
 8006aca:	6a23      	ldr	r3, [r4, #32]
 8006acc:	b10b      	cbz	r3, 8006ad2 <ai_layers_post_init_all+0x1a>
 8006ace:	4798      	blx	r3
 8006ad0:	3501      	adds	r5, #1
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	d002      	beq.n	8006ade <ai_layers_post_init_all+0x26>
 8006ad8:	461c      	mov	r4, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <ai_layers_post_init_all+0x8>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
 8006ae2:	4625      	mov	r5, r4
 8006ae4:	e7fb      	b.n	8006ade <ai_layers_post_init_all+0x26>
 8006ae6:	bf00      	nop

08006ae8 <ai_layers_forward_all>:
 8006ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aec:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8006aee:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006af0:	4604      	mov	r4, r0
 8006af2:	2f00      	cmp	r7, #0
 8006af4:	d02c      	beq.n	8006b50 <ai_layers_forward_all+0x68>
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	d03f      	beq.n	8006b7a <ai_layers_forward_all+0x92>
 8006afa:	6385      	str	r5, [r0, #56]	; 0x38
 8006afc:	4629      	mov	r1, r5
 8006afe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006b00:	2001      	movs	r0, #1
 8006b02:	47b8      	blx	r7
 8006b04:	2600      	movs	r6, #0
 8006b06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b08:	46b0      	mov	r8, r6
 8006b0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006b0c:	2002      	movs	r0, #2
 8006b0e:	47b8      	blx	r7
 8006b10:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006b12:	696b      	ldr	r3, [r5, #20]
 8006b14:	4628      	mov	r0, r5
 8006b16:	4798      	blx	r3
 8006b18:	692b      	ldr	r3, [r5, #16]
 8006b1a:	429d      	cmp	r5, r3
 8006b1c:	f04f 0003 	mov.w	r0, #3
 8006b20:	4619      	mov	r1, r3
 8006b22:	d009      	beq.n	8006b38 <ai_layers_forward_all+0x50>
 8006b24:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006b28:	47b8      	blx	r7
 8006b2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d1eb      	bne.n	8006b0a <ai_layers_forward_all+0x22>
 8006b32:	4630      	mov	r0, r6
 8006b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b38:	2100      	movs	r1, #0
 8006b3a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8006b3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006b40:	47b8      	blx	r7
 8006b42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b44:	3601      	adds	r6, #1
 8006b46:	2900      	cmp	r1, #0
 8006b48:	d1df      	bne.n	8006b0a <ai_layers_forward_all+0x22>
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b50:	b19d      	cbz	r5, 8006b7a <ai_layers_forward_all+0x92>
 8006b52:	6385      	str	r5, [r0, #56]	; 0x38
 8006b54:	463e      	mov	r6, r7
 8006b56:	696b      	ldr	r3, [r5, #20]
 8006b58:	4628      	mov	r0, r5
 8006b5a:	4798      	blx	r3
 8006b5c:	692b      	ldr	r3, [r5, #16]
 8006b5e:	42ab      	cmp	r3, r5
 8006b60:	f106 0601 	add.w	r6, r6, #1
 8006b64:	d004      	beq.n	8006b70 <ai_layers_forward_all+0x88>
 8006b66:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b68:	461d      	mov	r5, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f3      	bne.n	8006b56 <ai_layers_forward_all+0x6e>
 8006b6e:	e7e0      	b.n	8006b32 <ai_layers_forward_all+0x4a>
 8006b70:	2300      	movs	r3, #0
 8006b72:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b74:	4630      	mov	r0, r6
 8006b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7a:	462e      	mov	r6, r5
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b82:	bf00      	nop

08006b84 <ai_array_to_buffer_fmt>:
 8006b84:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d029      	beq.n	8006be0 <ai_array_to_buffer_fmt+0x5c>
 8006b8c:	4a22      	ldr	r2, [pc, #136]	; (8006c18 <ai_array_to_buffer_fmt+0x94>)
 8006b8e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d010      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006b96:	dd13      	ble.n	8006bc0 <ai_array_to_buffer_fmt+0x3c>
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <ai_array_to_buffer_fmt+0x98>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00c      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006b9e:	dc27      	bgt.n	8006bf0 <ai_array_to_buffer_fmt+0x6c>
 8006ba0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006ba8:	3207      	adds	r2, #7
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006bae:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d000      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006bb6:	2340      	movs	r3, #64	; 0x40
 8006bb8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006bbc:	4318      	orrs	r0, r3
 8006bbe:	4770      	bx	lr
 8006bc0:	4a17      	ldr	r2, [pc, #92]	; (8006c20 <ai_array_to_buffer_fmt+0x9c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d0f8      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006bc6:	dd1e      	ble.n	8006c06 <ai_array_to_buffer_fmt+0x82>
 8006bc8:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <ai_array_to_buffer_fmt+0xa0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d0f4      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006bce:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d0f0      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006bd6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d1eb      	bne.n	8006bb6 <ai_array_to_buffer_fmt+0x32>
 8006bde:	e7eb      	b.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006be0:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <ai_array_to_buffer_fmt+0xa4>)
 8006be2:	4003      	ands	r3, r0
 8006be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006be8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006bec:	4318      	orrs	r0, r3
 8006bee:	4770      	bx	lr
 8006bf0:	4a0e      	ldr	r2, [pc, #56]	; (8006c2c <ai_array_to_buffer_fmt+0xa8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d0e0      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006bf6:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d0dc      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006bfe:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <ai_array_to_buffer_fmt+0xac>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d1d8      	bne.n	8006bb6 <ai_array_to_buffer_fmt+0x32>
 8006c04:	e7d8      	b.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006c06:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d0d4      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d0d0      	beq.n	8006bb8 <ai_array_to_buffer_fmt+0x34>
 8006c16:	e7ce      	b.n	8006bb6 <ai_array_to_buffer_fmt+0x32>
 8006c18:	00060440 	.word	0x00060440
 8006c1c:	00840840 	.word	0x00840840
 8006c20:	00040447 	.word	0x00040447
 8006c24:	0004084f 	.word	0x0004084f
 8006c28:	00803fff 	.word	0x00803fff
 8006c2c:	00841040 	.word	0x00841040
 8006c30:	0084084f 	.word	0x0084084f

08006c34 <ai_array_get_byte_size>:
 8006c34:	b1c1      	cbz	r1, 8006c68 <ai_array_get_byte_size+0x34>
 8006c36:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8006c3a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006c3e:	4413      	add	r3, r2
 8006c40:	fb01 f103 	mul.w	r1, r1, r3
 8006c44:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8006c48:	3107      	adds	r1, #7
 8006c4a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8006c4e:	f021 0107 	bic.w	r1, r1, #7
 8006c52:	2804      	cmp	r0, #4
 8006c54:	fa21 f102 	lsr.w	r1, r1, r2
 8006c58:	d008      	beq.n	8006c6c <ai_array_get_byte_size+0x38>
 8006c5a:	2808      	cmp	r0, #8
 8006c5c:	d101      	bne.n	8006c62 <ai_array_get_byte_size+0x2e>
 8006c5e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8006c62:	3107      	adds	r1, #7
 8006c64:	08c8      	lsrs	r0, r1, #3
 8006c66:	4770      	bx	lr
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4770      	bx	lr
 8006c6c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8006c70:	3107      	adds	r1, #7
 8006c72:	08c8      	lsrs	r0, r1, #3
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop

08006c78 <__errno>:
 8006c78:	4b01      	ldr	r3, [pc, #4]	; (8006c80 <__errno+0x8>)
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	200007ec 	.word	0x200007ec

08006c84 <__libc_init_array>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	4d0d      	ldr	r5, [pc, #52]	; (8006cbc <__libc_init_array+0x38>)
 8006c88:	4c0d      	ldr	r4, [pc, #52]	; (8006cc0 <__libc_init_array+0x3c>)
 8006c8a:	1b64      	subs	r4, r4, r5
 8006c8c:	10a4      	asrs	r4, r4, #2
 8006c8e:	2600      	movs	r6, #0
 8006c90:	42a6      	cmp	r6, r4
 8006c92:	d109      	bne.n	8006ca8 <__libc_init_array+0x24>
 8006c94:	4d0b      	ldr	r5, [pc, #44]	; (8006cc4 <__libc_init_array+0x40>)
 8006c96:	4c0c      	ldr	r4, [pc, #48]	; (8006cc8 <__libc_init_array+0x44>)
 8006c98:	f002 fe26 	bl	80098e8 <_init>
 8006c9c:	1b64      	subs	r4, r4, r5
 8006c9e:	10a4      	asrs	r4, r4, #2
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	42a6      	cmp	r6, r4
 8006ca4:	d105      	bne.n	8006cb2 <__libc_init_array+0x2e>
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cac:	4798      	blx	r3
 8006cae:	3601      	adds	r6, #1
 8006cb0:	e7ee      	b.n	8006c90 <__libc_init_array+0xc>
 8006cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb6:	4798      	blx	r3
 8006cb8:	3601      	adds	r6, #1
 8006cba:	e7f2      	b.n	8006ca2 <__libc_init_array+0x1e>
 8006cbc:	08015b14 	.word	0x08015b14
 8006cc0:	08015b14 	.word	0x08015b14
 8006cc4:	08015b14 	.word	0x08015b14
 8006cc8:	08015b18 	.word	0x08015b18

08006ccc <malloc>:
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <malloc+0xc>)
 8006cce:	4601      	mov	r1, r0
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	f000 b869 	b.w	8006da8 <_malloc_r>
 8006cd6:	bf00      	nop
 8006cd8:	200007ec 	.word	0x200007ec

08006cdc <memcpy>:
 8006cdc:	440a      	add	r2, r1
 8006cde:	4291      	cmp	r1, r2
 8006ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ce4:	d100      	bne.n	8006ce8 <memcpy+0xc>
 8006ce6:	4770      	bx	lr
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf2:	4291      	cmp	r1, r2
 8006cf4:	d1f9      	bne.n	8006cea <memcpy+0xe>
 8006cf6:	bd10      	pop	{r4, pc}

08006cf8 <memset>:
 8006cf8:	4402      	add	r2, r0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d100      	bne.n	8006d02 <memset+0xa>
 8006d00:	4770      	bx	lr
 8006d02:	f803 1b01 	strb.w	r1, [r3], #1
 8006d06:	e7f9      	b.n	8006cfc <memset+0x4>

08006d08 <_free_r>:
 8006d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d0a:	2900      	cmp	r1, #0
 8006d0c:	d048      	beq.n	8006da0 <_free_r+0x98>
 8006d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d12:	9001      	str	r0, [sp, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f1a1 0404 	sub.w	r4, r1, #4
 8006d1a:	bfb8      	it	lt
 8006d1c:	18e4      	addlt	r4, r4, r3
 8006d1e:	f001 fca5 	bl	800866c <__malloc_lock>
 8006d22:	4a20      	ldr	r2, [pc, #128]	; (8006da4 <_free_r+0x9c>)
 8006d24:	9801      	ldr	r0, [sp, #4]
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	4615      	mov	r5, r2
 8006d2a:	b933      	cbnz	r3, 8006d3a <_free_r+0x32>
 8006d2c:	6063      	str	r3, [r4, #4]
 8006d2e:	6014      	str	r4, [r2, #0]
 8006d30:	b003      	add	sp, #12
 8006d32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d36:	f001 bc9f 	b.w	8008678 <__malloc_unlock>
 8006d3a:	42a3      	cmp	r3, r4
 8006d3c:	d90b      	bls.n	8006d56 <_free_r+0x4e>
 8006d3e:	6821      	ldr	r1, [r4, #0]
 8006d40:	1862      	adds	r2, r4, r1
 8006d42:	4293      	cmp	r3, r2
 8006d44:	bf04      	itt	eq
 8006d46:	681a      	ldreq	r2, [r3, #0]
 8006d48:	685b      	ldreq	r3, [r3, #4]
 8006d4a:	6063      	str	r3, [r4, #4]
 8006d4c:	bf04      	itt	eq
 8006d4e:	1852      	addeq	r2, r2, r1
 8006d50:	6022      	streq	r2, [r4, #0]
 8006d52:	602c      	str	r4, [r5, #0]
 8006d54:	e7ec      	b.n	8006d30 <_free_r+0x28>
 8006d56:	461a      	mov	r2, r3
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	b10b      	cbz	r3, 8006d60 <_free_r+0x58>
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d9fa      	bls.n	8006d56 <_free_r+0x4e>
 8006d60:	6811      	ldr	r1, [r2, #0]
 8006d62:	1855      	adds	r5, r2, r1
 8006d64:	42a5      	cmp	r5, r4
 8006d66:	d10b      	bne.n	8006d80 <_free_r+0x78>
 8006d68:	6824      	ldr	r4, [r4, #0]
 8006d6a:	4421      	add	r1, r4
 8006d6c:	1854      	adds	r4, r2, r1
 8006d6e:	42a3      	cmp	r3, r4
 8006d70:	6011      	str	r1, [r2, #0]
 8006d72:	d1dd      	bne.n	8006d30 <_free_r+0x28>
 8006d74:	681c      	ldr	r4, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	6053      	str	r3, [r2, #4]
 8006d7a:	4421      	add	r1, r4
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	e7d7      	b.n	8006d30 <_free_r+0x28>
 8006d80:	d902      	bls.n	8006d88 <_free_r+0x80>
 8006d82:	230c      	movs	r3, #12
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	e7d3      	b.n	8006d30 <_free_r+0x28>
 8006d88:	6825      	ldr	r5, [r4, #0]
 8006d8a:	1961      	adds	r1, r4, r5
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf04      	itt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	bf04      	itt	eq
 8006d98:	1949      	addeq	r1, r1, r5
 8006d9a:	6021      	streq	r1, [r4, #0]
 8006d9c:	6054      	str	r4, [r2, #4]
 8006d9e:	e7c7      	b.n	8006d30 <_free_r+0x28>
 8006da0:	b003      	add	sp, #12
 8006da2:	bd30      	pop	{r4, r5, pc}
 8006da4:	20000a80 	.word	0x20000a80

08006da8 <_malloc_r>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	1ccd      	adds	r5, r1, #3
 8006dac:	f025 0503 	bic.w	r5, r5, #3
 8006db0:	3508      	adds	r5, #8
 8006db2:	2d0c      	cmp	r5, #12
 8006db4:	bf38      	it	cc
 8006db6:	250c      	movcc	r5, #12
 8006db8:	2d00      	cmp	r5, #0
 8006dba:	4606      	mov	r6, r0
 8006dbc:	db01      	blt.n	8006dc2 <_malloc_r+0x1a>
 8006dbe:	42a9      	cmp	r1, r5
 8006dc0:	d903      	bls.n	8006dca <_malloc_r+0x22>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	6033      	str	r3, [r6, #0]
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dca:	f001 fc4f 	bl	800866c <__malloc_lock>
 8006dce:	4921      	ldr	r1, [pc, #132]	; (8006e54 <_malloc_r+0xac>)
 8006dd0:	680a      	ldr	r2, [r1, #0]
 8006dd2:	4614      	mov	r4, r2
 8006dd4:	b99c      	cbnz	r4, 8006dfe <_malloc_r+0x56>
 8006dd6:	4f20      	ldr	r7, [pc, #128]	; (8006e58 <_malloc_r+0xb0>)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	b923      	cbnz	r3, 8006de6 <_malloc_r+0x3e>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4630      	mov	r0, r6
 8006de0:	f000 fcbe 	bl	8007760 <_sbrk_r>
 8006de4:	6038      	str	r0, [r7, #0]
 8006de6:	4629      	mov	r1, r5
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 fcb9 	bl	8007760 <_sbrk_r>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d123      	bne.n	8006e3a <_malloc_r+0x92>
 8006df2:	230c      	movs	r3, #12
 8006df4:	6033      	str	r3, [r6, #0]
 8006df6:	4630      	mov	r0, r6
 8006df8:	f001 fc3e 	bl	8008678 <__malloc_unlock>
 8006dfc:	e7e3      	b.n	8006dc6 <_malloc_r+0x1e>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	1b5b      	subs	r3, r3, r5
 8006e02:	d417      	bmi.n	8006e34 <_malloc_r+0x8c>
 8006e04:	2b0b      	cmp	r3, #11
 8006e06:	d903      	bls.n	8006e10 <_malloc_r+0x68>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	441c      	add	r4, r3
 8006e0c:	6025      	str	r5, [r4, #0]
 8006e0e:	e004      	b.n	8006e1a <_malloc_r+0x72>
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	42a2      	cmp	r2, r4
 8006e14:	bf0c      	ite	eq
 8006e16:	600b      	streq	r3, [r1, #0]
 8006e18:	6053      	strne	r3, [r2, #4]
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f001 fc2c 	bl	8008678 <__malloc_unlock>
 8006e20:	f104 000b 	add.w	r0, r4, #11
 8006e24:	1d23      	adds	r3, r4, #4
 8006e26:	f020 0007 	bic.w	r0, r0, #7
 8006e2a:	1ac2      	subs	r2, r0, r3
 8006e2c:	d0cc      	beq.n	8006dc8 <_malloc_r+0x20>
 8006e2e:	1a1b      	subs	r3, r3, r0
 8006e30:	50a3      	str	r3, [r4, r2]
 8006e32:	e7c9      	b.n	8006dc8 <_malloc_r+0x20>
 8006e34:	4622      	mov	r2, r4
 8006e36:	6864      	ldr	r4, [r4, #4]
 8006e38:	e7cc      	b.n	8006dd4 <_malloc_r+0x2c>
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0e3      	beq.n	8006e0c <_malloc_r+0x64>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 fc8a 	bl	8007760 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1dd      	bne.n	8006e0c <_malloc_r+0x64>
 8006e50:	e7cf      	b.n	8006df2 <_malloc_r+0x4a>
 8006e52:	bf00      	nop
 8006e54:	20000a80 	.word	0x20000a80
 8006e58:	20000a84 	.word	0x20000a84

08006e5c <__cvt>:
 8006e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	ec55 4b10 	vmov	r4, r5, d0
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	460e      	mov	r6, r1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	bfbb      	ittet	lt
 8006e6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e72:	461d      	movlt	r5, r3
 8006e74:	2300      	movge	r3, #0
 8006e76:	232d      	movlt	r3, #45	; 0x2d
 8006e78:	700b      	strb	r3, [r1, #0]
 8006e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e80:	4691      	mov	r9, r2
 8006e82:	f023 0820 	bic.w	r8, r3, #32
 8006e86:	bfbc      	itt	lt
 8006e88:	4622      	movlt	r2, r4
 8006e8a:	4614      	movlt	r4, r2
 8006e8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e90:	d005      	beq.n	8006e9e <__cvt+0x42>
 8006e92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e96:	d100      	bne.n	8006e9a <__cvt+0x3e>
 8006e98:	3601      	adds	r6, #1
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	e000      	b.n	8006ea0 <__cvt+0x44>
 8006e9e:	2103      	movs	r1, #3
 8006ea0:	ab03      	add	r3, sp, #12
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	ab02      	add	r3, sp, #8
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	ec45 4b10 	vmov	d0, r4, r5
 8006eac:	4653      	mov	r3, sl
 8006eae:	4632      	mov	r2, r6
 8006eb0:	f000 fcf2 	bl	8007898 <_dtoa_r>
 8006eb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006eb8:	4607      	mov	r7, r0
 8006eba:	d102      	bne.n	8006ec2 <__cvt+0x66>
 8006ebc:	f019 0f01 	tst.w	r9, #1
 8006ec0:	d022      	beq.n	8006f08 <__cvt+0xac>
 8006ec2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ec6:	eb07 0906 	add.w	r9, r7, r6
 8006eca:	d110      	bne.n	8006eee <__cvt+0x92>
 8006ecc:	783b      	ldrb	r3, [r7, #0]
 8006ece:	2b30      	cmp	r3, #48	; 0x30
 8006ed0:	d10a      	bne.n	8006ee8 <__cvt+0x8c>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ede:	b918      	cbnz	r0, 8006ee8 <__cvt+0x8c>
 8006ee0:	f1c6 0601 	rsb	r6, r6, #1
 8006ee4:	f8ca 6000 	str.w	r6, [sl]
 8006ee8:	f8da 3000 	ldr.w	r3, [sl]
 8006eec:	4499      	add	r9, r3
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f7f9 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006efa:	b108      	cbz	r0, 8006f00 <__cvt+0xa4>
 8006efc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f00:	2230      	movs	r2, #48	; 0x30
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	454b      	cmp	r3, r9
 8006f06:	d307      	bcc.n	8006f18 <__cvt+0xbc>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f0c:	1bdb      	subs	r3, r3, r7
 8006f0e:	4638      	mov	r0, r7
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	b004      	add	sp, #16
 8006f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f18:	1c59      	adds	r1, r3, #1
 8006f1a:	9103      	str	r1, [sp, #12]
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e7f0      	b.n	8006f02 <__cvt+0xa6>

08006f20 <__exponent>:
 8006f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f22:	4603      	mov	r3, r0
 8006f24:	2900      	cmp	r1, #0
 8006f26:	bfb8      	it	lt
 8006f28:	4249      	neglt	r1, r1
 8006f2a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f2e:	bfb4      	ite	lt
 8006f30:	222d      	movlt	r2, #45	; 0x2d
 8006f32:	222b      	movge	r2, #43	; 0x2b
 8006f34:	2909      	cmp	r1, #9
 8006f36:	7042      	strb	r2, [r0, #1]
 8006f38:	dd2a      	ble.n	8006f90 <__exponent+0x70>
 8006f3a:	f10d 0407 	add.w	r4, sp, #7
 8006f3e:	46a4      	mov	ip, r4
 8006f40:	270a      	movs	r7, #10
 8006f42:	46a6      	mov	lr, r4
 8006f44:	460a      	mov	r2, r1
 8006f46:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f4a:	fb07 1516 	mls	r5, r7, r6, r1
 8006f4e:	3530      	adds	r5, #48	; 0x30
 8006f50:	2a63      	cmp	r2, #99	; 0x63
 8006f52:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	dcf1      	bgt.n	8006f42 <__exponent+0x22>
 8006f5e:	3130      	adds	r1, #48	; 0x30
 8006f60:	f1ae 0502 	sub.w	r5, lr, #2
 8006f64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f68:	1c44      	adds	r4, r0, #1
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	4561      	cmp	r1, ip
 8006f6e:	d30a      	bcc.n	8006f86 <__exponent+0x66>
 8006f70:	f10d 0209 	add.w	r2, sp, #9
 8006f74:	eba2 020e 	sub.w	r2, r2, lr
 8006f78:	4565      	cmp	r5, ip
 8006f7a:	bf88      	it	hi
 8006f7c:	2200      	movhi	r2, #0
 8006f7e:	4413      	add	r3, r2
 8006f80:	1a18      	subs	r0, r3, r0
 8006f82:	b003      	add	sp, #12
 8006f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f8e:	e7ed      	b.n	8006f6c <__exponent+0x4c>
 8006f90:	2330      	movs	r3, #48	; 0x30
 8006f92:	3130      	adds	r1, #48	; 0x30
 8006f94:	7083      	strb	r3, [r0, #2]
 8006f96:	70c1      	strb	r1, [r0, #3]
 8006f98:	1d03      	adds	r3, r0, #4
 8006f9a:	e7f1      	b.n	8006f80 <__exponent+0x60>

08006f9c <_printf_float>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	ed2d 8b02 	vpush	{d8}
 8006fa4:	b08d      	sub	sp, #52	; 0x34
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fac:	4616      	mov	r6, r2
 8006fae:	461f      	mov	r7, r3
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	f001 fb53 	bl	800865c <_localeconv_r>
 8006fb6:	f8d0 a000 	ldr.w	sl, [r0]
 8006fba:	4650      	mov	r0, sl
 8006fbc:	f7f9 f908 	bl	80001d0 <strlen>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	9305      	str	r3, [sp, #20]
 8006fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006fd0:	3307      	adds	r3, #7
 8006fd2:	f023 0307 	bic.w	r3, r3, #7
 8006fd6:	f103 0208 	add.w	r2, r3, #8
 8006fda:	f8c8 2000 	str.w	r2, [r8]
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006fe6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006fea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fee:	9307      	str	r3, [sp, #28]
 8006ff0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ff4:	ee08 0a10 	vmov	s16, r0
 8006ff8:	4b9f      	ldr	r3, [pc, #636]	; (8007278 <_printf_float+0x2dc>)
 8006ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8007002:	f7f9 fd93 	bl	8000b2c <__aeabi_dcmpun>
 8007006:	bb88      	cbnz	r0, 800706c <_printf_float+0xd0>
 8007008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800700c:	4b9a      	ldr	r3, [pc, #616]	; (8007278 <_printf_float+0x2dc>)
 800700e:	f04f 32ff 	mov.w	r2, #4294967295
 8007012:	f7f9 fd6d 	bl	8000af0 <__aeabi_dcmple>
 8007016:	bb48      	cbnz	r0, 800706c <_printf_float+0xd0>
 8007018:	2200      	movs	r2, #0
 800701a:	2300      	movs	r3, #0
 800701c:	4640      	mov	r0, r8
 800701e:	4649      	mov	r1, r9
 8007020:	f7f9 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8007024:	b110      	cbz	r0, 800702c <_printf_float+0x90>
 8007026:	232d      	movs	r3, #45	; 0x2d
 8007028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800702c:	4b93      	ldr	r3, [pc, #588]	; (800727c <_printf_float+0x2e0>)
 800702e:	4894      	ldr	r0, [pc, #592]	; (8007280 <_printf_float+0x2e4>)
 8007030:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007034:	bf94      	ite	ls
 8007036:	4698      	movls	r8, r3
 8007038:	4680      	movhi	r8, r0
 800703a:	2303      	movs	r3, #3
 800703c:	6123      	str	r3, [r4, #16]
 800703e:	9b05      	ldr	r3, [sp, #20]
 8007040:	f023 0204 	bic.w	r2, r3, #4
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	f04f 0900 	mov.w	r9, #0
 800704a:	9700      	str	r7, [sp, #0]
 800704c:	4633      	mov	r3, r6
 800704e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007050:	4621      	mov	r1, r4
 8007052:	4628      	mov	r0, r5
 8007054:	f000 f9d8 	bl	8007408 <_printf_common>
 8007058:	3001      	adds	r0, #1
 800705a:	f040 8090 	bne.w	800717e <_printf_float+0x1e2>
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	b00d      	add	sp, #52	; 0x34
 8007064:	ecbd 8b02 	vpop	{d8}
 8007068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	4640      	mov	r0, r8
 8007072:	4649      	mov	r1, r9
 8007074:	f7f9 fd5a 	bl	8000b2c <__aeabi_dcmpun>
 8007078:	b140      	cbz	r0, 800708c <_printf_float+0xf0>
 800707a:	464b      	mov	r3, r9
 800707c:	2b00      	cmp	r3, #0
 800707e:	bfbc      	itt	lt
 8007080:	232d      	movlt	r3, #45	; 0x2d
 8007082:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007086:	487f      	ldr	r0, [pc, #508]	; (8007284 <_printf_float+0x2e8>)
 8007088:	4b7f      	ldr	r3, [pc, #508]	; (8007288 <_printf_float+0x2ec>)
 800708a:	e7d1      	b.n	8007030 <_printf_float+0x94>
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007092:	9206      	str	r2, [sp, #24]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	d13f      	bne.n	8007118 <_printf_float+0x17c>
 8007098:	2306      	movs	r3, #6
 800709a:	6063      	str	r3, [r4, #4]
 800709c:	9b05      	ldr	r3, [sp, #20]
 800709e:	6861      	ldr	r1, [r4, #4]
 80070a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070a4:	2300      	movs	r3, #0
 80070a6:	9303      	str	r3, [sp, #12]
 80070a8:	ab0a      	add	r3, sp, #40	; 0x28
 80070aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070ae:	ab09      	add	r3, sp, #36	; 0x24
 80070b0:	ec49 8b10 	vmov	d0, r8, r9
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	6022      	str	r2, [r4, #0]
 80070b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070bc:	4628      	mov	r0, r5
 80070be:	f7ff fecd 	bl	8006e5c <__cvt>
 80070c2:	9b06      	ldr	r3, [sp, #24]
 80070c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070c6:	2b47      	cmp	r3, #71	; 0x47
 80070c8:	4680      	mov	r8, r0
 80070ca:	d108      	bne.n	80070de <_printf_float+0x142>
 80070cc:	1cc8      	adds	r0, r1, #3
 80070ce:	db02      	blt.n	80070d6 <_printf_float+0x13a>
 80070d0:	6863      	ldr	r3, [r4, #4]
 80070d2:	4299      	cmp	r1, r3
 80070d4:	dd41      	ble.n	800715a <_printf_float+0x1be>
 80070d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80070da:	fa5f fb8b 	uxtb.w	fp, fp
 80070de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070e2:	d820      	bhi.n	8007126 <_printf_float+0x18a>
 80070e4:	3901      	subs	r1, #1
 80070e6:	465a      	mov	r2, fp
 80070e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070ec:	9109      	str	r1, [sp, #36]	; 0x24
 80070ee:	f7ff ff17 	bl	8006f20 <__exponent>
 80070f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f4:	1813      	adds	r3, r2, r0
 80070f6:	2a01      	cmp	r2, #1
 80070f8:	4681      	mov	r9, r0
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	dc02      	bgt.n	8007104 <_printf_float+0x168>
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	07d2      	lsls	r2, r2, #31
 8007102:	d501      	bpl.n	8007108 <_printf_float+0x16c>
 8007104:	3301      	adds	r3, #1
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800710c:	2b00      	cmp	r3, #0
 800710e:	d09c      	beq.n	800704a <_printf_float+0xae>
 8007110:	232d      	movs	r3, #45	; 0x2d
 8007112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007116:	e798      	b.n	800704a <_printf_float+0xae>
 8007118:	9a06      	ldr	r2, [sp, #24]
 800711a:	2a47      	cmp	r2, #71	; 0x47
 800711c:	d1be      	bne.n	800709c <_printf_float+0x100>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1bc      	bne.n	800709c <_printf_float+0x100>
 8007122:	2301      	movs	r3, #1
 8007124:	e7b9      	b.n	800709a <_printf_float+0xfe>
 8007126:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800712a:	d118      	bne.n	800715e <_printf_float+0x1c2>
 800712c:	2900      	cmp	r1, #0
 800712e:	6863      	ldr	r3, [r4, #4]
 8007130:	dd0b      	ble.n	800714a <_printf_float+0x1ae>
 8007132:	6121      	str	r1, [r4, #16]
 8007134:	b913      	cbnz	r3, 800713c <_printf_float+0x1a0>
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	07d0      	lsls	r0, r2, #31
 800713a:	d502      	bpl.n	8007142 <_printf_float+0x1a6>
 800713c:	3301      	adds	r3, #1
 800713e:	440b      	add	r3, r1
 8007140:	6123      	str	r3, [r4, #16]
 8007142:	65a1      	str	r1, [r4, #88]	; 0x58
 8007144:	f04f 0900 	mov.w	r9, #0
 8007148:	e7de      	b.n	8007108 <_printf_float+0x16c>
 800714a:	b913      	cbnz	r3, 8007152 <_printf_float+0x1b6>
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	07d2      	lsls	r2, r2, #31
 8007150:	d501      	bpl.n	8007156 <_printf_float+0x1ba>
 8007152:	3302      	adds	r3, #2
 8007154:	e7f4      	b.n	8007140 <_printf_float+0x1a4>
 8007156:	2301      	movs	r3, #1
 8007158:	e7f2      	b.n	8007140 <_printf_float+0x1a4>
 800715a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800715e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007160:	4299      	cmp	r1, r3
 8007162:	db05      	blt.n	8007170 <_printf_float+0x1d4>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	6121      	str	r1, [r4, #16]
 8007168:	07d8      	lsls	r0, r3, #31
 800716a:	d5ea      	bpl.n	8007142 <_printf_float+0x1a6>
 800716c:	1c4b      	adds	r3, r1, #1
 800716e:	e7e7      	b.n	8007140 <_printf_float+0x1a4>
 8007170:	2900      	cmp	r1, #0
 8007172:	bfd4      	ite	le
 8007174:	f1c1 0202 	rsble	r2, r1, #2
 8007178:	2201      	movgt	r2, #1
 800717a:	4413      	add	r3, r2
 800717c:	e7e0      	b.n	8007140 <_printf_float+0x1a4>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	055a      	lsls	r2, r3, #21
 8007182:	d407      	bmi.n	8007194 <_printf_float+0x1f8>
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	4642      	mov	r2, r8
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	d12c      	bne.n	80071ec <_printf_float+0x250>
 8007192:	e764      	b.n	800705e <_printf_float+0xc2>
 8007194:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007198:	f240 80e0 	bls.w	800735c <_printf_float+0x3c0>
 800719c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071a0:	2200      	movs	r2, #0
 80071a2:	2300      	movs	r3, #0
 80071a4:	f7f9 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d034      	beq.n	8007216 <_printf_float+0x27a>
 80071ac:	4a37      	ldr	r2, [pc, #220]	; (800728c <_printf_float+0x2f0>)
 80071ae:	2301      	movs	r3, #1
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f af51 	beq.w	800705e <_printf_float+0xc2>
 80071bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071c0:	429a      	cmp	r2, r3
 80071c2:	db02      	blt.n	80071ca <_printf_float+0x22e>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	07d8      	lsls	r0, r3, #31
 80071c8:	d510      	bpl.n	80071ec <_printf_float+0x250>
 80071ca:	ee18 3a10 	vmov	r3, s16
 80071ce:	4652      	mov	r2, sl
 80071d0:	4631      	mov	r1, r6
 80071d2:	4628      	mov	r0, r5
 80071d4:	47b8      	blx	r7
 80071d6:	3001      	adds	r0, #1
 80071d8:	f43f af41 	beq.w	800705e <_printf_float+0xc2>
 80071dc:	f04f 0800 	mov.w	r8, #0
 80071e0:	f104 091a 	add.w	r9, r4, #26
 80071e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e6:	3b01      	subs	r3, #1
 80071e8:	4543      	cmp	r3, r8
 80071ea:	dc09      	bgt.n	8007200 <_printf_float+0x264>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	079b      	lsls	r3, r3, #30
 80071f0:	f100 8105 	bmi.w	80073fe <_printf_float+0x462>
 80071f4:	68e0      	ldr	r0, [r4, #12]
 80071f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f8:	4298      	cmp	r0, r3
 80071fa:	bfb8      	it	lt
 80071fc:	4618      	movlt	r0, r3
 80071fe:	e730      	b.n	8007062 <_printf_float+0xc6>
 8007200:	2301      	movs	r3, #1
 8007202:	464a      	mov	r2, r9
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	f43f af27 	beq.w	800705e <_printf_float+0xc2>
 8007210:	f108 0801 	add.w	r8, r8, #1
 8007214:	e7e6      	b.n	80071e4 <_printf_float+0x248>
 8007216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	dc39      	bgt.n	8007290 <_printf_float+0x2f4>
 800721c:	4a1b      	ldr	r2, [pc, #108]	; (800728c <_printf_float+0x2f0>)
 800721e:	2301      	movs	r3, #1
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f af19 	beq.w	800705e <_printf_float+0xc2>
 800722c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007230:	4313      	orrs	r3, r2
 8007232:	d102      	bne.n	800723a <_printf_float+0x29e>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	07d9      	lsls	r1, r3, #31
 8007238:	d5d8      	bpl.n	80071ec <_printf_float+0x250>
 800723a:	ee18 3a10 	vmov	r3, s16
 800723e:	4652      	mov	r2, sl
 8007240:	4631      	mov	r1, r6
 8007242:	4628      	mov	r0, r5
 8007244:	47b8      	blx	r7
 8007246:	3001      	adds	r0, #1
 8007248:	f43f af09 	beq.w	800705e <_printf_float+0xc2>
 800724c:	f04f 0900 	mov.w	r9, #0
 8007250:	f104 0a1a 	add.w	sl, r4, #26
 8007254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007256:	425b      	negs	r3, r3
 8007258:	454b      	cmp	r3, r9
 800725a:	dc01      	bgt.n	8007260 <_printf_float+0x2c4>
 800725c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725e:	e792      	b.n	8007186 <_printf_float+0x1ea>
 8007260:	2301      	movs	r3, #1
 8007262:	4652      	mov	r2, sl
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f aef7 	beq.w	800705e <_printf_float+0xc2>
 8007270:	f109 0901 	add.w	r9, r9, #1
 8007274:	e7ee      	b.n	8007254 <_printf_float+0x2b8>
 8007276:	bf00      	nop
 8007278:	7fefffff 	.word	0x7fefffff
 800727c:	08015720 	.word	0x08015720
 8007280:	08015724 	.word	0x08015724
 8007284:	0801572c 	.word	0x0801572c
 8007288:	08015728 	.word	0x08015728
 800728c:	08015730 	.word	0x08015730
 8007290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007292:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007294:	429a      	cmp	r2, r3
 8007296:	bfa8      	it	ge
 8007298:	461a      	movge	r2, r3
 800729a:	2a00      	cmp	r2, #0
 800729c:	4691      	mov	r9, r2
 800729e:	dc37      	bgt.n	8007310 <_printf_float+0x374>
 80072a0:	f04f 0b00 	mov.w	fp, #0
 80072a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072a8:	f104 021a 	add.w	r2, r4, #26
 80072ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072ae:	9305      	str	r3, [sp, #20]
 80072b0:	eba3 0309 	sub.w	r3, r3, r9
 80072b4:	455b      	cmp	r3, fp
 80072b6:	dc33      	bgt.n	8007320 <_printf_float+0x384>
 80072b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072bc:	429a      	cmp	r2, r3
 80072be:	db3b      	blt.n	8007338 <_printf_float+0x39c>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	07da      	lsls	r2, r3, #31
 80072c4:	d438      	bmi.n	8007338 <_printf_float+0x39c>
 80072c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c8:	9b05      	ldr	r3, [sp, #20]
 80072ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	eba2 0901 	sub.w	r9, r2, r1
 80072d2:	4599      	cmp	r9, r3
 80072d4:	bfa8      	it	ge
 80072d6:	4699      	movge	r9, r3
 80072d8:	f1b9 0f00 	cmp.w	r9, #0
 80072dc:	dc35      	bgt.n	800734a <_printf_float+0x3ae>
 80072de:	f04f 0800 	mov.w	r8, #0
 80072e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e6:	f104 0a1a 	add.w	sl, r4, #26
 80072ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	eba3 0309 	sub.w	r3, r3, r9
 80072f4:	4543      	cmp	r3, r8
 80072f6:	f77f af79 	ble.w	80071ec <_printf_float+0x250>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4652      	mov	r2, sl
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	f43f aeaa 	beq.w	800705e <_printf_float+0xc2>
 800730a:	f108 0801 	add.w	r8, r8, #1
 800730e:	e7ec      	b.n	80072ea <_printf_float+0x34e>
 8007310:	4613      	mov	r3, r2
 8007312:	4631      	mov	r1, r6
 8007314:	4642      	mov	r2, r8
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	d1c0      	bne.n	80072a0 <_printf_float+0x304>
 800731e:	e69e      	b.n	800705e <_printf_float+0xc2>
 8007320:	2301      	movs	r3, #1
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	9205      	str	r2, [sp, #20]
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f ae97 	beq.w	800705e <_printf_float+0xc2>
 8007330:	9a05      	ldr	r2, [sp, #20]
 8007332:	f10b 0b01 	add.w	fp, fp, #1
 8007336:	e7b9      	b.n	80072ac <_printf_float+0x310>
 8007338:	ee18 3a10 	vmov	r3, s16
 800733c:	4652      	mov	r2, sl
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	d1be      	bne.n	80072c6 <_printf_float+0x32a>
 8007348:	e689      	b.n	800705e <_printf_float+0xc2>
 800734a:	9a05      	ldr	r2, [sp, #20]
 800734c:	464b      	mov	r3, r9
 800734e:	4442      	add	r2, r8
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	d1c1      	bne.n	80072de <_printf_float+0x342>
 800735a:	e680      	b.n	800705e <_printf_float+0xc2>
 800735c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800735e:	2a01      	cmp	r2, #1
 8007360:	dc01      	bgt.n	8007366 <_printf_float+0x3ca>
 8007362:	07db      	lsls	r3, r3, #31
 8007364:	d538      	bpl.n	80073d8 <_printf_float+0x43c>
 8007366:	2301      	movs	r3, #1
 8007368:	4642      	mov	r2, r8
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f ae74 	beq.w	800705e <_printf_float+0xc2>
 8007376:	ee18 3a10 	vmov	r3, s16
 800737a:	4652      	mov	r2, sl
 800737c:	4631      	mov	r1, r6
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	f43f ae6b 	beq.w	800705e <_printf_float+0xc2>
 8007388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800738c:	2200      	movs	r2, #0
 800738e:	2300      	movs	r3, #0
 8007390:	f7f9 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007394:	b9d8      	cbnz	r0, 80073ce <_printf_float+0x432>
 8007396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007398:	f108 0201 	add.w	r2, r8, #1
 800739c:	3b01      	subs	r3, #1
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	d10e      	bne.n	80073c6 <_printf_float+0x42a>
 80073a8:	e659      	b.n	800705e <_printf_float+0xc2>
 80073aa:	2301      	movs	r3, #1
 80073ac:	4652      	mov	r2, sl
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	f43f ae52 	beq.w	800705e <_printf_float+0xc2>
 80073ba:	f108 0801 	add.w	r8, r8, #1
 80073be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c0:	3b01      	subs	r3, #1
 80073c2:	4543      	cmp	r3, r8
 80073c4:	dcf1      	bgt.n	80073aa <_printf_float+0x40e>
 80073c6:	464b      	mov	r3, r9
 80073c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073cc:	e6dc      	b.n	8007188 <_printf_float+0x1ec>
 80073ce:	f04f 0800 	mov.w	r8, #0
 80073d2:	f104 0a1a 	add.w	sl, r4, #26
 80073d6:	e7f2      	b.n	80073be <_printf_float+0x422>
 80073d8:	2301      	movs	r3, #1
 80073da:	4642      	mov	r2, r8
 80073dc:	e7df      	b.n	800739e <_printf_float+0x402>
 80073de:	2301      	movs	r3, #1
 80073e0:	464a      	mov	r2, r9
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f ae38 	beq.w	800705e <_printf_float+0xc2>
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	68e3      	ldr	r3, [r4, #12]
 80073f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073f6:	1a5b      	subs	r3, r3, r1
 80073f8:	4543      	cmp	r3, r8
 80073fa:	dcf0      	bgt.n	80073de <_printf_float+0x442>
 80073fc:	e6fa      	b.n	80071f4 <_printf_float+0x258>
 80073fe:	f04f 0800 	mov.w	r8, #0
 8007402:	f104 0919 	add.w	r9, r4, #25
 8007406:	e7f4      	b.n	80073f2 <_printf_float+0x456>

08007408 <_printf_common>:
 8007408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	4616      	mov	r6, r2
 800740e:	4699      	mov	r9, r3
 8007410:	688a      	ldr	r2, [r1, #8]
 8007412:	690b      	ldr	r3, [r1, #16]
 8007414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007418:	4293      	cmp	r3, r2
 800741a:	bfb8      	it	lt
 800741c:	4613      	movlt	r3, r2
 800741e:	6033      	str	r3, [r6, #0]
 8007420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007424:	4607      	mov	r7, r0
 8007426:	460c      	mov	r4, r1
 8007428:	b10a      	cbz	r2, 800742e <_printf_common+0x26>
 800742a:	3301      	adds	r3, #1
 800742c:	6033      	str	r3, [r6, #0]
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	0699      	lsls	r1, r3, #26
 8007432:	bf42      	ittt	mi
 8007434:	6833      	ldrmi	r3, [r6, #0]
 8007436:	3302      	addmi	r3, #2
 8007438:	6033      	strmi	r3, [r6, #0]
 800743a:	6825      	ldr	r5, [r4, #0]
 800743c:	f015 0506 	ands.w	r5, r5, #6
 8007440:	d106      	bne.n	8007450 <_printf_common+0x48>
 8007442:	f104 0a19 	add.w	sl, r4, #25
 8007446:	68e3      	ldr	r3, [r4, #12]
 8007448:	6832      	ldr	r2, [r6, #0]
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	42ab      	cmp	r3, r5
 800744e:	dc26      	bgt.n	800749e <_printf_common+0x96>
 8007450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007454:	1e13      	subs	r3, r2, #0
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	bf18      	it	ne
 800745a:	2301      	movne	r3, #1
 800745c:	0692      	lsls	r2, r2, #26
 800745e:	d42b      	bmi.n	80074b8 <_printf_common+0xb0>
 8007460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007464:	4649      	mov	r1, r9
 8007466:	4638      	mov	r0, r7
 8007468:	47c0      	blx	r8
 800746a:	3001      	adds	r0, #1
 800746c:	d01e      	beq.n	80074ac <_printf_common+0xa4>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	68e5      	ldr	r5, [r4, #12]
 8007472:	6832      	ldr	r2, [r6, #0]
 8007474:	f003 0306 	and.w	r3, r3, #6
 8007478:	2b04      	cmp	r3, #4
 800747a:	bf08      	it	eq
 800747c:	1aad      	subeq	r5, r5, r2
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	6922      	ldr	r2, [r4, #16]
 8007482:	bf0c      	ite	eq
 8007484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007488:	2500      	movne	r5, #0
 800748a:	4293      	cmp	r3, r2
 800748c:	bfc4      	itt	gt
 800748e:	1a9b      	subgt	r3, r3, r2
 8007490:	18ed      	addgt	r5, r5, r3
 8007492:	2600      	movs	r6, #0
 8007494:	341a      	adds	r4, #26
 8007496:	42b5      	cmp	r5, r6
 8007498:	d11a      	bne.n	80074d0 <_printf_common+0xc8>
 800749a:	2000      	movs	r0, #0
 800749c:	e008      	b.n	80074b0 <_printf_common+0xa8>
 800749e:	2301      	movs	r3, #1
 80074a0:	4652      	mov	r2, sl
 80074a2:	4649      	mov	r1, r9
 80074a4:	4638      	mov	r0, r7
 80074a6:	47c0      	blx	r8
 80074a8:	3001      	adds	r0, #1
 80074aa:	d103      	bne.n	80074b4 <_printf_common+0xac>
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b4:	3501      	adds	r5, #1
 80074b6:	e7c6      	b.n	8007446 <_printf_common+0x3e>
 80074b8:	18e1      	adds	r1, r4, r3
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	2030      	movs	r0, #48	; 0x30
 80074be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074c2:	4422      	add	r2, r4
 80074c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074cc:	3302      	adds	r3, #2
 80074ce:	e7c7      	b.n	8007460 <_printf_common+0x58>
 80074d0:	2301      	movs	r3, #1
 80074d2:	4622      	mov	r2, r4
 80074d4:	4649      	mov	r1, r9
 80074d6:	4638      	mov	r0, r7
 80074d8:	47c0      	blx	r8
 80074da:	3001      	adds	r0, #1
 80074dc:	d0e6      	beq.n	80074ac <_printf_common+0xa4>
 80074de:	3601      	adds	r6, #1
 80074e0:	e7d9      	b.n	8007496 <_printf_common+0x8e>
	...

080074e4 <_printf_i>:
 80074e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	460c      	mov	r4, r1
 80074ea:	4691      	mov	r9, r2
 80074ec:	7e27      	ldrb	r7, [r4, #24]
 80074ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074f0:	2f78      	cmp	r7, #120	; 0x78
 80074f2:	4680      	mov	r8, r0
 80074f4:	469a      	mov	sl, r3
 80074f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074fa:	d807      	bhi.n	800750c <_printf_i+0x28>
 80074fc:	2f62      	cmp	r7, #98	; 0x62
 80074fe:	d80a      	bhi.n	8007516 <_printf_i+0x32>
 8007500:	2f00      	cmp	r7, #0
 8007502:	f000 80d8 	beq.w	80076b6 <_printf_i+0x1d2>
 8007506:	2f58      	cmp	r7, #88	; 0x58
 8007508:	f000 80a3 	beq.w	8007652 <_printf_i+0x16e>
 800750c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007514:	e03a      	b.n	800758c <_printf_i+0xa8>
 8007516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800751a:	2b15      	cmp	r3, #21
 800751c:	d8f6      	bhi.n	800750c <_printf_i+0x28>
 800751e:	a001      	add	r0, pc, #4	; (adr r0, 8007524 <_printf_i+0x40>)
 8007520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007524:	0800757d 	.word	0x0800757d
 8007528:	08007591 	.word	0x08007591
 800752c:	0800750d 	.word	0x0800750d
 8007530:	0800750d 	.word	0x0800750d
 8007534:	0800750d 	.word	0x0800750d
 8007538:	0800750d 	.word	0x0800750d
 800753c:	08007591 	.word	0x08007591
 8007540:	0800750d 	.word	0x0800750d
 8007544:	0800750d 	.word	0x0800750d
 8007548:	0800750d 	.word	0x0800750d
 800754c:	0800750d 	.word	0x0800750d
 8007550:	0800769d 	.word	0x0800769d
 8007554:	080075c1 	.word	0x080075c1
 8007558:	0800767f 	.word	0x0800767f
 800755c:	0800750d 	.word	0x0800750d
 8007560:	0800750d 	.word	0x0800750d
 8007564:	080076bf 	.word	0x080076bf
 8007568:	0800750d 	.word	0x0800750d
 800756c:	080075c1 	.word	0x080075c1
 8007570:	0800750d 	.word	0x0800750d
 8007574:	0800750d 	.word	0x0800750d
 8007578:	08007687 	.word	0x08007687
 800757c:	680b      	ldr	r3, [r1, #0]
 800757e:	1d1a      	adds	r2, r3, #4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	600a      	str	r2, [r1, #0]
 8007584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800758c:	2301      	movs	r3, #1
 800758e:	e0a3      	b.n	80076d8 <_printf_i+0x1f4>
 8007590:	6825      	ldr	r5, [r4, #0]
 8007592:	6808      	ldr	r0, [r1, #0]
 8007594:	062e      	lsls	r6, r5, #24
 8007596:	f100 0304 	add.w	r3, r0, #4
 800759a:	d50a      	bpl.n	80075b2 <_printf_i+0xce>
 800759c:	6805      	ldr	r5, [r0, #0]
 800759e:	600b      	str	r3, [r1, #0]
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	da03      	bge.n	80075ac <_printf_i+0xc8>
 80075a4:	232d      	movs	r3, #45	; 0x2d
 80075a6:	426d      	negs	r5, r5
 80075a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ac:	485e      	ldr	r0, [pc, #376]	; (8007728 <_printf_i+0x244>)
 80075ae:	230a      	movs	r3, #10
 80075b0:	e019      	b.n	80075e6 <_printf_i+0x102>
 80075b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075b6:	6805      	ldr	r5, [r0, #0]
 80075b8:	600b      	str	r3, [r1, #0]
 80075ba:	bf18      	it	ne
 80075bc:	b22d      	sxthne	r5, r5
 80075be:	e7ef      	b.n	80075a0 <_printf_i+0xbc>
 80075c0:	680b      	ldr	r3, [r1, #0]
 80075c2:	6825      	ldr	r5, [r4, #0]
 80075c4:	1d18      	adds	r0, r3, #4
 80075c6:	6008      	str	r0, [r1, #0]
 80075c8:	0628      	lsls	r0, r5, #24
 80075ca:	d501      	bpl.n	80075d0 <_printf_i+0xec>
 80075cc:	681d      	ldr	r5, [r3, #0]
 80075ce:	e002      	b.n	80075d6 <_printf_i+0xf2>
 80075d0:	0669      	lsls	r1, r5, #25
 80075d2:	d5fb      	bpl.n	80075cc <_printf_i+0xe8>
 80075d4:	881d      	ldrh	r5, [r3, #0]
 80075d6:	4854      	ldr	r0, [pc, #336]	; (8007728 <_printf_i+0x244>)
 80075d8:	2f6f      	cmp	r7, #111	; 0x6f
 80075da:	bf0c      	ite	eq
 80075dc:	2308      	moveq	r3, #8
 80075de:	230a      	movne	r3, #10
 80075e0:	2100      	movs	r1, #0
 80075e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075e6:	6866      	ldr	r6, [r4, #4]
 80075e8:	60a6      	str	r6, [r4, #8]
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	bfa2      	ittt	ge
 80075ee:	6821      	ldrge	r1, [r4, #0]
 80075f0:	f021 0104 	bicge.w	r1, r1, #4
 80075f4:	6021      	strge	r1, [r4, #0]
 80075f6:	b90d      	cbnz	r5, 80075fc <_printf_i+0x118>
 80075f8:	2e00      	cmp	r6, #0
 80075fa:	d04d      	beq.n	8007698 <_printf_i+0x1b4>
 80075fc:	4616      	mov	r6, r2
 80075fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007602:	fb03 5711 	mls	r7, r3, r1, r5
 8007606:	5dc7      	ldrb	r7, [r0, r7]
 8007608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800760c:	462f      	mov	r7, r5
 800760e:	42bb      	cmp	r3, r7
 8007610:	460d      	mov	r5, r1
 8007612:	d9f4      	bls.n	80075fe <_printf_i+0x11a>
 8007614:	2b08      	cmp	r3, #8
 8007616:	d10b      	bne.n	8007630 <_printf_i+0x14c>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	07df      	lsls	r7, r3, #31
 800761c:	d508      	bpl.n	8007630 <_printf_i+0x14c>
 800761e:	6923      	ldr	r3, [r4, #16]
 8007620:	6861      	ldr	r1, [r4, #4]
 8007622:	4299      	cmp	r1, r3
 8007624:	bfde      	ittt	le
 8007626:	2330      	movle	r3, #48	; 0x30
 8007628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800762c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007630:	1b92      	subs	r2, r2, r6
 8007632:	6122      	str	r2, [r4, #16]
 8007634:	f8cd a000 	str.w	sl, [sp]
 8007638:	464b      	mov	r3, r9
 800763a:	aa03      	add	r2, sp, #12
 800763c:	4621      	mov	r1, r4
 800763e:	4640      	mov	r0, r8
 8007640:	f7ff fee2 	bl	8007408 <_printf_common>
 8007644:	3001      	adds	r0, #1
 8007646:	d14c      	bne.n	80076e2 <_printf_i+0x1fe>
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	b004      	add	sp, #16
 800764e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007652:	4835      	ldr	r0, [pc, #212]	; (8007728 <_printf_i+0x244>)
 8007654:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	680e      	ldr	r6, [r1, #0]
 800765c:	061f      	lsls	r7, r3, #24
 800765e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007662:	600e      	str	r6, [r1, #0]
 8007664:	d514      	bpl.n	8007690 <_printf_i+0x1ac>
 8007666:	07d9      	lsls	r1, r3, #31
 8007668:	bf44      	itt	mi
 800766a:	f043 0320 	orrmi.w	r3, r3, #32
 800766e:	6023      	strmi	r3, [r4, #0]
 8007670:	b91d      	cbnz	r5, 800767a <_printf_i+0x196>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	f023 0320 	bic.w	r3, r3, #32
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	2310      	movs	r3, #16
 800767c:	e7b0      	b.n	80075e0 <_printf_i+0xfc>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	f043 0320 	orr.w	r3, r3, #32
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	2378      	movs	r3, #120	; 0x78
 8007688:	4828      	ldr	r0, [pc, #160]	; (800772c <_printf_i+0x248>)
 800768a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800768e:	e7e3      	b.n	8007658 <_printf_i+0x174>
 8007690:	065e      	lsls	r6, r3, #25
 8007692:	bf48      	it	mi
 8007694:	b2ad      	uxthmi	r5, r5
 8007696:	e7e6      	b.n	8007666 <_printf_i+0x182>
 8007698:	4616      	mov	r6, r2
 800769a:	e7bb      	b.n	8007614 <_printf_i+0x130>
 800769c:	680b      	ldr	r3, [r1, #0]
 800769e:	6826      	ldr	r6, [r4, #0]
 80076a0:	6960      	ldr	r0, [r4, #20]
 80076a2:	1d1d      	adds	r5, r3, #4
 80076a4:	600d      	str	r5, [r1, #0]
 80076a6:	0635      	lsls	r5, r6, #24
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	d501      	bpl.n	80076b0 <_printf_i+0x1cc>
 80076ac:	6018      	str	r0, [r3, #0]
 80076ae:	e002      	b.n	80076b6 <_printf_i+0x1d2>
 80076b0:	0671      	lsls	r1, r6, #25
 80076b2:	d5fb      	bpl.n	80076ac <_printf_i+0x1c8>
 80076b4:	8018      	strh	r0, [r3, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	4616      	mov	r6, r2
 80076bc:	e7ba      	b.n	8007634 <_printf_i+0x150>
 80076be:	680b      	ldr	r3, [r1, #0]
 80076c0:	1d1a      	adds	r2, r3, #4
 80076c2:	600a      	str	r2, [r1, #0]
 80076c4:	681e      	ldr	r6, [r3, #0]
 80076c6:	6862      	ldr	r2, [r4, #4]
 80076c8:	2100      	movs	r1, #0
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7f8 fd88 	bl	80001e0 <memchr>
 80076d0:	b108      	cbz	r0, 80076d6 <_printf_i+0x1f2>
 80076d2:	1b80      	subs	r0, r0, r6
 80076d4:	6060      	str	r0, [r4, #4]
 80076d6:	6863      	ldr	r3, [r4, #4]
 80076d8:	6123      	str	r3, [r4, #16]
 80076da:	2300      	movs	r3, #0
 80076dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e0:	e7a8      	b.n	8007634 <_printf_i+0x150>
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	4632      	mov	r2, r6
 80076e6:	4649      	mov	r1, r9
 80076e8:	4640      	mov	r0, r8
 80076ea:	47d0      	blx	sl
 80076ec:	3001      	adds	r0, #1
 80076ee:	d0ab      	beq.n	8007648 <_printf_i+0x164>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	079b      	lsls	r3, r3, #30
 80076f4:	d413      	bmi.n	800771e <_printf_i+0x23a>
 80076f6:	68e0      	ldr	r0, [r4, #12]
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	4298      	cmp	r0, r3
 80076fc:	bfb8      	it	lt
 80076fe:	4618      	movlt	r0, r3
 8007700:	e7a4      	b.n	800764c <_printf_i+0x168>
 8007702:	2301      	movs	r3, #1
 8007704:	4632      	mov	r2, r6
 8007706:	4649      	mov	r1, r9
 8007708:	4640      	mov	r0, r8
 800770a:	47d0      	blx	sl
 800770c:	3001      	adds	r0, #1
 800770e:	d09b      	beq.n	8007648 <_printf_i+0x164>
 8007710:	3501      	adds	r5, #1
 8007712:	68e3      	ldr	r3, [r4, #12]
 8007714:	9903      	ldr	r1, [sp, #12]
 8007716:	1a5b      	subs	r3, r3, r1
 8007718:	42ab      	cmp	r3, r5
 800771a:	dcf2      	bgt.n	8007702 <_printf_i+0x21e>
 800771c:	e7eb      	b.n	80076f6 <_printf_i+0x212>
 800771e:	2500      	movs	r5, #0
 8007720:	f104 0619 	add.w	r6, r4, #25
 8007724:	e7f5      	b.n	8007712 <_printf_i+0x22e>
 8007726:	bf00      	nop
 8007728:	08015732 	.word	0x08015732
 800772c:	08015743 	.word	0x08015743

08007730 <iprintf>:
 8007730:	b40f      	push	{r0, r1, r2, r3}
 8007732:	4b0a      	ldr	r3, [pc, #40]	; (800775c <iprintf+0x2c>)
 8007734:	b513      	push	{r0, r1, r4, lr}
 8007736:	681c      	ldr	r4, [r3, #0]
 8007738:	b124      	cbz	r4, 8007744 <iprintf+0x14>
 800773a:	69a3      	ldr	r3, [r4, #24]
 800773c:	b913      	cbnz	r3, 8007744 <iprintf+0x14>
 800773e:	4620      	mov	r0, r4
 8007740:	f000 feee 	bl	8008520 <__sinit>
 8007744:	ab05      	add	r3, sp, #20
 8007746:	9a04      	ldr	r2, [sp, #16]
 8007748:	68a1      	ldr	r1, [r4, #8]
 800774a:	9301      	str	r3, [sp, #4]
 800774c:	4620      	mov	r0, r4
 800774e:	f001 fb4f 	bl	8008df0 <_vfiprintf_r>
 8007752:	b002      	add	sp, #8
 8007754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007758:	b004      	add	sp, #16
 800775a:	4770      	bx	lr
 800775c:	200007ec 	.word	0x200007ec

08007760 <_sbrk_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4d06      	ldr	r5, [pc, #24]	; (800777c <_sbrk_r+0x1c>)
 8007764:	2300      	movs	r3, #0
 8007766:	4604      	mov	r4, r0
 8007768:	4608      	mov	r0, r1
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	f7f9 fef6 	bl	800155c <_sbrk>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_sbrk_r+0x1a>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_sbrk_r+0x1a>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	200012b4 	.word	0x200012b4

08007780 <quorem>:
 8007780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	6903      	ldr	r3, [r0, #16]
 8007786:	690c      	ldr	r4, [r1, #16]
 8007788:	42a3      	cmp	r3, r4
 800778a:	4607      	mov	r7, r0
 800778c:	f2c0 8081 	blt.w	8007892 <quorem+0x112>
 8007790:	3c01      	subs	r4, #1
 8007792:	f101 0814 	add.w	r8, r1, #20
 8007796:	f100 0514 	add.w	r5, r0, #20
 800779a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077a8:	3301      	adds	r3, #1
 80077aa:	429a      	cmp	r2, r3
 80077ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80077b8:	d331      	bcc.n	800781e <quorem+0x9e>
 80077ba:	f04f 0e00 	mov.w	lr, #0
 80077be:	4640      	mov	r0, r8
 80077c0:	46ac      	mov	ip, r5
 80077c2:	46f2      	mov	sl, lr
 80077c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80077c8:	b293      	uxth	r3, r2
 80077ca:	fb06 e303 	mla	r3, r6, r3, lr
 80077ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	ebaa 0303 	sub.w	r3, sl, r3
 80077d8:	0c12      	lsrs	r2, r2, #16
 80077da:	f8dc a000 	ldr.w	sl, [ip]
 80077de:	fb06 e202 	mla	r2, r6, r2, lr
 80077e2:	fa13 f38a 	uxtah	r3, r3, sl
 80077e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077ea:	fa1f fa82 	uxth.w	sl, r2
 80077ee:	f8dc 2000 	ldr.w	r2, [ip]
 80077f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007800:	4581      	cmp	r9, r0
 8007802:	f84c 3b04 	str.w	r3, [ip], #4
 8007806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800780a:	d2db      	bcs.n	80077c4 <quorem+0x44>
 800780c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007810:	b92b      	cbnz	r3, 800781e <quorem+0x9e>
 8007812:	9b01      	ldr	r3, [sp, #4]
 8007814:	3b04      	subs	r3, #4
 8007816:	429d      	cmp	r5, r3
 8007818:	461a      	mov	r2, r3
 800781a:	d32e      	bcc.n	800787a <quorem+0xfa>
 800781c:	613c      	str	r4, [r7, #16]
 800781e:	4638      	mov	r0, r7
 8007820:	f001 f9ae 	bl	8008b80 <__mcmp>
 8007824:	2800      	cmp	r0, #0
 8007826:	db24      	blt.n	8007872 <quorem+0xf2>
 8007828:	3601      	adds	r6, #1
 800782a:	4628      	mov	r0, r5
 800782c:	f04f 0c00 	mov.w	ip, #0
 8007830:	f858 2b04 	ldr.w	r2, [r8], #4
 8007834:	f8d0 e000 	ldr.w	lr, [r0]
 8007838:	b293      	uxth	r3, r2
 800783a:	ebac 0303 	sub.w	r3, ip, r3
 800783e:	0c12      	lsrs	r2, r2, #16
 8007840:	fa13 f38e 	uxtah	r3, r3, lr
 8007844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800784c:	b29b      	uxth	r3, r3
 800784e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007852:	45c1      	cmp	r9, r8
 8007854:	f840 3b04 	str.w	r3, [r0], #4
 8007858:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800785c:	d2e8      	bcs.n	8007830 <quorem+0xb0>
 800785e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007866:	b922      	cbnz	r2, 8007872 <quorem+0xf2>
 8007868:	3b04      	subs	r3, #4
 800786a:	429d      	cmp	r5, r3
 800786c:	461a      	mov	r2, r3
 800786e:	d30a      	bcc.n	8007886 <quorem+0x106>
 8007870:	613c      	str	r4, [r7, #16]
 8007872:	4630      	mov	r0, r6
 8007874:	b003      	add	sp, #12
 8007876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	3b04      	subs	r3, #4
 800787e:	2a00      	cmp	r2, #0
 8007880:	d1cc      	bne.n	800781c <quorem+0x9c>
 8007882:	3c01      	subs	r4, #1
 8007884:	e7c7      	b.n	8007816 <quorem+0x96>
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	3b04      	subs	r3, #4
 800788a:	2a00      	cmp	r2, #0
 800788c:	d1f0      	bne.n	8007870 <quorem+0xf0>
 800788e:	3c01      	subs	r4, #1
 8007890:	e7eb      	b.n	800786a <quorem+0xea>
 8007892:	2000      	movs	r0, #0
 8007894:	e7ee      	b.n	8007874 <quorem+0xf4>
	...

08007898 <_dtoa_r>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	ed2d 8b02 	vpush	{d8}
 80078a0:	ec57 6b10 	vmov	r6, r7, d0
 80078a4:	b095      	sub	sp, #84	; 0x54
 80078a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078ac:	9105      	str	r1, [sp, #20]
 80078ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80078b2:	4604      	mov	r4, r0
 80078b4:	9209      	str	r2, [sp, #36]	; 0x24
 80078b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078b8:	b975      	cbnz	r5, 80078d8 <_dtoa_r+0x40>
 80078ba:	2010      	movs	r0, #16
 80078bc:	f7ff fa06 	bl	8006ccc <malloc>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6260      	str	r0, [r4, #36]	; 0x24
 80078c4:	b920      	cbnz	r0, 80078d0 <_dtoa_r+0x38>
 80078c6:	4bb2      	ldr	r3, [pc, #712]	; (8007b90 <_dtoa_r+0x2f8>)
 80078c8:	21ea      	movs	r1, #234	; 0xea
 80078ca:	48b2      	ldr	r0, [pc, #712]	; (8007b94 <_dtoa_r+0x2fc>)
 80078cc:	f001 fcd6 	bl	800927c <__assert_func>
 80078d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078d4:	6005      	str	r5, [r0, #0]
 80078d6:	60c5      	str	r5, [r0, #12]
 80078d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078da:	6819      	ldr	r1, [r3, #0]
 80078dc:	b151      	cbz	r1, 80078f4 <_dtoa_r+0x5c>
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	604a      	str	r2, [r1, #4]
 80078e2:	2301      	movs	r3, #1
 80078e4:	4093      	lsls	r3, r2
 80078e6:	608b      	str	r3, [r1, #8]
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 ff0b 	bl	8008704 <_Bfree>
 80078ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	1e3b      	subs	r3, r7, #0
 80078f6:	bfb9      	ittee	lt
 80078f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078fc:	9303      	strlt	r3, [sp, #12]
 80078fe:	2300      	movge	r3, #0
 8007900:	f8c8 3000 	strge.w	r3, [r8]
 8007904:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007908:	4ba3      	ldr	r3, [pc, #652]	; (8007b98 <_dtoa_r+0x300>)
 800790a:	bfbc      	itt	lt
 800790c:	2201      	movlt	r2, #1
 800790e:	f8c8 2000 	strlt.w	r2, [r8]
 8007912:	ea33 0309 	bics.w	r3, r3, r9
 8007916:	d11b      	bne.n	8007950 <_dtoa_r+0xb8>
 8007918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800791a:	f242 730f 	movw	r3, #9999	; 0x270f
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007924:	4333      	orrs	r3, r6
 8007926:	f000 857a 	beq.w	800841e <_dtoa_r+0xb86>
 800792a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800792c:	b963      	cbnz	r3, 8007948 <_dtoa_r+0xb0>
 800792e:	4b9b      	ldr	r3, [pc, #620]	; (8007b9c <_dtoa_r+0x304>)
 8007930:	e024      	b.n	800797c <_dtoa_r+0xe4>
 8007932:	4b9b      	ldr	r3, [pc, #620]	; (8007ba0 <_dtoa_r+0x308>)
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	9800      	ldr	r0, [sp, #0]
 800793e:	b015      	add	sp, #84	; 0x54
 8007940:	ecbd 8b02 	vpop	{d8}
 8007944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007948:	4b94      	ldr	r3, [pc, #592]	; (8007b9c <_dtoa_r+0x304>)
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	3303      	adds	r3, #3
 800794e:	e7f3      	b.n	8007938 <_dtoa_r+0xa0>
 8007950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007954:	2200      	movs	r2, #0
 8007956:	ec51 0b17 	vmov	r0, r1, d7
 800795a:	2300      	movs	r3, #0
 800795c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007960:	f7f9 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007964:	4680      	mov	r8, r0
 8007966:	b158      	cbz	r0, 8007980 <_dtoa_r+0xe8>
 8007968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800796a:	2301      	movs	r3, #1
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 8551 	beq.w	8008418 <_dtoa_r+0xb80>
 8007976:	488b      	ldr	r0, [pc, #556]	; (8007ba4 <_dtoa_r+0x30c>)
 8007978:	6018      	str	r0, [r3, #0]
 800797a:	1e43      	subs	r3, r0, #1
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	e7dd      	b.n	800793c <_dtoa_r+0xa4>
 8007980:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007984:	aa12      	add	r2, sp, #72	; 0x48
 8007986:	a913      	add	r1, sp, #76	; 0x4c
 8007988:	4620      	mov	r0, r4
 800798a:	f001 f99d 	bl	8008cc8 <__d2b>
 800798e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007992:	4683      	mov	fp, r0
 8007994:	2d00      	cmp	r5, #0
 8007996:	d07c      	beq.n	8007a92 <_dtoa_r+0x1fa>
 8007998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800799e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80079a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80079aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80079ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079b2:	4b7d      	ldr	r3, [pc, #500]	; (8007ba8 <_dtoa_r+0x310>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	4630      	mov	r0, r6
 80079b8:	4639      	mov	r1, r7
 80079ba:	f7f8 fc65 	bl	8000288 <__aeabi_dsub>
 80079be:	a36e      	add	r3, pc, #440	; (adr r3, 8007b78 <_dtoa_r+0x2e0>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f7f8 fe18 	bl	80005f8 <__aeabi_dmul>
 80079c8:	a36d      	add	r3, pc, #436	; (adr r3, 8007b80 <_dtoa_r+0x2e8>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fc5d 	bl	800028c <__adddf3>
 80079d2:	4606      	mov	r6, r0
 80079d4:	4628      	mov	r0, r5
 80079d6:	460f      	mov	r7, r1
 80079d8:	f7f8 fda4 	bl	8000524 <__aeabi_i2d>
 80079dc:	a36a      	add	r3, pc, #424	; (adr r3, 8007b88 <_dtoa_r+0x2f0>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fe09 	bl	80005f8 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f8 fc4d 	bl	800028c <__adddf3>
 80079f2:	4606      	mov	r6, r0
 80079f4:	460f      	mov	r7, r1
 80079f6:	f7f9 f8af 	bl	8000b58 <__aeabi_d2iz>
 80079fa:	2200      	movs	r2, #0
 80079fc:	4682      	mov	sl, r0
 80079fe:	2300      	movs	r3, #0
 8007a00:	4630      	mov	r0, r6
 8007a02:	4639      	mov	r1, r7
 8007a04:	f7f9 f86a 	bl	8000adc <__aeabi_dcmplt>
 8007a08:	b148      	cbz	r0, 8007a1e <_dtoa_r+0x186>
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	f7f8 fd8a 	bl	8000524 <__aeabi_i2d>
 8007a10:	4632      	mov	r2, r6
 8007a12:	463b      	mov	r3, r7
 8007a14:	f7f9 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a18:	b908      	cbnz	r0, 8007a1e <_dtoa_r+0x186>
 8007a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a1e:	f1ba 0f16 	cmp.w	sl, #22
 8007a22:	d854      	bhi.n	8007ace <_dtoa_r+0x236>
 8007a24:	4b61      	ldr	r3, [pc, #388]	; (8007bac <_dtoa_r+0x314>)
 8007a26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a32:	f7f9 f853 	bl	8000adc <__aeabi_dcmplt>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d04b      	beq.n	8007ad2 <_dtoa_r+0x23a>
 8007a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a3e:	2300      	movs	r3, #0
 8007a40:	930e      	str	r3, [sp, #56]	; 0x38
 8007a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a44:	1b5d      	subs	r5, r3, r5
 8007a46:	1e6b      	subs	r3, r5, #1
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	bf43      	ittte	mi
 8007a4c:	2300      	movmi	r3, #0
 8007a4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007a52:	9304      	strmi	r3, [sp, #16]
 8007a54:	f04f 0800 	movpl.w	r8, #0
 8007a58:	f1ba 0f00 	cmp.w	sl, #0
 8007a5c:	db3b      	blt.n	8007ad6 <_dtoa_r+0x23e>
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007a64:	4453      	add	r3, sl
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9306      	str	r3, [sp, #24]
 8007a6c:	9b05      	ldr	r3, [sp, #20]
 8007a6e:	2b09      	cmp	r3, #9
 8007a70:	d869      	bhi.n	8007b46 <_dtoa_r+0x2ae>
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	bfc4      	itt	gt
 8007a76:	3b04      	subgt	r3, #4
 8007a78:	9305      	strgt	r3, [sp, #20]
 8007a7a:	9b05      	ldr	r3, [sp, #20]
 8007a7c:	f1a3 0302 	sub.w	r3, r3, #2
 8007a80:	bfcc      	ite	gt
 8007a82:	2500      	movgt	r5, #0
 8007a84:	2501      	movle	r5, #1
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d869      	bhi.n	8007b5e <_dtoa_r+0x2c6>
 8007a8a:	e8df f003 	tbb	[pc, r3]
 8007a8e:	4e2c      	.short	0x4e2c
 8007a90:	5a4c      	.short	0x5a4c
 8007a92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007a96:	441d      	add	r5, r3
 8007a98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	bfc1      	itttt	gt
 8007aa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007aa4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007aa8:	fa09 f303 	lslgt.w	r3, r9, r3
 8007aac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ab0:	bfda      	itte	le
 8007ab2:	f1c3 0320 	rsble	r3, r3, #32
 8007ab6:	fa06 f003 	lslle.w	r0, r6, r3
 8007aba:	4318      	orrgt	r0, r3
 8007abc:	f7f8 fd22 	bl	8000504 <__aeabi_ui2d>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ac8:	3d01      	subs	r5, #1
 8007aca:	9310      	str	r3, [sp, #64]	; 0x40
 8007acc:	e771      	b.n	80079b2 <_dtoa_r+0x11a>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e7b6      	b.n	8007a40 <_dtoa_r+0x1a8>
 8007ad2:	900e      	str	r0, [sp, #56]	; 0x38
 8007ad4:	e7b5      	b.n	8007a42 <_dtoa_r+0x1aa>
 8007ad6:	f1ca 0300 	rsb	r3, sl, #0
 8007ada:	9306      	str	r3, [sp, #24]
 8007adc:	2300      	movs	r3, #0
 8007ade:	eba8 080a 	sub.w	r8, r8, sl
 8007ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ae4:	e7c2      	b.n	8007a6c <_dtoa_r+0x1d4>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9308      	str	r3, [sp, #32]
 8007aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dc39      	bgt.n	8007b64 <_dtoa_r+0x2cc>
 8007af0:	f04f 0901 	mov.w	r9, #1
 8007af4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007af8:	464b      	mov	r3, r9
 8007afa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b00:	2200      	movs	r2, #0
 8007b02:	6042      	str	r2, [r0, #4]
 8007b04:	2204      	movs	r2, #4
 8007b06:	f102 0614 	add.w	r6, r2, #20
 8007b0a:	429e      	cmp	r6, r3
 8007b0c:	6841      	ldr	r1, [r0, #4]
 8007b0e:	d92f      	bls.n	8007b70 <_dtoa_r+0x2d8>
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fdb7 	bl	8008684 <_Balloc>
 8007b16:	9000      	str	r0, [sp, #0]
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d14b      	bne.n	8007bb4 <_dtoa_r+0x31c>
 8007b1c:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <_dtoa_r+0x318>)
 8007b1e:	4602      	mov	r2, r0
 8007b20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b24:	e6d1      	b.n	80078ca <_dtoa_r+0x32>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e7de      	b.n	8007ae8 <_dtoa_r+0x250>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9308      	str	r3, [sp, #32]
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	eb0a 0903 	add.w	r9, sl, r3
 8007b34:	f109 0301 	add.w	r3, r9, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	9301      	str	r3, [sp, #4]
 8007b3c:	bfb8      	it	lt
 8007b3e:	2301      	movlt	r3, #1
 8007b40:	e7dd      	b.n	8007afe <_dtoa_r+0x266>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e7f2      	b.n	8007b2c <_dtoa_r+0x294>
 8007b46:	2501      	movs	r5, #1
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9305      	str	r3, [sp, #20]
 8007b4c:	9508      	str	r5, [sp, #32]
 8007b4e:	f04f 39ff 	mov.w	r9, #4294967295
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b58:	2312      	movs	r3, #18
 8007b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b5c:	e7cf      	b.n	8007afe <_dtoa_r+0x266>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	e7f4      	b.n	8007b4e <_dtoa_r+0x2b6>
 8007b64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007b68:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b6c:	464b      	mov	r3, r9
 8007b6e:	e7c6      	b.n	8007afe <_dtoa_r+0x266>
 8007b70:	3101      	adds	r1, #1
 8007b72:	6041      	str	r1, [r0, #4]
 8007b74:	0052      	lsls	r2, r2, #1
 8007b76:	e7c6      	b.n	8007b06 <_dtoa_r+0x26e>
 8007b78:	636f4361 	.word	0x636f4361
 8007b7c:	3fd287a7 	.word	0x3fd287a7
 8007b80:	8b60c8b3 	.word	0x8b60c8b3
 8007b84:	3fc68a28 	.word	0x3fc68a28
 8007b88:	509f79fb 	.word	0x509f79fb
 8007b8c:	3fd34413 	.word	0x3fd34413
 8007b90:	08015761 	.word	0x08015761
 8007b94:	08015778 	.word	0x08015778
 8007b98:	7ff00000 	.word	0x7ff00000
 8007b9c:	0801575d 	.word	0x0801575d
 8007ba0:	08015754 	.word	0x08015754
 8007ba4:	08015731 	.word	0x08015731
 8007ba8:	3ff80000 	.word	0x3ff80000
 8007bac:	080158d0 	.word	0x080158d0
 8007bb0:	080157d7 	.word	0x080157d7
 8007bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bb6:	9a00      	ldr	r2, [sp, #0]
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	2b0e      	cmp	r3, #14
 8007bbe:	f200 80ad 	bhi.w	8007d1c <_dtoa_r+0x484>
 8007bc2:	2d00      	cmp	r5, #0
 8007bc4:	f000 80aa 	beq.w	8007d1c <_dtoa_r+0x484>
 8007bc8:	f1ba 0f00 	cmp.w	sl, #0
 8007bcc:	dd36      	ble.n	8007c3c <_dtoa_r+0x3a4>
 8007bce:	4ac3      	ldr	r2, [pc, #780]	; (8007edc <_dtoa_r+0x644>)
 8007bd0:	f00a 030f 	and.w	r3, sl, #15
 8007bd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007bd8:	ed93 7b00 	vldr	d7, [r3]
 8007bdc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007be0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007be4:	eeb0 8a47 	vmov.f32	s16, s14
 8007be8:	eef0 8a67 	vmov.f32	s17, s15
 8007bec:	d016      	beq.n	8007c1c <_dtoa_r+0x384>
 8007bee:	4bbc      	ldr	r3, [pc, #752]	; (8007ee0 <_dtoa_r+0x648>)
 8007bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bf8:	f7f8 fe28 	bl	800084c <__aeabi_ddiv>
 8007bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c00:	f007 070f 	and.w	r7, r7, #15
 8007c04:	2503      	movs	r5, #3
 8007c06:	4eb6      	ldr	r6, [pc, #728]	; (8007ee0 <_dtoa_r+0x648>)
 8007c08:	b957      	cbnz	r7, 8007c20 <_dtoa_r+0x388>
 8007c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c0e:	ec53 2b18 	vmov	r2, r3, d8
 8007c12:	f7f8 fe1b 	bl	800084c <__aeabi_ddiv>
 8007c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c1a:	e029      	b.n	8007c70 <_dtoa_r+0x3d8>
 8007c1c:	2502      	movs	r5, #2
 8007c1e:	e7f2      	b.n	8007c06 <_dtoa_r+0x36e>
 8007c20:	07f9      	lsls	r1, r7, #31
 8007c22:	d508      	bpl.n	8007c36 <_dtoa_r+0x39e>
 8007c24:	ec51 0b18 	vmov	r0, r1, d8
 8007c28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c2c:	f7f8 fce4 	bl	80005f8 <__aeabi_dmul>
 8007c30:	ec41 0b18 	vmov	d8, r0, r1
 8007c34:	3501      	adds	r5, #1
 8007c36:	107f      	asrs	r7, r7, #1
 8007c38:	3608      	adds	r6, #8
 8007c3a:	e7e5      	b.n	8007c08 <_dtoa_r+0x370>
 8007c3c:	f000 80a6 	beq.w	8007d8c <_dtoa_r+0x4f4>
 8007c40:	f1ca 0600 	rsb	r6, sl, #0
 8007c44:	4ba5      	ldr	r3, [pc, #660]	; (8007edc <_dtoa_r+0x644>)
 8007c46:	4fa6      	ldr	r7, [pc, #664]	; (8007ee0 <_dtoa_r+0x648>)
 8007c48:	f006 020f 	and.w	r2, r6, #15
 8007c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c58:	f7f8 fcce 	bl	80005f8 <__aeabi_dmul>
 8007c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c60:	1136      	asrs	r6, r6, #4
 8007c62:	2300      	movs	r3, #0
 8007c64:	2502      	movs	r5, #2
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	f040 8085 	bne.w	8007d76 <_dtoa_r+0x4de>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1d2      	bne.n	8007c16 <_dtoa_r+0x37e>
 8007c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 808c 	beq.w	8007d90 <_dtoa_r+0x4f8>
 8007c78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c7c:	4b99      	ldr	r3, [pc, #612]	; (8007ee4 <_dtoa_r+0x64c>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4630      	mov	r0, r6
 8007c82:	4639      	mov	r1, r7
 8007c84:	f7f8 ff2a 	bl	8000adc <__aeabi_dcmplt>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f000 8081 	beq.w	8007d90 <_dtoa_r+0x4f8>
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d07d      	beq.n	8007d90 <_dtoa_r+0x4f8>
 8007c94:	f1b9 0f00 	cmp.w	r9, #0
 8007c98:	dd3c      	ble.n	8007d14 <_dtoa_r+0x47c>
 8007c9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c9e:	9307      	str	r3, [sp, #28]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4b91      	ldr	r3, [pc, #580]	; (8007ee8 <_dtoa_r+0x650>)
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 fca6 	bl	80005f8 <__aeabi_dmul>
 8007cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cb0:	3501      	adds	r5, #1
 8007cb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007cb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f7f8 fc32 	bl	8000524 <__aeabi_i2d>
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	f7f8 fc98 	bl	80005f8 <__aeabi_dmul>
 8007cc8:	4b88      	ldr	r3, [pc, #544]	; (8007eec <_dtoa_r+0x654>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f7f8 fade 	bl	800028c <__adddf3>
 8007cd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d15c      	bne.n	8007d9a <_dtoa_r+0x502>
 8007ce0:	4b83      	ldr	r3, [pc, #524]	; (8007ef0 <_dtoa_r+0x658>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f7f8 face 	bl	8000288 <__aeabi_dsub>
 8007cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	f7f8 ff10 	bl	8000b18 <__aeabi_dcmpgt>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	f040 8296 	bne.w	800822a <_dtoa_r+0x992>
 8007cfe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007d02:	4630      	mov	r0, r6
 8007d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fee7 	bl	8000adc <__aeabi_dcmplt>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f040 8288 	bne.w	8008224 <_dtoa_r+0x98c>
 8007d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f2c0 8158 	blt.w	8007fd4 <_dtoa_r+0x73c>
 8007d24:	f1ba 0f0e 	cmp.w	sl, #14
 8007d28:	f300 8154 	bgt.w	8007fd4 <_dtoa_r+0x73c>
 8007d2c:	4b6b      	ldr	r3, [pc, #428]	; (8007edc <_dtoa_r+0x644>)
 8007d2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f280 80e3 	bge.w	8007f04 <_dtoa_r+0x66c>
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f300 80df 	bgt.w	8007f04 <_dtoa_r+0x66c>
 8007d46:	f040 826d 	bne.w	8008224 <_dtoa_r+0x98c>
 8007d4a:	4b69      	ldr	r3, [pc, #420]	; (8007ef0 <_dtoa_r+0x658>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4640      	mov	r0, r8
 8007d50:	4649      	mov	r1, r9
 8007d52:	f7f8 fc51 	bl	80005f8 <__aeabi_dmul>
 8007d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d5a:	f7f8 fed3 	bl	8000b04 <__aeabi_dcmpge>
 8007d5e:	9e01      	ldr	r6, [sp, #4]
 8007d60:	4637      	mov	r7, r6
 8007d62:	2800      	cmp	r0, #0
 8007d64:	f040 8243 	bne.w	80081ee <_dtoa_r+0x956>
 8007d68:	9d00      	ldr	r5, [sp, #0]
 8007d6a:	2331      	movs	r3, #49	; 0x31
 8007d6c:	f805 3b01 	strb.w	r3, [r5], #1
 8007d70:	f10a 0a01 	add.w	sl, sl, #1
 8007d74:	e23f      	b.n	80081f6 <_dtoa_r+0x95e>
 8007d76:	07f2      	lsls	r2, r6, #31
 8007d78:	d505      	bpl.n	8007d86 <_dtoa_r+0x4ee>
 8007d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d7e:	f7f8 fc3b 	bl	80005f8 <__aeabi_dmul>
 8007d82:	3501      	adds	r5, #1
 8007d84:	2301      	movs	r3, #1
 8007d86:	1076      	asrs	r6, r6, #1
 8007d88:	3708      	adds	r7, #8
 8007d8a:	e76c      	b.n	8007c66 <_dtoa_r+0x3ce>
 8007d8c:	2502      	movs	r5, #2
 8007d8e:	e76f      	b.n	8007c70 <_dtoa_r+0x3d8>
 8007d90:	9b01      	ldr	r3, [sp, #4]
 8007d92:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d96:	930c      	str	r3, [sp, #48]	; 0x30
 8007d98:	e78d      	b.n	8007cb6 <_dtoa_r+0x41e>
 8007d9a:	9900      	ldr	r1, [sp, #0]
 8007d9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007da0:	4b4e      	ldr	r3, [pc, #312]	; (8007edc <_dtoa_r+0x644>)
 8007da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007da6:	4401      	add	r1, r0
 8007da8:	9102      	str	r1, [sp, #8]
 8007daa:	9908      	ldr	r1, [sp, #32]
 8007dac:	eeb0 8a47 	vmov.f32	s16, s14
 8007db0:	eef0 8a67 	vmov.f32	s17, s15
 8007db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d045      	beq.n	8007e4c <_dtoa_r+0x5b4>
 8007dc0:	494c      	ldr	r1, [pc, #304]	; (8007ef4 <_dtoa_r+0x65c>)
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	f7f8 fd42 	bl	800084c <__aeabi_ddiv>
 8007dc8:	ec53 2b18 	vmov	r2, r3, d8
 8007dcc:	f7f8 fa5c 	bl	8000288 <__aeabi_dsub>
 8007dd0:	9d00      	ldr	r5, [sp, #0]
 8007dd2:	ec41 0b18 	vmov	d8, r0, r1
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7f8 febd 	bl	8000b58 <__aeabi_d2iz>
 8007dde:	900c      	str	r0, [sp, #48]	; 0x30
 8007de0:	f7f8 fba0 	bl	8000524 <__aeabi_i2d>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fa4c 	bl	8000288 <__aeabi_dsub>
 8007df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007df2:	3330      	adds	r3, #48	; 0x30
 8007df4:	f805 3b01 	strb.w	r3, [r5], #1
 8007df8:	ec53 2b18 	vmov	r2, r3, d8
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	f7f8 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d165      	bne.n	8007ed4 <_dtoa_r+0x63c>
 8007e08:	4632      	mov	r2, r6
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	4935      	ldr	r1, [pc, #212]	; (8007ee4 <_dtoa_r+0x64c>)
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f7f8 fa3a 	bl	8000288 <__aeabi_dsub>
 8007e14:	ec53 2b18 	vmov	r2, r3, d8
 8007e18:	f7f8 fe60 	bl	8000adc <__aeabi_dcmplt>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f040 80b9 	bne.w	8007f94 <_dtoa_r+0x6fc>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	429d      	cmp	r5, r3
 8007e26:	f43f af75 	beq.w	8007d14 <_dtoa_r+0x47c>
 8007e2a:	4b2f      	ldr	r3, [pc, #188]	; (8007ee8 <_dtoa_r+0x650>)
 8007e2c:	ec51 0b18 	vmov	r0, r1, d8
 8007e30:	2200      	movs	r2, #0
 8007e32:	f7f8 fbe1 	bl	80005f8 <__aeabi_dmul>
 8007e36:	4b2c      	ldr	r3, [pc, #176]	; (8007ee8 <_dtoa_r+0x650>)
 8007e38:	ec41 0b18 	vmov	d8, r0, r1
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4630      	mov	r0, r6
 8007e40:	4639      	mov	r1, r7
 8007e42:	f7f8 fbd9 	bl	80005f8 <__aeabi_dmul>
 8007e46:	4606      	mov	r6, r0
 8007e48:	460f      	mov	r7, r1
 8007e4a:	e7c4      	b.n	8007dd6 <_dtoa_r+0x53e>
 8007e4c:	ec51 0b17 	vmov	r0, r1, d7
 8007e50:	f7f8 fbd2 	bl	80005f8 <__aeabi_dmul>
 8007e54:	9b02      	ldr	r3, [sp, #8]
 8007e56:	9d00      	ldr	r5, [sp, #0]
 8007e58:	930c      	str	r3, [sp, #48]	; 0x30
 8007e5a:	ec41 0b18 	vmov	d8, r0, r1
 8007e5e:	4639      	mov	r1, r7
 8007e60:	4630      	mov	r0, r6
 8007e62:	f7f8 fe79 	bl	8000b58 <__aeabi_d2iz>
 8007e66:	9011      	str	r0, [sp, #68]	; 0x44
 8007e68:	f7f8 fb5c 	bl	8000524 <__aeabi_i2d>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fa08 	bl	8000288 <__aeabi_dsub>
 8007e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e7a:	3330      	adds	r3, #48	; 0x30
 8007e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e80:	9b02      	ldr	r3, [sp, #8]
 8007e82:	429d      	cmp	r5, r3
 8007e84:	4606      	mov	r6, r0
 8007e86:	460f      	mov	r7, r1
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	d134      	bne.n	8007ef8 <_dtoa_r+0x660>
 8007e8e:	4b19      	ldr	r3, [pc, #100]	; (8007ef4 <_dtoa_r+0x65c>)
 8007e90:	ec51 0b18 	vmov	r0, r1, d8
 8007e94:	f7f8 f9fa 	bl	800028c <__adddf3>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	f7f8 fe3a 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d175      	bne.n	8007f94 <_dtoa_r+0x6fc>
 8007ea8:	ec53 2b18 	vmov	r2, r3, d8
 8007eac:	4911      	ldr	r1, [pc, #68]	; (8007ef4 <_dtoa_r+0x65c>)
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f7f8 f9ea 	bl	8000288 <__aeabi_dsub>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	f7f8 fe0e 	bl	8000adc <__aeabi_dcmplt>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f43f af27 	beq.w	8007d14 <_dtoa_r+0x47c>
 8007ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ec8:	1e6b      	subs	r3, r5, #1
 8007eca:	930c      	str	r3, [sp, #48]	; 0x30
 8007ecc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ed0:	2b30      	cmp	r3, #48	; 0x30
 8007ed2:	d0f8      	beq.n	8007ec6 <_dtoa_r+0x62e>
 8007ed4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ed8:	e04a      	b.n	8007f70 <_dtoa_r+0x6d8>
 8007eda:	bf00      	nop
 8007edc:	080158d0 	.word	0x080158d0
 8007ee0:	080158a8 	.word	0x080158a8
 8007ee4:	3ff00000 	.word	0x3ff00000
 8007ee8:	40240000 	.word	0x40240000
 8007eec:	401c0000 	.word	0x401c0000
 8007ef0:	40140000 	.word	0x40140000
 8007ef4:	3fe00000 	.word	0x3fe00000
 8007ef8:	4baf      	ldr	r3, [pc, #700]	; (80081b8 <_dtoa_r+0x920>)
 8007efa:	f7f8 fb7d 	bl	80005f8 <__aeabi_dmul>
 8007efe:	4606      	mov	r6, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	e7ac      	b.n	8007e5e <_dtoa_r+0x5c6>
 8007f04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f08:	9d00      	ldr	r5, [sp, #0]
 8007f0a:	4642      	mov	r2, r8
 8007f0c:	464b      	mov	r3, r9
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4639      	mov	r1, r7
 8007f12:	f7f8 fc9b 	bl	800084c <__aeabi_ddiv>
 8007f16:	f7f8 fe1f 	bl	8000b58 <__aeabi_d2iz>
 8007f1a:	9002      	str	r0, [sp, #8]
 8007f1c:	f7f8 fb02 	bl	8000524 <__aeabi_i2d>
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	f7f8 fb68 	bl	80005f8 <__aeabi_dmul>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f7f8 f9aa 	bl	8000288 <__aeabi_dsub>
 8007f34:	9e02      	ldr	r6, [sp, #8]
 8007f36:	9f01      	ldr	r7, [sp, #4]
 8007f38:	3630      	adds	r6, #48	; 0x30
 8007f3a:	f805 6b01 	strb.w	r6, [r5], #1
 8007f3e:	9e00      	ldr	r6, [sp, #0]
 8007f40:	1bae      	subs	r6, r5, r6
 8007f42:	42b7      	cmp	r7, r6
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	d137      	bne.n	8007fba <_dtoa_r+0x722>
 8007f4a:	f7f8 f99f 	bl	800028c <__adddf3>
 8007f4e:	4642      	mov	r2, r8
 8007f50:	464b      	mov	r3, r9
 8007f52:	4606      	mov	r6, r0
 8007f54:	460f      	mov	r7, r1
 8007f56:	f7f8 fddf 	bl	8000b18 <__aeabi_dcmpgt>
 8007f5a:	b9c8      	cbnz	r0, 8007f90 <_dtoa_r+0x6f8>
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	464b      	mov	r3, r9
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 fdb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f68:	b110      	cbz	r0, 8007f70 <_dtoa_r+0x6d8>
 8007f6a:	9b02      	ldr	r3, [sp, #8]
 8007f6c:	07d9      	lsls	r1, r3, #31
 8007f6e:	d40f      	bmi.n	8007f90 <_dtoa_r+0x6f8>
 8007f70:	4620      	mov	r0, r4
 8007f72:	4659      	mov	r1, fp
 8007f74:	f000 fbc6 	bl	8008704 <_Bfree>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	702b      	strb	r3, [r5, #0]
 8007f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f7e:	f10a 0001 	add.w	r0, sl, #1
 8007f82:	6018      	str	r0, [r3, #0]
 8007f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f43f acd8 	beq.w	800793c <_dtoa_r+0xa4>
 8007f8c:	601d      	str	r5, [r3, #0]
 8007f8e:	e4d5      	b.n	800793c <_dtoa_r+0xa4>
 8007f90:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f94:	462b      	mov	r3, r5
 8007f96:	461d      	mov	r5, r3
 8007f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f9c:	2a39      	cmp	r2, #57	; 0x39
 8007f9e:	d108      	bne.n	8007fb2 <_dtoa_r+0x71a>
 8007fa0:	9a00      	ldr	r2, [sp, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d1f7      	bne.n	8007f96 <_dtoa_r+0x6fe>
 8007fa6:	9a07      	ldr	r2, [sp, #28]
 8007fa8:	9900      	ldr	r1, [sp, #0]
 8007faa:	3201      	adds	r2, #1
 8007fac:	9207      	str	r2, [sp, #28]
 8007fae:	2230      	movs	r2, #48	; 0x30
 8007fb0:	700a      	strb	r2, [r1, #0]
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	3201      	adds	r2, #1
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	e78c      	b.n	8007ed4 <_dtoa_r+0x63c>
 8007fba:	4b7f      	ldr	r3, [pc, #508]	; (80081b8 <_dtoa_r+0x920>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f7f8 fb1b 	bl	80005f8 <__aeabi_dmul>
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	460f      	mov	r7, r1
 8007fca:	f7f8 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d09b      	beq.n	8007f0a <_dtoa_r+0x672>
 8007fd2:	e7cd      	b.n	8007f70 <_dtoa_r+0x6d8>
 8007fd4:	9a08      	ldr	r2, [sp, #32]
 8007fd6:	2a00      	cmp	r2, #0
 8007fd8:	f000 80c4 	beq.w	8008164 <_dtoa_r+0x8cc>
 8007fdc:	9a05      	ldr	r2, [sp, #20]
 8007fde:	2a01      	cmp	r2, #1
 8007fe0:	f300 80a8 	bgt.w	8008134 <_dtoa_r+0x89c>
 8007fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	f000 80a0 	beq.w	800812c <_dtoa_r+0x894>
 8007fec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ff0:	9e06      	ldr	r6, [sp, #24]
 8007ff2:	4645      	mov	r5, r8
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	441a      	add	r2, r3
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	4498      	add	r8, r3
 8007ffe:	9204      	str	r2, [sp, #16]
 8008000:	f000 fc3c 	bl	800887c <__i2b>
 8008004:	4607      	mov	r7, r0
 8008006:	2d00      	cmp	r5, #0
 8008008:	dd0b      	ble.n	8008022 <_dtoa_r+0x78a>
 800800a:	9b04      	ldr	r3, [sp, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	dd08      	ble.n	8008022 <_dtoa_r+0x78a>
 8008010:	42ab      	cmp	r3, r5
 8008012:	9a04      	ldr	r2, [sp, #16]
 8008014:	bfa8      	it	ge
 8008016:	462b      	movge	r3, r5
 8008018:	eba8 0803 	sub.w	r8, r8, r3
 800801c:	1aed      	subs	r5, r5, r3
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	9b06      	ldr	r3, [sp, #24]
 8008024:	b1fb      	cbz	r3, 8008066 <_dtoa_r+0x7ce>
 8008026:	9b08      	ldr	r3, [sp, #32]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 809f 	beq.w	800816c <_dtoa_r+0x8d4>
 800802e:	2e00      	cmp	r6, #0
 8008030:	dd11      	ble.n	8008056 <_dtoa_r+0x7be>
 8008032:	4639      	mov	r1, r7
 8008034:	4632      	mov	r2, r6
 8008036:	4620      	mov	r0, r4
 8008038:	f000 fcdc 	bl	80089f4 <__pow5mult>
 800803c:	465a      	mov	r2, fp
 800803e:	4601      	mov	r1, r0
 8008040:	4607      	mov	r7, r0
 8008042:	4620      	mov	r0, r4
 8008044:	f000 fc30 	bl	80088a8 <__multiply>
 8008048:	4659      	mov	r1, fp
 800804a:	9007      	str	r0, [sp, #28]
 800804c:	4620      	mov	r0, r4
 800804e:	f000 fb59 	bl	8008704 <_Bfree>
 8008052:	9b07      	ldr	r3, [sp, #28]
 8008054:	469b      	mov	fp, r3
 8008056:	9b06      	ldr	r3, [sp, #24]
 8008058:	1b9a      	subs	r2, r3, r6
 800805a:	d004      	beq.n	8008066 <_dtoa_r+0x7ce>
 800805c:	4659      	mov	r1, fp
 800805e:	4620      	mov	r0, r4
 8008060:	f000 fcc8 	bl	80089f4 <__pow5mult>
 8008064:	4683      	mov	fp, r0
 8008066:	2101      	movs	r1, #1
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fc07 	bl	800887c <__i2b>
 800806e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008070:	2b00      	cmp	r3, #0
 8008072:	4606      	mov	r6, r0
 8008074:	dd7c      	ble.n	8008170 <_dtoa_r+0x8d8>
 8008076:	461a      	mov	r2, r3
 8008078:	4601      	mov	r1, r0
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fcba 	bl	80089f4 <__pow5mult>
 8008080:	9b05      	ldr	r3, [sp, #20]
 8008082:	2b01      	cmp	r3, #1
 8008084:	4606      	mov	r6, r0
 8008086:	dd76      	ble.n	8008176 <_dtoa_r+0x8de>
 8008088:	2300      	movs	r3, #0
 800808a:	9306      	str	r3, [sp, #24]
 800808c:	6933      	ldr	r3, [r6, #16]
 800808e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008092:	6918      	ldr	r0, [r3, #16]
 8008094:	f000 fba2 	bl	80087dc <__hi0bits>
 8008098:	f1c0 0020 	rsb	r0, r0, #32
 800809c:	9b04      	ldr	r3, [sp, #16]
 800809e:	4418      	add	r0, r3
 80080a0:	f010 001f 	ands.w	r0, r0, #31
 80080a4:	f000 8086 	beq.w	80081b4 <_dtoa_r+0x91c>
 80080a8:	f1c0 0320 	rsb	r3, r0, #32
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	dd7f      	ble.n	80081b0 <_dtoa_r+0x918>
 80080b0:	f1c0 001c 	rsb	r0, r0, #28
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	4403      	add	r3, r0
 80080b8:	4480      	add	r8, r0
 80080ba:	4405      	add	r5, r0
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	f1b8 0f00 	cmp.w	r8, #0
 80080c2:	dd05      	ble.n	80080d0 <_dtoa_r+0x838>
 80080c4:	4659      	mov	r1, fp
 80080c6:	4642      	mov	r2, r8
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fced 	bl	8008aa8 <__lshift>
 80080ce:	4683      	mov	fp, r0
 80080d0:	9b04      	ldr	r3, [sp, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dd05      	ble.n	80080e2 <_dtoa_r+0x84a>
 80080d6:	4631      	mov	r1, r6
 80080d8:	461a      	mov	r2, r3
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fce4 	bl	8008aa8 <__lshift>
 80080e0:	4606      	mov	r6, r0
 80080e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d069      	beq.n	80081bc <_dtoa_r+0x924>
 80080e8:	4631      	mov	r1, r6
 80080ea:	4658      	mov	r0, fp
 80080ec:	f000 fd48 	bl	8008b80 <__mcmp>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	da63      	bge.n	80081bc <_dtoa_r+0x924>
 80080f4:	2300      	movs	r3, #0
 80080f6:	4659      	mov	r1, fp
 80080f8:	220a      	movs	r2, #10
 80080fa:	4620      	mov	r0, r4
 80080fc:	f000 fb24 	bl	8008748 <__multadd>
 8008100:	9b08      	ldr	r3, [sp, #32]
 8008102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008106:	4683      	mov	fp, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 818f 	beq.w	800842c <_dtoa_r+0xb94>
 800810e:	4639      	mov	r1, r7
 8008110:	2300      	movs	r3, #0
 8008112:	220a      	movs	r2, #10
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fb17 	bl	8008748 <__multadd>
 800811a:	f1b9 0f00 	cmp.w	r9, #0
 800811e:	4607      	mov	r7, r0
 8008120:	f300 808e 	bgt.w	8008240 <_dtoa_r+0x9a8>
 8008124:	9b05      	ldr	r3, [sp, #20]
 8008126:	2b02      	cmp	r3, #2
 8008128:	dc50      	bgt.n	80081cc <_dtoa_r+0x934>
 800812a:	e089      	b.n	8008240 <_dtoa_r+0x9a8>
 800812c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800812e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008132:	e75d      	b.n	8007ff0 <_dtoa_r+0x758>
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	1e5e      	subs	r6, r3, #1
 8008138:	9b06      	ldr	r3, [sp, #24]
 800813a:	42b3      	cmp	r3, r6
 800813c:	bfbf      	itttt	lt
 800813e:	9b06      	ldrlt	r3, [sp, #24]
 8008140:	9606      	strlt	r6, [sp, #24]
 8008142:	1af2      	sublt	r2, r6, r3
 8008144:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008146:	bfb6      	itet	lt
 8008148:	189b      	addlt	r3, r3, r2
 800814a:	1b9e      	subge	r6, r3, r6
 800814c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	bfb8      	it	lt
 8008152:	2600      	movlt	r6, #0
 8008154:	2b00      	cmp	r3, #0
 8008156:	bfb5      	itete	lt
 8008158:	eba8 0503 	sublt.w	r5, r8, r3
 800815c:	9b01      	ldrge	r3, [sp, #4]
 800815e:	2300      	movlt	r3, #0
 8008160:	4645      	movge	r5, r8
 8008162:	e747      	b.n	8007ff4 <_dtoa_r+0x75c>
 8008164:	9e06      	ldr	r6, [sp, #24]
 8008166:	9f08      	ldr	r7, [sp, #32]
 8008168:	4645      	mov	r5, r8
 800816a:	e74c      	b.n	8008006 <_dtoa_r+0x76e>
 800816c:	9a06      	ldr	r2, [sp, #24]
 800816e:	e775      	b.n	800805c <_dtoa_r+0x7c4>
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	2b01      	cmp	r3, #1
 8008174:	dc18      	bgt.n	80081a8 <_dtoa_r+0x910>
 8008176:	9b02      	ldr	r3, [sp, #8]
 8008178:	b9b3      	cbnz	r3, 80081a8 <_dtoa_r+0x910>
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008180:	b9a3      	cbnz	r3, 80081ac <_dtoa_r+0x914>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008188:	0d1b      	lsrs	r3, r3, #20
 800818a:	051b      	lsls	r3, r3, #20
 800818c:	b12b      	cbz	r3, 800819a <_dtoa_r+0x902>
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	3301      	adds	r3, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	f108 0801 	add.w	r8, r8, #1
 8008198:	2301      	movs	r3, #1
 800819a:	9306      	str	r3, [sp, #24]
 800819c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f47f af74 	bne.w	800808c <_dtoa_r+0x7f4>
 80081a4:	2001      	movs	r0, #1
 80081a6:	e779      	b.n	800809c <_dtoa_r+0x804>
 80081a8:	2300      	movs	r3, #0
 80081aa:	e7f6      	b.n	800819a <_dtoa_r+0x902>
 80081ac:	9b02      	ldr	r3, [sp, #8]
 80081ae:	e7f4      	b.n	800819a <_dtoa_r+0x902>
 80081b0:	d085      	beq.n	80080be <_dtoa_r+0x826>
 80081b2:	4618      	mov	r0, r3
 80081b4:	301c      	adds	r0, #28
 80081b6:	e77d      	b.n	80080b4 <_dtoa_r+0x81c>
 80081b8:	40240000 	.word	0x40240000
 80081bc:	9b01      	ldr	r3, [sp, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	dc38      	bgt.n	8008234 <_dtoa_r+0x99c>
 80081c2:	9b05      	ldr	r3, [sp, #20]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	dd35      	ble.n	8008234 <_dtoa_r+0x99c>
 80081c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80081cc:	f1b9 0f00 	cmp.w	r9, #0
 80081d0:	d10d      	bne.n	80081ee <_dtoa_r+0x956>
 80081d2:	4631      	mov	r1, r6
 80081d4:	464b      	mov	r3, r9
 80081d6:	2205      	movs	r2, #5
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fab5 	bl	8008748 <__multadd>
 80081de:	4601      	mov	r1, r0
 80081e0:	4606      	mov	r6, r0
 80081e2:	4658      	mov	r0, fp
 80081e4:	f000 fccc 	bl	8008b80 <__mcmp>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f73f adbd 	bgt.w	8007d68 <_dtoa_r+0x4d0>
 80081ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f0:	9d00      	ldr	r5, [sp, #0]
 80081f2:	ea6f 0a03 	mvn.w	sl, r3
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	4631      	mov	r1, r6
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fa81 	bl	8008704 <_Bfree>
 8008202:	2f00      	cmp	r7, #0
 8008204:	f43f aeb4 	beq.w	8007f70 <_dtoa_r+0x6d8>
 8008208:	f1b8 0f00 	cmp.w	r8, #0
 800820c:	d005      	beq.n	800821a <_dtoa_r+0x982>
 800820e:	45b8      	cmp	r8, r7
 8008210:	d003      	beq.n	800821a <_dtoa_r+0x982>
 8008212:	4641      	mov	r1, r8
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fa75 	bl	8008704 <_Bfree>
 800821a:	4639      	mov	r1, r7
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fa71 	bl	8008704 <_Bfree>
 8008222:	e6a5      	b.n	8007f70 <_dtoa_r+0x6d8>
 8008224:	2600      	movs	r6, #0
 8008226:	4637      	mov	r7, r6
 8008228:	e7e1      	b.n	80081ee <_dtoa_r+0x956>
 800822a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800822c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008230:	4637      	mov	r7, r6
 8008232:	e599      	b.n	8007d68 <_dtoa_r+0x4d0>
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80fd 	beq.w	800843a <_dtoa_r+0xba2>
 8008240:	2d00      	cmp	r5, #0
 8008242:	dd05      	ble.n	8008250 <_dtoa_r+0x9b8>
 8008244:	4639      	mov	r1, r7
 8008246:	462a      	mov	r2, r5
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fc2d 	bl	8008aa8 <__lshift>
 800824e:	4607      	mov	r7, r0
 8008250:	9b06      	ldr	r3, [sp, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d05c      	beq.n	8008310 <_dtoa_r+0xa78>
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	4620      	mov	r0, r4
 800825a:	f000 fa13 	bl	8008684 <_Balloc>
 800825e:	4605      	mov	r5, r0
 8008260:	b928      	cbnz	r0, 800826e <_dtoa_r+0x9d6>
 8008262:	4b80      	ldr	r3, [pc, #512]	; (8008464 <_dtoa_r+0xbcc>)
 8008264:	4602      	mov	r2, r0
 8008266:	f240 21ea 	movw	r1, #746	; 0x2ea
 800826a:	f7ff bb2e 	b.w	80078ca <_dtoa_r+0x32>
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	3202      	adds	r2, #2
 8008272:	0092      	lsls	r2, r2, #2
 8008274:	f107 010c 	add.w	r1, r7, #12
 8008278:	300c      	adds	r0, #12
 800827a:	f7fe fd2f 	bl	8006cdc <memcpy>
 800827e:	2201      	movs	r2, #1
 8008280:	4629      	mov	r1, r5
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fc10 	bl	8008aa8 <__lshift>
 8008288:	9b00      	ldr	r3, [sp, #0]
 800828a:	3301      	adds	r3, #1
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	9b00      	ldr	r3, [sp, #0]
 8008290:	444b      	add	r3, r9
 8008292:	9307      	str	r3, [sp, #28]
 8008294:	9b02      	ldr	r3, [sp, #8]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	46b8      	mov	r8, r7
 800829c:	9306      	str	r3, [sp, #24]
 800829e:	4607      	mov	r7, r0
 80082a0:	9b01      	ldr	r3, [sp, #4]
 80082a2:	4631      	mov	r1, r6
 80082a4:	3b01      	subs	r3, #1
 80082a6:	4658      	mov	r0, fp
 80082a8:	9302      	str	r3, [sp, #8]
 80082aa:	f7ff fa69 	bl	8007780 <quorem>
 80082ae:	4603      	mov	r3, r0
 80082b0:	3330      	adds	r3, #48	; 0x30
 80082b2:	9004      	str	r0, [sp, #16]
 80082b4:	4641      	mov	r1, r8
 80082b6:	4658      	mov	r0, fp
 80082b8:	9308      	str	r3, [sp, #32]
 80082ba:	f000 fc61 	bl	8008b80 <__mcmp>
 80082be:	463a      	mov	r2, r7
 80082c0:	4681      	mov	r9, r0
 80082c2:	4631      	mov	r1, r6
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 fc77 	bl	8008bb8 <__mdiff>
 80082ca:	68c2      	ldr	r2, [r0, #12]
 80082cc:	9b08      	ldr	r3, [sp, #32]
 80082ce:	4605      	mov	r5, r0
 80082d0:	bb02      	cbnz	r2, 8008314 <_dtoa_r+0xa7c>
 80082d2:	4601      	mov	r1, r0
 80082d4:	4658      	mov	r0, fp
 80082d6:	f000 fc53 	bl	8008b80 <__mcmp>
 80082da:	9b08      	ldr	r3, [sp, #32]
 80082dc:	4602      	mov	r2, r0
 80082de:	4629      	mov	r1, r5
 80082e0:	4620      	mov	r0, r4
 80082e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80082e6:	f000 fa0d 	bl	8008704 <_Bfree>
 80082ea:	9b05      	ldr	r3, [sp, #20]
 80082ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ee:	9d01      	ldr	r5, [sp, #4]
 80082f0:	ea43 0102 	orr.w	r1, r3, r2
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	430b      	orrs	r3, r1
 80082f8:	9b08      	ldr	r3, [sp, #32]
 80082fa:	d10d      	bne.n	8008318 <_dtoa_r+0xa80>
 80082fc:	2b39      	cmp	r3, #57	; 0x39
 80082fe:	d029      	beq.n	8008354 <_dtoa_r+0xabc>
 8008300:	f1b9 0f00 	cmp.w	r9, #0
 8008304:	dd01      	ble.n	800830a <_dtoa_r+0xa72>
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	3331      	adds	r3, #49	; 0x31
 800830a:	9a02      	ldr	r2, [sp, #8]
 800830c:	7013      	strb	r3, [r2, #0]
 800830e:	e774      	b.n	80081fa <_dtoa_r+0x962>
 8008310:	4638      	mov	r0, r7
 8008312:	e7b9      	b.n	8008288 <_dtoa_r+0x9f0>
 8008314:	2201      	movs	r2, #1
 8008316:	e7e2      	b.n	80082de <_dtoa_r+0xa46>
 8008318:	f1b9 0f00 	cmp.w	r9, #0
 800831c:	db06      	blt.n	800832c <_dtoa_r+0xa94>
 800831e:	9905      	ldr	r1, [sp, #20]
 8008320:	ea41 0909 	orr.w	r9, r1, r9
 8008324:	9906      	ldr	r1, [sp, #24]
 8008326:	ea59 0101 	orrs.w	r1, r9, r1
 800832a:	d120      	bne.n	800836e <_dtoa_r+0xad6>
 800832c:	2a00      	cmp	r2, #0
 800832e:	ddec      	ble.n	800830a <_dtoa_r+0xa72>
 8008330:	4659      	mov	r1, fp
 8008332:	2201      	movs	r2, #1
 8008334:	4620      	mov	r0, r4
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	f000 fbb6 	bl	8008aa8 <__lshift>
 800833c:	4631      	mov	r1, r6
 800833e:	4683      	mov	fp, r0
 8008340:	f000 fc1e 	bl	8008b80 <__mcmp>
 8008344:	2800      	cmp	r0, #0
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	dc02      	bgt.n	8008350 <_dtoa_r+0xab8>
 800834a:	d1de      	bne.n	800830a <_dtoa_r+0xa72>
 800834c:	07da      	lsls	r2, r3, #31
 800834e:	d5dc      	bpl.n	800830a <_dtoa_r+0xa72>
 8008350:	2b39      	cmp	r3, #57	; 0x39
 8008352:	d1d8      	bne.n	8008306 <_dtoa_r+0xa6e>
 8008354:	9a02      	ldr	r2, [sp, #8]
 8008356:	2339      	movs	r3, #57	; 0x39
 8008358:	7013      	strb	r3, [r2, #0]
 800835a:	462b      	mov	r3, r5
 800835c:	461d      	mov	r5, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008364:	2a39      	cmp	r2, #57	; 0x39
 8008366:	d050      	beq.n	800840a <_dtoa_r+0xb72>
 8008368:	3201      	adds	r2, #1
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	e745      	b.n	80081fa <_dtoa_r+0x962>
 800836e:	2a00      	cmp	r2, #0
 8008370:	dd03      	ble.n	800837a <_dtoa_r+0xae2>
 8008372:	2b39      	cmp	r3, #57	; 0x39
 8008374:	d0ee      	beq.n	8008354 <_dtoa_r+0xabc>
 8008376:	3301      	adds	r3, #1
 8008378:	e7c7      	b.n	800830a <_dtoa_r+0xa72>
 800837a:	9a01      	ldr	r2, [sp, #4]
 800837c:	9907      	ldr	r1, [sp, #28]
 800837e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008382:	428a      	cmp	r2, r1
 8008384:	d02a      	beq.n	80083dc <_dtoa_r+0xb44>
 8008386:	4659      	mov	r1, fp
 8008388:	2300      	movs	r3, #0
 800838a:	220a      	movs	r2, #10
 800838c:	4620      	mov	r0, r4
 800838e:	f000 f9db 	bl	8008748 <__multadd>
 8008392:	45b8      	cmp	r8, r7
 8008394:	4683      	mov	fp, r0
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	f04f 020a 	mov.w	r2, #10
 800839e:	4641      	mov	r1, r8
 80083a0:	4620      	mov	r0, r4
 80083a2:	d107      	bne.n	80083b4 <_dtoa_r+0xb1c>
 80083a4:	f000 f9d0 	bl	8008748 <__multadd>
 80083a8:	4680      	mov	r8, r0
 80083aa:	4607      	mov	r7, r0
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	3301      	adds	r3, #1
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	e775      	b.n	80082a0 <_dtoa_r+0xa08>
 80083b4:	f000 f9c8 	bl	8008748 <__multadd>
 80083b8:	4639      	mov	r1, r7
 80083ba:	4680      	mov	r8, r0
 80083bc:	2300      	movs	r3, #0
 80083be:	220a      	movs	r2, #10
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f9c1 	bl	8008748 <__multadd>
 80083c6:	4607      	mov	r7, r0
 80083c8:	e7f0      	b.n	80083ac <_dtoa_r+0xb14>
 80083ca:	f1b9 0f00 	cmp.w	r9, #0
 80083ce:	9a00      	ldr	r2, [sp, #0]
 80083d0:	bfcc      	ite	gt
 80083d2:	464d      	movgt	r5, r9
 80083d4:	2501      	movle	r5, #1
 80083d6:	4415      	add	r5, r2
 80083d8:	f04f 0800 	mov.w	r8, #0
 80083dc:	4659      	mov	r1, fp
 80083de:	2201      	movs	r2, #1
 80083e0:	4620      	mov	r0, r4
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	f000 fb60 	bl	8008aa8 <__lshift>
 80083e8:	4631      	mov	r1, r6
 80083ea:	4683      	mov	fp, r0
 80083ec:	f000 fbc8 	bl	8008b80 <__mcmp>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	dcb2      	bgt.n	800835a <_dtoa_r+0xac2>
 80083f4:	d102      	bne.n	80083fc <_dtoa_r+0xb64>
 80083f6:	9b01      	ldr	r3, [sp, #4]
 80083f8:	07db      	lsls	r3, r3, #31
 80083fa:	d4ae      	bmi.n	800835a <_dtoa_r+0xac2>
 80083fc:	462b      	mov	r3, r5
 80083fe:	461d      	mov	r5, r3
 8008400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008404:	2a30      	cmp	r2, #48	; 0x30
 8008406:	d0fa      	beq.n	80083fe <_dtoa_r+0xb66>
 8008408:	e6f7      	b.n	80081fa <_dtoa_r+0x962>
 800840a:	9a00      	ldr	r2, [sp, #0]
 800840c:	429a      	cmp	r2, r3
 800840e:	d1a5      	bne.n	800835c <_dtoa_r+0xac4>
 8008410:	f10a 0a01 	add.w	sl, sl, #1
 8008414:	2331      	movs	r3, #49	; 0x31
 8008416:	e779      	b.n	800830c <_dtoa_r+0xa74>
 8008418:	4b13      	ldr	r3, [pc, #76]	; (8008468 <_dtoa_r+0xbd0>)
 800841a:	f7ff baaf 	b.w	800797c <_dtoa_r+0xe4>
 800841e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008420:	2b00      	cmp	r3, #0
 8008422:	f47f aa86 	bne.w	8007932 <_dtoa_r+0x9a>
 8008426:	4b11      	ldr	r3, [pc, #68]	; (800846c <_dtoa_r+0xbd4>)
 8008428:	f7ff baa8 	b.w	800797c <_dtoa_r+0xe4>
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	dc03      	bgt.n	800843a <_dtoa_r+0xba2>
 8008432:	9b05      	ldr	r3, [sp, #20]
 8008434:	2b02      	cmp	r3, #2
 8008436:	f73f aec9 	bgt.w	80081cc <_dtoa_r+0x934>
 800843a:	9d00      	ldr	r5, [sp, #0]
 800843c:	4631      	mov	r1, r6
 800843e:	4658      	mov	r0, fp
 8008440:	f7ff f99e 	bl	8007780 <quorem>
 8008444:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008448:	f805 3b01 	strb.w	r3, [r5], #1
 800844c:	9a00      	ldr	r2, [sp, #0]
 800844e:	1aaa      	subs	r2, r5, r2
 8008450:	4591      	cmp	r9, r2
 8008452:	ddba      	ble.n	80083ca <_dtoa_r+0xb32>
 8008454:	4659      	mov	r1, fp
 8008456:	2300      	movs	r3, #0
 8008458:	220a      	movs	r2, #10
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f974 	bl	8008748 <__multadd>
 8008460:	4683      	mov	fp, r0
 8008462:	e7eb      	b.n	800843c <_dtoa_r+0xba4>
 8008464:	080157d7 	.word	0x080157d7
 8008468:	08015730 	.word	0x08015730
 800846c:	08015754 	.word	0x08015754

08008470 <std>:
 8008470:	2300      	movs	r3, #0
 8008472:	b510      	push	{r4, lr}
 8008474:	4604      	mov	r4, r0
 8008476:	e9c0 3300 	strd	r3, r3, [r0]
 800847a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800847e:	6083      	str	r3, [r0, #8]
 8008480:	8181      	strh	r1, [r0, #12]
 8008482:	6643      	str	r3, [r0, #100]	; 0x64
 8008484:	81c2      	strh	r2, [r0, #14]
 8008486:	6183      	str	r3, [r0, #24]
 8008488:	4619      	mov	r1, r3
 800848a:	2208      	movs	r2, #8
 800848c:	305c      	adds	r0, #92	; 0x5c
 800848e:	f7fe fc33 	bl	8006cf8 <memset>
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <std+0x38>)
 8008494:	6263      	str	r3, [r4, #36]	; 0x24
 8008496:	4b05      	ldr	r3, [pc, #20]	; (80084ac <std+0x3c>)
 8008498:	62a3      	str	r3, [r4, #40]	; 0x28
 800849a:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <std+0x40>)
 800849c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <std+0x44>)
 80084a0:	6224      	str	r4, [r4, #32]
 80084a2:	6323      	str	r3, [r4, #48]	; 0x30
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	bf00      	nop
 80084a8:	08009051 	.word	0x08009051
 80084ac:	08009073 	.word	0x08009073
 80084b0:	080090ab 	.word	0x080090ab
 80084b4:	080090cf 	.word	0x080090cf

080084b8 <_cleanup_r>:
 80084b8:	4901      	ldr	r1, [pc, #4]	; (80084c0 <_cleanup_r+0x8>)
 80084ba:	f000 b8af 	b.w	800861c <_fwalk_reent>
 80084be:	bf00      	nop
 80084c0:	080093e5 	.word	0x080093e5

080084c4 <__sfmoreglue>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	1e4a      	subs	r2, r1, #1
 80084c8:	2568      	movs	r5, #104	; 0x68
 80084ca:	4355      	muls	r5, r2
 80084cc:	460e      	mov	r6, r1
 80084ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084d2:	f7fe fc69 	bl	8006da8 <_malloc_r>
 80084d6:	4604      	mov	r4, r0
 80084d8:	b140      	cbz	r0, 80084ec <__sfmoreglue+0x28>
 80084da:	2100      	movs	r1, #0
 80084dc:	e9c0 1600 	strd	r1, r6, [r0]
 80084e0:	300c      	adds	r0, #12
 80084e2:	60a0      	str	r0, [r4, #8]
 80084e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084e8:	f7fe fc06 	bl	8006cf8 <memset>
 80084ec:	4620      	mov	r0, r4
 80084ee:	bd70      	pop	{r4, r5, r6, pc}

080084f0 <__sfp_lock_acquire>:
 80084f0:	4801      	ldr	r0, [pc, #4]	; (80084f8 <__sfp_lock_acquire+0x8>)
 80084f2:	f000 b8b8 	b.w	8008666 <__retarget_lock_acquire_recursive>
 80084f6:	bf00      	nop
 80084f8:	200012b0 	.word	0x200012b0

080084fc <__sfp_lock_release>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__sfp_lock_release+0x8>)
 80084fe:	f000 b8b3 	b.w	8008668 <__retarget_lock_release_recursive>
 8008502:	bf00      	nop
 8008504:	200012b0 	.word	0x200012b0

08008508 <__sinit_lock_acquire>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__sinit_lock_acquire+0x8>)
 800850a:	f000 b8ac 	b.w	8008666 <__retarget_lock_acquire_recursive>
 800850e:	bf00      	nop
 8008510:	200012ab 	.word	0x200012ab

08008514 <__sinit_lock_release>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__sinit_lock_release+0x8>)
 8008516:	f000 b8a7 	b.w	8008668 <__retarget_lock_release_recursive>
 800851a:	bf00      	nop
 800851c:	200012ab 	.word	0x200012ab

08008520 <__sinit>:
 8008520:	b510      	push	{r4, lr}
 8008522:	4604      	mov	r4, r0
 8008524:	f7ff fff0 	bl	8008508 <__sinit_lock_acquire>
 8008528:	69a3      	ldr	r3, [r4, #24]
 800852a:	b11b      	cbz	r3, 8008534 <__sinit+0x14>
 800852c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008530:	f7ff bff0 	b.w	8008514 <__sinit_lock_release>
 8008534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008538:	6523      	str	r3, [r4, #80]	; 0x50
 800853a:	4b13      	ldr	r3, [pc, #76]	; (8008588 <__sinit+0x68>)
 800853c:	4a13      	ldr	r2, [pc, #76]	; (800858c <__sinit+0x6c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	62a2      	str	r2, [r4, #40]	; 0x28
 8008542:	42a3      	cmp	r3, r4
 8008544:	bf04      	itt	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	61a3      	streq	r3, [r4, #24]
 800854a:	4620      	mov	r0, r4
 800854c:	f000 f820 	bl	8008590 <__sfp>
 8008550:	6060      	str	r0, [r4, #4]
 8008552:	4620      	mov	r0, r4
 8008554:	f000 f81c 	bl	8008590 <__sfp>
 8008558:	60a0      	str	r0, [r4, #8]
 800855a:	4620      	mov	r0, r4
 800855c:	f000 f818 	bl	8008590 <__sfp>
 8008560:	2200      	movs	r2, #0
 8008562:	60e0      	str	r0, [r4, #12]
 8008564:	2104      	movs	r1, #4
 8008566:	6860      	ldr	r0, [r4, #4]
 8008568:	f7ff ff82 	bl	8008470 <std>
 800856c:	68a0      	ldr	r0, [r4, #8]
 800856e:	2201      	movs	r2, #1
 8008570:	2109      	movs	r1, #9
 8008572:	f7ff ff7d 	bl	8008470 <std>
 8008576:	68e0      	ldr	r0, [r4, #12]
 8008578:	2202      	movs	r2, #2
 800857a:	2112      	movs	r1, #18
 800857c:	f7ff ff78 	bl	8008470 <std>
 8008580:	2301      	movs	r3, #1
 8008582:	61a3      	str	r3, [r4, #24]
 8008584:	e7d2      	b.n	800852c <__sinit+0xc>
 8008586:	bf00      	nop
 8008588:	0801571c 	.word	0x0801571c
 800858c:	080084b9 	.word	0x080084b9

08008590 <__sfp>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	4607      	mov	r7, r0
 8008594:	f7ff ffac 	bl	80084f0 <__sfp_lock_acquire>
 8008598:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <__sfp+0x84>)
 800859a:	681e      	ldr	r6, [r3, #0]
 800859c:	69b3      	ldr	r3, [r6, #24]
 800859e:	b913      	cbnz	r3, 80085a6 <__sfp+0x16>
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff ffbd 	bl	8008520 <__sinit>
 80085a6:	3648      	adds	r6, #72	; 0x48
 80085a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	d503      	bpl.n	80085b8 <__sfp+0x28>
 80085b0:	6833      	ldr	r3, [r6, #0]
 80085b2:	b30b      	cbz	r3, 80085f8 <__sfp+0x68>
 80085b4:	6836      	ldr	r6, [r6, #0]
 80085b6:	e7f7      	b.n	80085a8 <__sfp+0x18>
 80085b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085bc:	b9d5      	cbnz	r5, 80085f4 <__sfp+0x64>
 80085be:	4b16      	ldr	r3, [pc, #88]	; (8008618 <__sfp+0x88>)
 80085c0:	60e3      	str	r3, [r4, #12]
 80085c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085c6:	6665      	str	r5, [r4, #100]	; 0x64
 80085c8:	f000 f84c 	bl	8008664 <__retarget_lock_init_recursive>
 80085cc:	f7ff ff96 	bl	80084fc <__sfp_lock_release>
 80085d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085d8:	6025      	str	r5, [r4, #0]
 80085da:	61a5      	str	r5, [r4, #24]
 80085dc:	2208      	movs	r2, #8
 80085de:	4629      	mov	r1, r5
 80085e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085e4:	f7fe fb88 	bl	8006cf8 <memset>
 80085e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085f0:	4620      	mov	r0, r4
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f4:	3468      	adds	r4, #104	; 0x68
 80085f6:	e7d9      	b.n	80085ac <__sfp+0x1c>
 80085f8:	2104      	movs	r1, #4
 80085fa:	4638      	mov	r0, r7
 80085fc:	f7ff ff62 	bl	80084c4 <__sfmoreglue>
 8008600:	4604      	mov	r4, r0
 8008602:	6030      	str	r0, [r6, #0]
 8008604:	2800      	cmp	r0, #0
 8008606:	d1d5      	bne.n	80085b4 <__sfp+0x24>
 8008608:	f7ff ff78 	bl	80084fc <__sfp_lock_release>
 800860c:	230c      	movs	r3, #12
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	e7ee      	b.n	80085f0 <__sfp+0x60>
 8008612:	bf00      	nop
 8008614:	0801571c 	.word	0x0801571c
 8008618:	ffff0001 	.word	0xffff0001

0800861c <_fwalk_reent>:
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	4606      	mov	r6, r0
 8008622:	4688      	mov	r8, r1
 8008624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008628:	2700      	movs	r7, #0
 800862a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800862e:	f1b9 0901 	subs.w	r9, r9, #1
 8008632:	d505      	bpl.n	8008640 <_fwalk_reent+0x24>
 8008634:	6824      	ldr	r4, [r4, #0]
 8008636:	2c00      	cmp	r4, #0
 8008638:	d1f7      	bne.n	800862a <_fwalk_reent+0xe>
 800863a:	4638      	mov	r0, r7
 800863c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008640:	89ab      	ldrh	r3, [r5, #12]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d907      	bls.n	8008656 <_fwalk_reent+0x3a>
 8008646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800864a:	3301      	adds	r3, #1
 800864c:	d003      	beq.n	8008656 <_fwalk_reent+0x3a>
 800864e:	4629      	mov	r1, r5
 8008650:	4630      	mov	r0, r6
 8008652:	47c0      	blx	r8
 8008654:	4307      	orrs	r7, r0
 8008656:	3568      	adds	r5, #104	; 0x68
 8008658:	e7e9      	b.n	800862e <_fwalk_reent+0x12>
	...

0800865c <_localeconv_r>:
 800865c:	4800      	ldr	r0, [pc, #0]	; (8008660 <_localeconv_r+0x4>)
 800865e:	4770      	bx	lr
 8008660:	20000940 	.word	0x20000940

08008664 <__retarget_lock_init_recursive>:
 8008664:	4770      	bx	lr

08008666 <__retarget_lock_acquire_recursive>:
 8008666:	4770      	bx	lr

08008668 <__retarget_lock_release_recursive>:
 8008668:	4770      	bx	lr
	...

0800866c <__malloc_lock>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__malloc_lock+0x8>)
 800866e:	f7ff bffa 	b.w	8008666 <__retarget_lock_acquire_recursive>
 8008672:	bf00      	nop
 8008674:	200012ac 	.word	0x200012ac

08008678 <__malloc_unlock>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__malloc_unlock+0x8>)
 800867a:	f7ff bff5 	b.w	8008668 <__retarget_lock_release_recursive>
 800867e:	bf00      	nop
 8008680:	200012ac 	.word	0x200012ac

08008684 <_Balloc>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008688:	4604      	mov	r4, r0
 800868a:	460d      	mov	r5, r1
 800868c:	b976      	cbnz	r6, 80086ac <_Balloc+0x28>
 800868e:	2010      	movs	r0, #16
 8008690:	f7fe fb1c 	bl	8006ccc <malloc>
 8008694:	4602      	mov	r2, r0
 8008696:	6260      	str	r0, [r4, #36]	; 0x24
 8008698:	b920      	cbnz	r0, 80086a4 <_Balloc+0x20>
 800869a:	4b18      	ldr	r3, [pc, #96]	; (80086fc <_Balloc+0x78>)
 800869c:	4818      	ldr	r0, [pc, #96]	; (8008700 <_Balloc+0x7c>)
 800869e:	2166      	movs	r1, #102	; 0x66
 80086a0:	f000 fdec 	bl	800927c <__assert_func>
 80086a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a8:	6006      	str	r6, [r0, #0]
 80086aa:	60c6      	str	r6, [r0, #12]
 80086ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086ae:	68f3      	ldr	r3, [r6, #12]
 80086b0:	b183      	cbz	r3, 80086d4 <_Balloc+0x50>
 80086b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086ba:	b9b8      	cbnz	r0, 80086ec <_Balloc+0x68>
 80086bc:	2101      	movs	r1, #1
 80086be:	fa01 f605 	lsl.w	r6, r1, r5
 80086c2:	1d72      	adds	r2, r6, #5
 80086c4:	0092      	lsls	r2, r2, #2
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 fb5a 	bl	8008d80 <_calloc_r>
 80086cc:	b160      	cbz	r0, 80086e8 <_Balloc+0x64>
 80086ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086d2:	e00e      	b.n	80086f2 <_Balloc+0x6e>
 80086d4:	2221      	movs	r2, #33	; 0x21
 80086d6:	2104      	movs	r1, #4
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fb51 	bl	8008d80 <_calloc_r>
 80086de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086e0:	60f0      	str	r0, [r6, #12]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e4      	bne.n	80086b2 <_Balloc+0x2e>
 80086e8:	2000      	movs	r0, #0
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	6802      	ldr	r2, [r0, #0]
 80086ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086f2:	2300      	movs	r3, #0
 80086f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086f8:	e7f7      	b.n	80086ea <_Balloc+0x66>
 80086fa:	bf00      	nop
 80086fc:	08015761 	.word	0x08015761
 8008700:	08015848 	.word	0x08015848

08008704 <_Bfree>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008708:	4605      	mov	r5, r0
 800870a:	460c      	mov	r4, r1
 800870c:	b976      	cbnz	r6, 800872c <_Bfree+0x28>
 800870e:	2010      	movs	r0, #16
 8008710:	f7fe fadc 	bl	8006ccc <malloc>
 8008714:	4602      	mov	r2, r0
 8008716:	6268      	str	r0, [r5, #36]	; 0x24
 8008718:	b920      	cbnz	r0, 8008724 <_Bfree+0x20>
 800871a:	4b09      	ldr	r3, [pc, #36]	; (8008740 <_Bfree+0x3c>)
 800871c:	4809      	ldr	r0, [pc, #36]	; (8008744 <_Bfree+0x40>)
 800871e:	218a      	movs	r1, #138	; 0x8a
 8008720:	f000 fdac 	bl	800927c <__assert_func>
 8008724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008728:	6006      	str	r6, [r0, #0]
 800872a:	60c6      	str	r6, [r0, #12]
 800872c:	b13c      	cbz	r4, 800873e <_Bfree+0x3a>
 800872e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008730:	6862      	ldr	r2, [r4, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008738:	6021      	str	r1, [r4, #0]
 800873a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	08015761 	.word	0x08015761
 8008744:	08015848 	.word	0x08015848

08008748 <__multadd>:
 8008748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874c:	690e      	ldr	r6, [r1, #16]
 800874e:	4607      	mov	r7, r0
 8008750:	4698      	mov	r8, r3
 8008752:	460c      	mov	r4, r1
 8008754:	f101 0014 	add.w	r0, r1, #20
 8008758:	2300      	movs	r3, #0
 800875a:	6805      	ldr	r5, [r0, #0]
 800875c:	b2a9      	uxth	r1, r5
 800875e:	fb02 8101 	mla	r1, r2, r1, r8
 8008762:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008766:	0c2d      	lsrs	r5, r5, #16
 8008768:	fb02 c505 	mla	r5, r2, r5, ip
 800876c:	b289      	uxth	r1, r1
 800876e:	3301      	adds	r3, #1
 8008770:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008774:	429e      	cmp	r6, r3
 8008776:	f840 1b04 	str.w	r1, [r0], #4
 800877a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800877e:	dcec      	bgt.n	800875a <__multadd+0x12>
 8008780:	f1b8 0f00 	cmp.w	r8, #0
 8008784:	d022      	beq.n	80087cc <__multadd+0x84>
 8008786:	68a3      	ldr	r3, [r4, #8]
 8008788:	42b3      	cmp	r3, r6
 800878a:	dc19      	bgt.n	80087c0 <__multadd+0x78>
 800878c:	6861      	ldr	r1, [r4, #4]
 800878e:	4638      	mov	r0, r7
 8008790:	3101      	adds	r1, #1
 8008792:	f7ff ff77 	bl	8008684 <_Balloc>
 8008796:	4605      	mov	r5, r0
 8008798:	b928      	cbnz	r0, 80087a6 <__multadd+0x5e>
 800879a:	4602      	mov	r2, r0
 800879c:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <__multadd+0x8c>)
 800879e:	480e      	ldr	r0, [pc, #56]	; (80087d8 <__multadd+0x90>)
 80087a0:	21b5      	movs	r1, #181	; 0xb5
 80087a2:	f000 fd6b 	bl	800927c <__assert_func>
 80087a6:	6922      	ldr	r2, [r4, #16]
 80087a8:	3202      	adds	r2, #2
 80087aa:	f104 010c 	add.w	r1, r4, #12
 80087ae:	0092      	lsls	r2, r2, #2
 80087b0:	300c      	adds	r0, #12
 80087b2:	f7fe fa93 	bl	8006cdc <memcpy>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7ff ffa3 	bl	8008704 <_Bfree>
 80087be:	462c      	mov	r4, r5
 80087c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80087c4:	3601      	adds	r6, #1
 80087c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80087ca:	6126      	str	r6, [r4, #16]
 80087cc:	4620      	mov	r0, r4
 80087ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d2:	bf00      	nop
 80087d4:	080157d7 	.word	0x080157d7
 80087d8:	08015848 	.word	0x08015848

080087dc <__hi0bits>:
 80087dc:	0c03      	lsrs	r3, r0, #16
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	b9d3      	cbnz	r3, 8008818 <__hi0bits+0x3c>
 80087e2:	0400      	lsls	r0, r0, #16
 80087e4:	2310      	movs	r3, #16
 80087e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087ea:	bf04      	itt	eq
 80087ec:	0200      	lsleq	r0, r0, #8
 80087ee:	3308      	addeq	r3, #8
 80087f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087f4:	bf04      	itt	eq
 80087f6:	0100      	lsleq	r0, r0, #4
 80087f8:	3304      	addeq	r3, #4
 80087fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087fe:	bf04      	itt	eq
 8008800:	0080      	lsleq	r0, r0, #2
 8008802:	3302      	addeq	r3, #2
 8008804:	2800      	cmp	r0, #0
 8008806:	db05      	blt.n	8008814 <__hi0bits+0x38>
 8008808:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800880c:	f103 0301 	add.w	r3, r3, #1
 8008810:	bf08      	it	eq
 8008812:	2320      	moveq	r3, #32
 8008814:	4618      	mov	r0, r3
 8008816:	4770      	bx	lr
 8008818:	2300      	movs	r3, #0
 800881a:	e7e4      	b.n	80087e6 <__hi0bits+0xa>

0800881c <__lo0bits>:
 800881c:	6803      	ldr	r3, [r0, #0]
 800881e:	f013 0207 	ands.w	r2, r3, #7
 8008822:	4601      	mov	r1, r0
 8008824:	d00b      	beq.n	800883e <__lo0bits+0x22>
 8008826:	07da      	lsls	r2, r3, #31
 8008828:	d424      	bmi.n	8008874 <__lo0bits+0x58>
 800882a:	0798      	lsls	r0, r3, #30
 800882c:	bf49      	itett	mi
 800882e:	085b      	lsrmi	r3, r3, #1
 8008830:	089b      	lsrpl	r3, r3, #2
 8008832:	2001      	movmi	r0, #1
 8008834:	600b      	strmi	r3, [r1, #0]
 8008836:	bf5c      	itt	pl
 8008838:	600b      	strpl	r3, [r1, #0]
 800883a:	2002      	movpl	r0, #2
 800883c:	4770      	bx	lr
 800883e:	b298      	uxth	r0, r3
 8008840:	b9b0      	cbnz	r0, 8008870 <__lo0bits+0x54>
 8008842:	0c1b      	lsrs	r3, r3, #16
 8008844:	2010      	movs	r0, #16
 8008846:	f013 0fff 	tst.w	r3, #255	; 0xff
 800884a:	bf04      	itt	eq
 800884c:	0a1b      	lsreq	r3, r3, #8
 800884e:	3008      	addeq	r0, #8
 8008850:	071a      	lsls	r2, r3, #28
 8008852:	bf04      	itt	eq
 8008854:	091b      	lsreq	r3, r3, #4
 8008856:	3004      	addeq	r0, #4
 8008858:	079a      	lsls	r2, r3, #30
 800885a:	bf04      	itt	eq
 800885c:	089b      	lsreq	r3, r3, #2
 800885e:	3002      	addeq	r0, #2
 8008860:	07da      	lsls	r2, r3, #31
 8008862:	d403      	bmi.n	800886c <__lo0bits+0x50>
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	f100 0001 	add.w	r0, r0, #1
 800886a:	d005      	beq.n	8008878 <__lo0bits+0x5c>
 800886c:	600b      	str	r3, [r1, #0]
 800886e:	4770      	bx	lr
 8008870:	4610      	mov	r0, r2
 8008872:	e7e8      	b.n	8008846 <__lo0bits+0x2a>
 8008874:	2000      	movs	r0, #0
 8008876:	4770      	bx	lr
 8008878:	2020      	movs	r0, #32
 800887a:	4770      	bx	lr

0800887c <__i2b>:
 800887c:	b510      	push	{r4, lr}
 800887e:	460c      	mov	r4, r1
 8008880:	2101      	movs	r1, #1
 8008882:	f7ff feff 	bl	8008684 <_Balloc>
 8008886:	4602      	mov	r2, r0
 8008888:	b928      	cbnz	r0, 8008896 <__i2b+0x1a>
 800888a:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <__i2b+0x24>)
 800888c:	4805      	ldr	r0, [pc, #20]	; (80088a4 <__i2b+0x28>)
 800888e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008892:	f000 fcf3 	bl	800927c <__assert_func>
 8008896:	2301      	movs	r3, #1
 8008898:	6144      	str	r4, [r0, #20]
 800889a:	6103      	str	r3, [r0, #16]
 800889c:	bd10      	pop	{r4, pc}
 800889e:	bf00      	nop
 80088a0:	080157d7 	.word	0x080157d7
 80088a4:	08015848 	.word	0x08015848

080088a8 <__multiply>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	4614      	mov	r4, r2
 80088ae:	690a      	ldr	r2, [r1, #16]
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	bfb8      	it	lt
 80088b6:	460b      	movlt	r3, r1
 80088b8:	460d      	mov	r5, r1
 80088ba:	bfbc      	itt	lt
 80088bc:	4625      	movlt	r5, r4
 80088be:	461c      	movlt	r4, r3
 80088c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80088c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80088c8:	68ab      	ldr	r3, [r5, #8]
 80088ca:	6869      	ldr	r1, [r5, #4]
 80088cc:	eb0a 0709 	add.w	r7, sl, r9
 80088d0:	42bb      	cmp	r3, r7
 80088d2:	b085      	sub	sp, #20
 80088d4:	bfb8      	it	lt
 80088d6:	3101      	addlt	r1, #1
 80088d8:	f7ff fed4 	bl	8008684 <_Balloc>
 80088dc:	b930      	cbnz	r0, 80088ec <__multiply+0x44>
 80088de:	4602      	mov	r2, r0
 80088e0:	4b42      	ldr	r3, [pc, #264]	; (80089ec <__multiply+0x144>)
 80088e2:	4843      	ldr	r0, [pc, #268]	; (80089f0 <__multiply+0x148>)
 80088e4:	f240 115d 	movw	r1, #349	; 0x15d
 80088e8:	f000 fcc8 	bl	800927c <__assert_func>
 80088ec:	f100 0614 	add.w	r6, r0, #20
 80088f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80088f4:	4633      	mov	r3, r6
 80088f6:	2200      	movs	r2, #0
 80088f8:	4543      	cmp	r3, r8
 80088fa:	d31e      	bcc.n	800893a <__multiply+0x92>
 80088fc:	f105 0c14 	add.w	ip, r5, #20
 8008900:	f104 0314 	add.w	r3, r4, #20
 8008904:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008908:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800890c:	9202      	str	r2, [sp, #8]
 800890e:	ebac 0205 	sub.w	r2, ip, r5
 8008912:	3a15      	subs	r2, #21
 8008914:	f022 0203 	bic.w	r2, r2, #3
 8008918:	3204      	adds	r2, #4
 800891a:	f105 0115 	add.w	r1, r5, #21
 800891e:	458c      	cmp	ip, r1
 8008920:	bf38      	it	cc
 8008922:	2204      	movcc	r2, #4
 8008924:	9201      	str	r2, [sp, #4]
 8008926:	9a02      	ldr	r2, [sp, #8]
 8008928:	9303      	str	r3, [sp, #12]
 800892a:	429a      	cmp	r2, r3
 800892c:	d808      	bhi.n	8008940 <__multiply+0x98>
 800892e:	2f00      	cmp	r7, #0
 8008930:	dc55      	bgt.n	80089de <__multiply+0x136>
 8008932:	6107      	str	r7, [r0, #16]
 8008934:	b005      	add	sp, #20
 8008936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893a:	f843 2b04 	str.w	r2, [r3], #4
 800893e:	e7db      	b.n	80088f8 <__multiply+0x50>
 8008940:	f8b3 a000 	ldrh.w	sl, [r3]
 8008944:	f1ba 0f00 	cmp.w	sl, #0
 8008948:	d020      	beq.n	800898c <__multiply+0xe4>
 800894a:	f105 0e14 	add.w	lr, r5, #20
 800894e:	46b1      	mov	r9, r6
 8008950:	2200      	movs	r2, #0
 8008952:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008956:	f8d9 b000 	ldr.w	fp, [r9]
 800895a:	b2a1      	uxth	r1, r4
 800895c:	fa1f fb8b 	uxth.w	fp, fp
 8008960:	fb0a b101 	mla	r1, sl, r1, fp
 8008964:	4411      	add	r1, r2
 8008966:	f8d9 2000 	ldr.w	r2, [r9]
 800896a:	0c24      	lsrs	r4, r4, #16
 800896c:	0c12      	lsrs	r2, r2, #16
 800896e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008972:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008976:	b289      	uxth	r1, r1
 8008978:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800897c:	45f4      	cmp	ip, lr
 800897e:	f849 1b04 	str.w	r1, [r9], #4
 8008982:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008986:	d8e4      	bhi.n	8008952 <__multiply+0xaa>
 8008988:	9901      	ldr	r1, [sp, #4]
 800898a:	5072      	str	r2, [r6, r1]
 800898c:	9a03      	ldr	r2, [sp, #12]
 800898e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008992:	3304      	adds	r3, #4
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	d01f      	beq.n	80089da <__multiply+0x132>
 800899a:	6834      	ldr	r4, [r6, #0]
 800899c:	f105 0114 	add.w	r1, r5, #20
 80089a0:	46b6      	mov	lr, r6
 80089a2:	f04f 0a00 	mov.w	sl, #0
 80089a6:	880a      	ldrh	r2, [r1, #0]
 80089a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80089ac:	fb09 b202 	mla	r2, r9, r2, fp
 80089b0:	4492      	add	sl, r2
 80089b2:	b2a4      	uxth	r4, r4
 80089b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80089b8:	f84e 4b04 	str.w	r4, [lr], #4
 80089bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80089c0:	f8be 2000 	ldrh.w	r2, [lr]
 80089c4:	0c24      	lsrs	r4, r4, #16
 80089c6:	fb09 2404 	mla	r4, r9, r4, r2
 80089ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80089ce:	458c      	cmp	ip, r1
 80089d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80089d4:	d8e7      	bhi.n	80089a6 <__multiply+0xfe>
 80089d6:	9a01      	ldr	r2, [sp, #4]
 80089d8:	50b4      	str	r4, [r6, r2]
 80089da:	3604      	adds	r6, #4
 80089dc:	e7a3      	b.n	8008926 <__multiply+0x7e>
 80089de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1a5      	bne.n	8008932 <__multiply+0x8a>
 80089e6:	3f01      	subs	r7, #1
 80089e8:	e7a1      	b.n	800892e <__multiply+0x86>
 80089ea:	bf00      	nop
 80089ec:	080157d7 	.word	0x080157d7
 80089f0:	08015848 	.word	0x08015848

080089f4 <__pow5mult>:
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	4615      	mov	r5, r2
 80089fa:	f012 0203 	ands.w	r2, r2, #3
 80089fe:	4606      	mov	r6, r0
 8008a00:	460f      	mov	r7, r1
 8008a02:	d007      	beq.n	8008a14 <__pow5mult+0x20>
 8008a04:	4c25      	ldr	r4, [pc, #148]	; (8008a9c <__pow5mult+0xa8>)
 8008a06:	3a01      	subs	r2, #1
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a0e:	f7ff fe9b 	bl	8008748 <__multadd>
 8008a12:	4607      	mov	r7, r0
 8008a14:	10ad      	asrs	r5, r5, #2
 8008a16:	d03d      	beq.n	8008a94 <__pow5mult+0xa0>
 8008a18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a1a:	b97c      	cbnz	r4, 8008a3c <__pow5mult+0x48>
 8008a1c:	2010      	movs	r0, #16
 8008a1e:	f7fe f955 	bl	8006ccc <malloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	6270      	str	r0, [r6, #36]	; 0x24
 8008a26:	b928      	cbnz	r0, 8008a34 <__pow5mult+0x40>
 8008a28:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <__pow5mult+0xac>)
 8008a2a:	481e      	ldr	r0, [pc, #120]	; (8008aa4 <__pow5mult+0xb0>)
 8008a2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a30:	f000 fc24 	bl	800927c <__assert_func>
 8008a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a38:	6004      	str	r4, [r0, #0]
 8008a3a:	60c4      	str	r4, [r0, #12]
 8008a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a44:	b94c      	cbnz	r4, 8008a5a <__pow5mult+0x66>
 8008a46:	f240 2171 	movw	r1, #625	; 0x271
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f7ff ff16 	bl	800887c <__i2b>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a56:	4604      	mov	r4, r0
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	f04f 0900 	mov.w	r9, #0
 8008a5e:	07eb      	lsls	r3, r5, #31
 8008a60:	d50a      	bpl.n	8008a78 <__pow5mult+0x84>
 8008a62:	4639      	mov	r1, r7
 8008a64:	4622      	mov	r2, r4
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7ff ff1e 	bl	80088a8 <__multiply>
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	4680      	mov	r8, r0
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7ff fe47 	bl	8008704 <_Bfree>
 8008a76:	4647      	mov	r7, r8
 8008a78:	106d      	asrs	r5, r5, #1
 8008a7a:	d00b      	beq.n	8008a94 <__pow5mult+0xa0>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	b938      	cbnz	r0, 8008a90 <__pow5mult+0x9c>
 8008a80:	4622      	mov	r2, r4
 8008a82:	4621      	mov	r1, r4
 8008a84:	4630      	mov	r0, r6
 8008a86:	f7ff ff0f 	bl	80088a8 <__multiply>
 8008a8a:	6020      	str	r0, [r4, #0]
 8008a8c:	f8c0 9000 	str.w	r9, [r0]
 8008a90:	4604      	mov	r4, r0
 8008a92:	e7e4      	b.n	8008a5e <__pow5mult+0x6a>
 8008a94:	4638      	mov	r0, r7
 8008a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9a:	bf00      	nop
 8008a9c:	08015998 	.word	0x08015998
 8008aa0:	08015761 	.word	0x08015761
 8008aa4:	08015848 	.word	0x08015848

08008aa8 <__lshift>:
 8008aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	460c      	mov	r4, r1
 8008aae:	6849      	ldr	r1, [r1, #4]
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ab6:	68a3      	ldr	r3, [r4, #8]
 8008ab8:	4607      	mov	r7, r0
 8008aba:	4691      	mov	r9, r2
 8008abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ac0:	f108 0601 	add.w	r6, r8, #1
 8008ac4:	42b3      	cmp	r3, r6
 8008ac6:	db0b      	blt.n	8008ae0 <__lshift+0x38>
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7ff fddb 	bl	8008684 <_Balloc>
 8008ace:	4605      	mov	r5, r0
 8008ad0:	b948      	cbnz	r0, 8008ae6 <__lshift+0x3e>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	4b28      	ldr	r3, [pc, #160]	; (8008b78 <__lshift+0xd0>)
 8008ad6:	4829      	ldr	r0, [pc, #164]	; (8008b7c <__lshift+0xd4>)
 8008ad8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008adc:	f000 fbce 	bl	800927c <__assert_func>
 8008ae0:	3101      	adds	r1, #1
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	e7ee      	b.n	8008ac4 <__lshift+0x1c>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f100 0114 	add.w	r1, r0, #20
 8008aec:	f100 0210 	add.w	r2, r0, #16
 8008af0:	4618      	mov	r0, r3
 8008af2:	4553      	cmp	r3, sl
 8008af4:	db33      	blt.n	8008b5e <__lshift+0xb6>
 8008af6:	6920      	ldr	r0, [r4, #16]
 8008af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008afc:	f104 0314 	add.w	r3, r4, #20
 8008b00:	f019 091f 	ands.w	r9, r9, #31
 8008b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b0c:	d02b      	beq.n	8008b66 <__lshift+0xbe>
 8008b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b12:	468a      	mov	sl, r1
 8008b14:	2200      	movs	r2, #0
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	fa00 f009 	lsl.w	r0, r0, r9
 8008b1c:	4302      	orrs	r2, r0
 8008b1e:	f84a 2b04 	str.w	r2, [sl], #4
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	459c      	cmp	ip, r3
 8008b28:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b2c:	d8f3      	bhi.n	8008b16 <__lshift+0x6e>
 8008b2e:	ebac 0304 	sub.w	r3, ip, r4
 8008b32:	3b15      	subs	r3, #21
 8008b34:	f023 0303 	bic.w	r3, r3, #3
 8008b38:	3304      	adds	r3, #4
 8008b3a:	f104 0015 	add.w	r0, r4, #21
 8008b3e:	4584      	cmp	ip, r0
 8008b40:	bf38      	it	cc
 8008b42:	2304      	movcc	r3, #4
 8008b44:	50ca      	str	r2, [r1, r3]
 8008b46:	b10a      	cbz	r2, 8008b4c <__lshift+0xa4>
 8008b48:	f108 0602 	add.w	r6, r8, #2
 8008b4c:	3e01      	subs	r6, #1
 8008b4e:	4638      	mov	r0, r7
 8008b50:	612e      	str	r6, [r5, #16]
 8008b52:	4621      	mov	r1, r4
 8008b54:	f7ff fdd6 	bl	8008704 <_Bfree>
 8008b58:	4628      	mov	r0, r5
 8008b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b62:	3301      	adds	r3, #1
 8008b64:	e7c5      	b.n	8008af2 <__lshift+0x4a>
 8008b66:	3904      	subs	r1, #4
 8008b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b70:	459c      	cmp	ip, r3
 8008b72:	d8f9      	bhi.n	8008b68 <__lshift+0xc0>
 8008b74:	e7ea      	b.n	8008b4c <__lshift+0xa4>
 8008b76:	bf00      	nop
 8008b78:	080157d7 	.word	0x080157d7
 8008b7c:	08015848 	.word	0x08015848

08008b80 <__mcmp>:
 8008b80:	b530      	push	{r4, r5, lr}
 8008b82:	6902      	ldr	r2, [r0, #16]
 8008b84:	690c      	ldr	r4, [r1, #16]
 8008b86:	1b12      	subs	r2, r2, r4
 8008b88:	d10e      	bne.n	8008ba8 <__mcmp+0x28>
 8008b8a:	f100 0314 	add.w	r3, r0, #20
 8008b8e:	3114      	adds	r1, #20
 8008b90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ba0:	42a5      	cmp	r5, r4
 8008ba2:	d003      	beq.n	8008bac <__mcmp+0x2c>
 8008ba4:	d305      	bcc.n	8008bb2 <__mcmp+0x32>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4610      	mov	r0, r2
 8008baa:	bd30      	pop	{r4, r5, pc}
 8008bac:	4283      	cmp	r3, r0
 8008bae:	d3f3      	bcc.n	8008b98 <__mcmp+0x18>
 8008bb0:	e7fa      	b.n	8008ba8 <__mcmp+0x28>
 8008bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb6:	e7f7      	b.n	8008ba8 <__mcmp+0x28>

08008bb8 <__mdiff>:
 8008bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	4617      	mov	r7, r2
 8008bc6:	f7ff ffdb 	bl	8008b80 <__mcmp>
 8008bca:	1e05      	subs	r5, r0, #0
 8008bcc:	d110      	bne.n	8008bf0 <__mdiff+0x38>
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff fd57 	bl	8008684 <_Balloc>
 8008bd6:	b930      	cbnz	r0, 8008be6 <__mdiff+0x2e>
 8008bd8:	4b39      	ldr	r3, [pc, #228]	; (8008cc0 <__mdiff+0x108>)
 8008bda:	4602      	mov	r2, r0
 8008bdc:	f240 2132 	movw	r1, #562	; 0x232
 8008be0:	4838      	ldr	r0, [pc, #224]	; (8008cc4 <__mdiff+0x10c>)
 8008be2:	f000 fb4b 	bl	800927c <__assert_func>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf0:	bfa4      	itt	ge
 8008bf2:	463b      	movge	r3, r7
 8008bf4:	4627      	movge	r7, r4
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	bfa6      	itte	ge
 8008bfc:	461c      	movge	r4, r3
 8008bfe:	2500      	movge	r5, #0
 8008c00:	2501      	movlt	r5, #1
 8008c02:	f7ff fd3f 	bl	8008684 <_Balloc>
 8008c06:	b920      	cbnz	r0, 8008c12 <__mdiff+0x5a>
 8008c08:	4b2d      	ldr	r3, [pc, #180]	; (8008cc0 <__mdiff+0x108>)
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c10:	e7e6      	b.n	8008be0 <__mdiff+0x28>
 8008c12:	693e      	ldr	r6, [r7, #16]
 8008c14:	60c5      	str	r5, [r0, #12]
 8008c16:	6925      	ldr	r5, [r4, #16]
 8008c18:	f107 0114 	add.w	r1, r7, #20
 8008c1c:	f104 0914 	add.w	r9, r4, #20
 8008c20:	f100 0e14 	add.w	lr, r0, #20
 8008c24:	f107 0210 	add.w	r2, r7, #16
 8008c28:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008c2c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008c30:	46f2      	mov	sl, lr
 8008c32:	2700      	movs	r7, #0
 8008c34:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c3c:	fa1f f883 	uxth.w	r8, r3
 8008c40:	fa17 f78b 	uxtah	r7, r7, fp
 8008c44:	0c1b      	lsrs	r3, r3, #16
 8008c46:	eba7 0808 	sub.w	r8, r7, r8
 8008c4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c52:	fa1f f888 	uxth.w	r8, r8
 8008c56:	141f      	asrs	r7, r3, #16
 8008c58:	454d      	cmp	r5, r9
 8008c5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c5e:	f84a 3b04 	str.w	r3, [sl], #4
 8008c62:	d8e7      	bhi.n	8008c34 <__mdiff+0x7c>
 8008c64:	1b2b      	subs	r3, r5, r4
 8008c66:	3b15      	subs	r3, #21
 8008c68:	f023 0303 	bic.w	r3, r3, #3
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	3415      	adds	r4, #21
 8008c70:	42a5      	cmp	r5, r4
 8008c72:	bf38      	it	cc
 8008c74:	2304      	movcc	r3, #4
 8008c76:	4419      	add	r1, r3
 8008c78:	4473      	add	r3, lr
 8008c7a:	469e      	mov	lr, r3
 8008c7c:	460d      	mov	r5, r1
 8008c7e:	4565      	cmp	r5, ip
 8008c80:	d30e      	bcc.n	8008ca0 <__mdiff+0xe8>
 8008c82:	f10c 0203 	add.w	r2, ip, #3
 8008c86:	1a52      	subs	r2, r2, r1
 8008c88:	f022 0203 	bic.w	r2, r2, #3
 8008c8c:	3903      	subs	r1, #3
 8008c8e:	458c      	cmp	ip, r1
 8008c90:	bf38      	it	cc
 8008c92:	2200      	movcc	r2, #0
 8008c94:	441a      	add	r2, r3
 8008c96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c9a:	b17b      	cbz	r3, 8008cbc <__mdiff+0x104>
 8008c9c:	6106      	str	r6, [r0, #16]
 8008c9e:	e7a5      	b.n	8008bec <__mdiff+0x34>
 8008ca0:	f855 8b04 	ldr.w	r8, [r5], #4
 8008ca4:	fa17 f488 	uxtah	r4, r7, r8
 8008ca8:	1422      	asrs	r2, r4, #16
 8008caa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008cae:	b2a4      	uxth	r4, r4
 8008cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008cb4:	f84e 4b04 	str.w	r4, [lr], #4
 8008cb8:	1417      	asrs	r7, r2, #16
 8008cba:	e7e0      	b.n	8008c7e <__mdiff+0xc6>
 8008cbc:	3e01      	subs	r6, #1
 8008cbe:	e7ea      	b.n	8008c96 <__mdiff+0xde>
 8008cc0:	080157d7 	.word	0x080157d7
 8008cc4:	08015848 	.word	0x08015848

08008cc8 <__d2b>:
 8008cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ccc:	4689      	mov	r9, r1
 8008cce:	2101      	movs	r1, #1
 8008cd0:	ec57 6b10 	vmov	r6, r7, d0
 8008cd4:	4690      	mov	r8, r2
 8008cd6:	f7ff fcd5 	bl	8008684 <_Balloc>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	b930      	cbnz	r0, 8008cec <__d2b+0x24>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	4b25      	ldr	r3, [pc, #148]	; (8008d78 <__d2b+0xb0>)
 8008ce2:	4826      	ldr	r0, [pc, #152]	; (8008d7c <__d2b+0xb4>)
 8008ce4:	f240 310a 	movw	r1, #778	; 0x30a
 8008ce8:	f000 fac8 	bl	800927c <__assert_func>
 8008cec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008cf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008cf4:	bb35      	cbnz	r5, 8008d44 <__d2b+0x7c>
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	d028      	beq.n	8008d4e <__d2b+0x86>
 8008cfc:	4668      	mov	r0, sp
 8008cfe:	9600      	str	r6, [sp, #0]
 8008d00:	f7ff fd8c 	bl	800881c <__lo0bits>
 8008d04:	9900      	ldr	r1, [sp, #0]
 8008d06:	b300      	cbz	r0, 8008d4a <__d2b+0x82>
 8008d08:	9a01      	ldr	r2, [sp, #4]
 8008d0a:	f1c0 0320 	rsb	r3, r0, #32
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	430b      	orrs	r3, r1
 8008d14:	40c2      	lsrs	r2, r0
 8008d16:	6163      	str	r3, [r4, #20]
 8008d18:	9201      	str	r2, [sp, #4]
 8008d1a:	9b01      	ldr	r3, [sp, #4]
 8008d1c:	61a3      	str	r3, [r4, #24]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bf14      	ite	ne
 8008d22:	2202      	movne	r2, #2
 8008d24:	2201      	moveq	r2, #1
 8008d26:	6122      	str	r2, [r4, #16]
 8008d28:	b1d5      	cbz	r5, 8008d60 <__d2b+0x98>
 8008d2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d2e:	4405      	add	r5, r0
 8008d30:	f8c9 5000 	str.w	r5, [r9]
 8008d34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d38:	f8c8 0000 	str.w	r0, [r8]
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	b003      	add	sp, #12
 8008d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d48:	e7d5      	b.n	8008cf6 <__d2b+0x2e>
 8008d4a:	6161      	str	r1, [r4, #20]
 8008d4c:	e7e5      	b.n	8008d1a <__d2b+0x52>
 8008d4e:	a801      	add	r0, sp, #4
 8008d50:	f7ff fd64 	bl	800881c <__lo0bits>
 8008d54:	9b01      	ldr	r3, [sp, #4]
 8008d56:	6163      	str	r3, [r4, #20]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	6122      	str	r2, [r4, #16]
 8008d5c:	3020      	adds	r0, #32
 8008d5e:	e7e3      	b.n	8008d28 <__d2b+0x60>
 8008d60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d68:	f8c9 0000 	str.w	r0, [r9]
 8008d6c:	6918      	ldr	r0, [r3, #16]
 8008d6e:	f7ff fd35 	bl	80087dc <__hi0bits>
 8008d72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d76:	e7df      	b.n	8008d38 <__d2b+0x70>
 8008d78:	080157d7 	.word	0x080157d7
 8008d7c:	08015848 	.word	0x08015848

08008d80 <_calloc_r>:
 8008d80:	b513      	push	{r0, r1, r4, lr}
 8008d82:	434a      	muls	r2, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	9201      	str	r2, [sp, #4]
 8008d88:	f7fe f80e 	bl	8006da8 <_malloc_r>
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	b118      	cbz	r0, 8008d98 <_calloc_r+0x18>
 8008d90:	9a01      	ldr	r2, [sp, #4]
 8008d92:	2100      	movs	r1, #0
 8008d94:	f7fd ffb0 	bl	8006cf8 <memset>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	b002      	add	sp, #8
 8008d9c:	bd10      	pop	{r4, pc}

08008d9e <__sfputc_r>:
 8008d9e:	6893      	ldr	r3, [r2, #8]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	b410      	push	{r4}
 8008da6:	6093      	str	r3, [r2, #8]
 8008da8:	da08      	bge.n	8008dbc <__sfputc_r+0x1e>
 8008daa:	6994      	ldr	r4, [r2, #24]
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	db01      	blt.n	8008db4 <__sfputc_r+0x16>
 8008db0:	290a      	cmp	r1, #10
 8008db2:	d103      	bne.n	8008dbc <__sfputc_r+0x1e>
 8008db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db8:	f000 b98e 	b.w	80090d8 <__swbuf_r>
 8008dbc:	6813      	ldr	r3, [r2, #0]
 8008dbe:	1c58      	adds	r0, r3, #1
 8008dc0:	6010      	str	r0, [r2, #0]
 8008dc2:	7019      	strb	r1, [r3, #0]
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <__sfputs_r>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	4606      	mov	r6, r0
 8008dd0:	460f      	mov	r7, r1
 8008dd2:	4614      	mov	r4, r2
 8008dd4:	18d5      	adds	r5, r2, r3
 8008dd6:	42ac      	cmp	r4, r5
 8008dd8:	d101      	bne.n	8008dde <__sfputs_r+0x12>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e007      	b.n	8008dee <__sfputs_r+0x22>
 8008dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de2:	463a      	mov	r2, r7
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff ffda 	bl	8008d9e <__sfputc_r>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d1f3      	bne.n	8008dd6 <__sfputs_r+0xa>
 8008dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008df0 <_vfiprintf_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	460d      	mov	r5, r1
 8008df6:	b09d      	sub	sp, #116	; 0x74
 8008df8:	4614      	mov	r4, r2
 8008dfa:	4698      	mov	r8, r3
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	b118      	cbz	r0, 8008e08 <_vfiprintf_r+0x18>
 8008e00:	6983      	ldr	r3, [r0, #24]
 8008e02:	b90b      	cbnz	r3, 8008e08 <_vfiprintf_r+0x18>
 8008e04:	f7ff fb8c 	bl	8008520 <__sinit>
 8008e08:	4b89      	ldr	r3, [pc, #548]	; (8009030 <_vfiprintf_r+0x240>)
 8008e0a:	429d      	cmp	r5, r3
 8008e0c:	d11b      	bne.n	8008e46 <_vfiprintf_r+0x56>
 8008e0e:	6875      	ldr	r5, [r6, #4]
 8008e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e12:	07d9      	lsls	r1, r3, #31
 8008e14:	d405      	bmi.n	8008e22 <_vfiprintf_r+0x32>
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	059a      	lsls	r2, r3, #22
 8008e1a:	d402      	bmi.n	8008e22 <_vfiprintf_r+0x32>
 8008e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1e:	f7ff fc22 	bl	8008666 <__retarget_lock_acquire_recursive>
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	071b      	lsls	r3, r3, #28
 8008e26:	d501      	bpl.n	8008e2c <_vfiprintf_r+0x3c>
 8008e28:	692b      	ldr	r3, [r5, #16]
 8008e2a:	b9eb      	cbnz	r3, 8008e68 <_vfiprintf_r+0x78>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f000 f9b6 	bl	80091a0 <__swsetup_r>
 8008e34:	b1c0      	cbz	r0, 8008e68 <_vfiprintf_r+0x78>
 8008e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e38:	07dc      	lsls	r4, r3, #31
 8008e3a:	d50e      	bpl.n	8008e5a <_vfiprintf_r+0x6a>
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	b01d      	add	sp, #116	; 0x74
 8008e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e46:	4b7b      	ldr	r3, [pc, #492]	; (8009034 <_vfiprintf_r+0x244>)
 8008e48:	429d      	cmp	r5, r3
 8008e4a:	d101      	bne.n	8008e50 <_vfiprintf_r+0x60>
 8008e4c:	68b5      	ldr	r5, [r6, #8]
 8008e4e:	e7df      	b.n	8008e10 <_vfiprintf_r+0x20>
 8008e50:	4b79      	ldr	r3, [pc, #484]	; (8009038 <_vfiprintf_r+0x248>)
 8008e52:	429d      	cmp	r5, r3
 8008e54:	bf08      	it	eq
 8008e56:	68f5      	ldreq	r5, [r6, #12]
 8008e58:	e7da      	b.n	8008e10 <_vfiprintf_r+0x20>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	0598      	lsls	r0, r3, #22
 8008e5e:	d4ed      	bmi.n	8008e3c <_vfiprintf_r+0x4c>
 8008e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e62:	f7ff fc01 	bl	8008668 <__retarget_lock_release_recursive>
 8008e66:	e7e9      	b.n	8008e3c <_vfiprintf_r+0x4c>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e76:	2330      	movs	r3, #48	; 0x30
 8008e78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800903c <_vfiprintf_r+0x24c>
 8008e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e80:	f04f 0901 	mov.w	r9, #1
 8008e84:	4623      	mov	r3, r4
 8008e86:	469a      	mov	sl, r3
 8008e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e8c:	b10a      	cbz	r2, 8008e92 <_vfiprintf_r+0xa2>
 8008e8e:	2a25      	cmp	r2, #37	; 0x25
 8008e90:	d1f9      	bne.n	8008e86 <_vfiprintf_r+0x96>
 8008e92:	ebba 0b04 	subs.w	fp, sl, r4
 8008e96:	d00b      	beq.n	8008eb0 <_vfiprintf_r+0xc0>
 8008e98:	465b      	mov	r3, fp
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7ff ff94 	bl	8008dcc <__sfputs_r>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f000 80aa 	beq.w	8008ffe <_vfiprintf_r+0x20e>
 8008eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eac:	445a      	add	r2, fp
 8008eae:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 80a2 	beq.w	8008ffe <_vfiprintf_r+0x20e>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ec4:	f10a 0a01 	add.w	sl, sl, #1
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	9307      	str	r3, [sp, #28]
 8008ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ed2:	4654      	mov	r4, sl
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eda:	4858      	ldr	r0, [pc, #352]	; (800903c <_vfiprintf_r+0x24c>)
 8008edc:	f7f7 f980 	bl	80001e0 <memchr>
 8008ee0:	9a04      	ldr	r2, [sp, #16]
 8008ee2:	b9d8      	cbnz	r0, 8008f1c <_vfiprintf_r+0x12c>
 8008ee4:	06d1      	lsls	r1, r2, #27
 8008ee6:	bf44      	itt	mi
 8008ee8:	2320      	movmi	r3, #32
 8008eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eee:	0713      	lsls	r3, r2, #28
 8008ef0:	bf44      	itt	mi
 8008ef2:	232b      	movmi	r3, #43	; 0x2b
 8008ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8008efc:	2b2a      	cmp	r3, #42	; 0x2a
 8008efe:	d015      	beq.n	8008f2c <_vfiprintf_r+0x13c>
 8008f00:	9a07      	ldr	r2, [sp, #28]
 8008f02:	4654      	mov	r4, sl
 8008f04:	2000      	movs	r0, #0
 8008f06:	f04f 0c0a 	mov.w	ip, #10
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f10:	3b30      	subs	r3, #48	; 0x30
 8008f12:	2b09      	cmp	r3, #9
 8008f14:	d94e      	bls.n	8008fb4 <_vfiprintf_r+0x1c4>
 8008f16:	b1b0      	cbz	r0, 8008f46 <_vfiprintf_r+0x156>
 8008f18:	9207      	str	r2, [sp, #28]
 8008f1a:	e014      	b.n	8008f46 <_vfiprintf_r+0x156>
 8008f1c:	eba0 0308 	sub.w	r3, r0, r8
 8008f20:	fa09 f303 	lsl.w	r3, r9, r3
 8008f24:	4313      	orrs	r3, r2
 8008f26:	9304      	str	r3, [sp, #16]
 8008f28:	46a2      	mov	sl, r4
 8008f2a:	e7d2      	b.n	8008ed2 <_vfiprintf_r+0xe2>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	1d19      	adds	r1, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	9103      	str	r1, [sp, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfbb      	ittet	lt
 8008f38:	425b      	neglt	r3, r3
 8008f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f3e:	9307      	strge	r3, [sp, #28]
 8008f40:	9307      	strlt	r3, [sp, #28]
 8008f42:	bfb8      	it	lt
 8008f44:	9204      	strlt	r2, [sp, #16]
 8008f46:	7823      	ldrb	r3, [r4, #0]
 8008f48:	2b2e      	cmp	r3, #46	; 0x2e
 8008f4a:	d10c      	bne.n	8008f66 <_vfiprintf_r+0x176>
 8008f4c:	7863      	ldrb	r3, [r4, #1]
 8008f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f50:	d135      	bne.n	8008fbe <_vfiprintf_r+0x1ce>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	1d1a      	adds	r2, r3, #4
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	9203      	str	r2, [sp, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfb8      	it	lt
 8008f5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f62:	3402      	adds	r4, #2
 8008f64:	9305      	str	r3, [sp, #20]
 8008f66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800904c <_vfiprintf_r+0x25c>
 8008f6a:	7821      	ldrb	r1, [r4, #0]
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	4650      	mov	r0, sl
 8008f70:	f7f7 f936 	bl	80001e0 <memchr>
 8008f74:	b140      	cbz	r0, 8008f88 <_vfiprintf_r+0x198>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	eba0 000a 	sub.w	r0, r0, sl
 8008f7c:	fa03 f000 	lsl.w	r0, r3, r0
 8008f80:	9b04      	ldr	r3, [sp, #16]
 8008f82:	4303      	orrs	r3, r0
 8008f84:	3401      	adds	r4, #1
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8c:	482c      	ldr	r0, [pc, #176]	; (8009040 <_vfiprintf_r+0x250>)
 8008f8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f92:	2206      	movs	r2, #6
 8008f94:	f7f7 f924 	bl	80001e0 <memchr>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d03f      	beq.n	800901c <_vfiprintf_r+0x22c>
 8008f9c:	4b29      	ldr	r3, [pc, #164]	; (8009044 <_vfiprintf_r+0x254>)
 8008f9e:	bb1b      	cbnz	r3, 8008fe8 <_vfiprintf_r+0x1f8>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	3307      	adds	r3, #7
 8008fa4:	f023 0307 	bic.w	r3, r3, #7
 8008fa8:	3308      	adds	r3, #8
 8008faa:	9303      	str	r3, [sp, #12]
 8008fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fae:	443b      	add	r3, r7
 8008fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb2:	e767      	b.n	8008e84 <_vfiprintf_r+0x94>
 8008fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fb8:	460c      	mov	r4, r1
 8008fba:	2001      	movs	r0, #1
 8008fbc:	e7a5      	b.n	8008f0a <_vfiprintf_r+0x11a>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	3401      	adds	r4, #1
 8008fc2:	9305      	str	r3, [sp, #20]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f04f 0c0a 	mov.w	ip, #10
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd0:	3a30      	subs	r2, #48	; 0x30
 8008fd2:	2a09      	cmp	r2, #9
 8008fd4:	d903      	bls.n	8008fde <_vfiprintf_r+0x1ee>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0c5      	beq.n	8008f66 <_vfiprintf_r+0x176>
 8008fda:	9105      	str	r1, [sp, #20]
 8008fdc:	e7c3      	b.n	8008f66 <_vfiprintf_r+0x176>
 8008fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e7f0      	b.n	8008fca <_vfiprintf_r+0x1da>
 8008fe8:	ab03      	add	r3, sp, #12
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	462a      	mov	r2, r5
 8008fee:	4b16      	ldr	r3, [pc, #88]	; (8009048 <_vfiprintf_r+0x258>)
 8008ff0:	a904      	add	r1, sp, #16
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7fd ffd2 	bl	8006f9c <_printf_float>
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	1c78      	adds	r0, r7, #1
 8008ffc:	d1d6      	bne.n	8008fac <_vfiprintf_r+0x1bc>
 8008ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009000:	07d9      	lsls	r1, r3, #31
 8009002:	d405      	bmi.n	8009010 <_vfiprintf_r+0x220>
 8009004:	89ab      	ldrh	r3, [r5, #12]
 8009006:	059a      	lsls	r2, r3, #22
 8009008:	d402      	bmi.n	8009010 <_vfiprintf_r+0x220>
 800900a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800900c:	f7ff fb2c 	bl	8008668 <__retarget_lock_release_recursive>
 8009010:	89ab      	ldrh	r3, [r5, #12]
 8009012:	065b      	lsls	r3, r3, #25
 8009014:	f53f af12 	bmi.w	8008e3c <_vfiprintf_r+0x4c>
 8009018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800901a:	e711      	b.n	8008e40 <_vfiprintf_r+0x50>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4b09      	ldr	r3, [pc, #36]	; (8009048 <_vfiprintf_r+0x258>)
 8009024:	a904      	add	r1, sp, #16
 8009026:	4630      	mov	r0, r6
 8009028:	f7fe fa5c 	bl	80074e4 <_printf_i>
 800902c:	e7e4      	b.n	8008ff8 <_vfiprintf_r+0x208>
 800902e:	bf00      	nop
 8009030:	08015808 	.word	0x08015808
 8009034:	08015828 	.word	0x08015828
 8009038:	080157e8 	.word	0x080157e8
 800903c:	080159a4 	.word	0x080159a4
 8009040:	080159ae 	.word	0x080159ae
 8009044:	08006f9d 	.word	0x08006f9d
 8009048:	08008dcd 	.word	0x08008dcd
 800904c:	080159aa 	.word	0x080159aa

08009050 <__sread>:
 8009050:	b510      	push	{r4, lr}
 8009052:	460c      	mov	r4, r1
 8009054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009058:	f000 fa9a 	bl	8009590 <_read_r>
 800905c:	2800      	cmp	r0, #0
 800905e:	bfab      	itete	ge
 8009060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009062:	89a3      	ldrhlt	r3, [r4, #12]
 8009064:	181b      	addge	r3, r3, r0
 8009066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800906a:	bfac      	ite	ge
 800906c:	6563      	strge	r3, [r4, #84]	; 0x54
 800906e:	81a3      	strhlt	r3, [r4, #12]
 8009070:	bd10      	pop	{r4, pc}

08009072 <__swrite>:
 8009072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009076:	461f      	mov	r7, r3
 8009078:	898b      	ldrh	r3, [r1, #12]
 800907a:	05db      	lsls	r3, r3, #23
 800907c:	4605      	mov	r5, r0
 800907e:	460c      	mov	r4, r1
 8009080:	4616      	mov	r6, r2
 8009082:	d505      	bpl.n	8009090 <__swrite+0x1e>
 8009084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009088:	2302      	movs	r3, #2
 800908a:	2200      	movs	r2, #0
 800908c:	f000 f9f8 	bl	8009480 <_lseek_r>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	4632      	mov	r2, r6
 800909e:	463b      	mov	r3, r7
 80090a0:	4628      	mov	r0, r5
 80090a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a6:	f000 b869 	b.w	800917c <_write_r>

080090aa <__sseek>:
 80090aa:	b510      	push	{r4, lr}
 80090ac:	460c      	mov	r4, r1
 80090ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b2:	f000 f9e5 	bl	8009480 <_lseek_r>
 80090b6:	1c43      	adds	r3, r0, #1
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	bf15      	itete	ne
 80090bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80090be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090c6:	81a3      	strheq	r3, [r4, #12]
 80090c8:	bf18      	it	ne
 80090ca:	81a3      	strhne	r3, [r4, #12]
 80090cc:	bd10      	pop	{r4, pc}

080090ce <__sclose>:
 80090ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d2:	f000 b8f1 	b.w	80092b8 <_close_r>
	...

080090d8 <__swbuf_r>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	460e      	mov	r6, r1
 80090dc:	4614      	mov	r4, r2
 80090de:	4605      	mov	r5, r0
 80090e0:	b118      	cbz	r0, 80090ea <__swbuf_r+0x12>
 80090e2:	6983      	ldr	r3, [r0, #24]
 80090e4:	b90b      	cbnz	r3, 80090ea <__swbuf_r+0x12>
 80090e6:	f7ff fa1b 	bl	8008520 <__sinit>
 80090ea:	4b21      	ldr	r3, [pc, #132]	; (8009170 <__swbuf_r+0x98>)
 80090ec:	429c      	cmp	r4, r3
 80090ee:	d12b      	bne.n	8009148 <__swbuf_r+0x70>
 80090f0:	686c      	ldr	r4, [r5, #4]
 80090f2:	69a3      	ldr	r3, [r4, #24]
 80090f4:	60a3      	str	r3, [r4, #8]
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	071a      	lsls	r2, r3, #28
 80090fa:	d52f      	bpl.n	800915c <__swbuf_r+0x84>
 80090fc:	6923      	ldr	r3, [r4, #16]
 80090fe:	b36b      	cbz	r3, 800915c <__swbuf_r+0x84>
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	1ac0      	subs	r0, r0, r3
 8009106:	6963      	ldr	r3, [r4, #20]
 8009108:	b2f6      	uxtb	r6, r6
 800910a:	4283      	cmp	r3, r0
 800910c:	4637      	mov	r7, r6
 800910e:	dc04      	bgt.n	800911a <__swbuf_r+0x42>
 8009110:	4621      	mov	r1, r4
 8009112:	4628      	mov	r0, r5
 8009114:	f000 f966 	bl	80093e4 <_fflush_r>
 8009118:	bb30      	cbnz	r0, 8009168 <__swbuf_r+0x90>
 800911a:	68a3      	ldr	r3, [r4, #8]
 800911c:	3b01      	subs	r3, #1
 800911e:	60a3      	str	r3, [r4, #8]
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	6022      	str	r2, [r4, #0]
 8009126:	701e      	strb	r6, [r3, #0]
 8009128:	6963      	ldr	r3, [r4, #20]
 800912a:	3001      	adds	r0, #1
 800912c:	4283      	cmp	r3, r0
 800912e:	d004      	beq.n	800913a <__swbuf_r+0x62>
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	07db      	lsls	r3, r3, #31
 8009134:	d506      	bpl.n	8009144 <__swbuf_r+0x6c>
 8009136:	2e0a      	cmp	r6, #10
 8009138:	d104      	bne.n	8009144 <__swbuf_r+0x6c>
 800913a:	4621      	mov	r1, r4
 800913c:	4628      	mov	r0, r5
 800913e:	f000 f951 	bl	80093e4 <_fflush_r>
 8009142:	b988      	cbnz	r0, 8009168 <__swbuf_r+0x90>
 8009144:	4638      	mov	r0, r7
 8009146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009148:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <__swbuf_r+0x9c>)
 800914a:	429c      	cmp	r4, r3
 800914c:	d101      	bne.n	8009152 <__swbuf_r+0x7a>
 800914e:	68ac      	ldr	r4, [r5, #8]
 8009150:	e7cf      	b.n	80090f2 <__swbuf_r+0x1a>
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <__swbuf_r+0xa0>)
 8009154:	429c      	cmp	r4, r3
 8009156:	bf08      	it	eq
 8009158:	68ec      	ldreq	r4, [r5, #12]
 800915a:	e7ca      	b.n	80090f2 <__swbuf_r+0x1a>
 800915c:	4621      	mov	r1, r4
 800915e:	4628      	mov	r0, r5
 8009160:	f000 f81e 	bl	80091a0 <__swsetup_r>
 8009164:	2800      	cmp	r0, #0
 8009166:	d0cb      	beq.n	8009100 <__swbuf_r+0x28>
 8009168:	f04f 37ff 	mov.w	r7, #4294967295
 800916c:	e7ea      	b.n	8009144 <__swbuf_r+0x6c>
 800916e:	bf00      	nop
 8009170:	08015808 	.word	0x08015808
 8009174:	08015828 	.word	0x08015828
 8009178:	080157e8 	.word	0x080157e8

0800917c <_write_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4d07      	ldr	r5, [pc, #28]	; (800919c <_write_r+0x20>)
 8009180:	4604      	mov	r4, r0
 8009182:	4608      	mov	r0, r1
 8009184:	4611      	mov	r1, r2
 8009186:	2200      	movs	r2, #0
 8009188:	602a      	str	r2, [r5, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	f7f8 f995 	bl	80014ba <_write>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_write_r+0x1e>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_write_r+0x1e>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	200012b4 	.word	0x200012b4

080091a0 <__swsetup_r>:
 80091a0:	4b32      	ldr	r3, [pc, #200]	; (800926c <__swsetup_r+0xcc>)
 80091a2:	b570      	push	{r4, r5, r6, lr}
 80091a4:	681d      	ldr	r5, [r3, #0]
 80091a6:	4606      	mov	r6, r0
 80091a8:	460c      	mov	r4, r1
 80091aa:	b125      	cbz	r5, 80091b6 <__swsetup_r+0x16>
 80091ac:	69ab      	ldr	r3, [r5, #24]
 80091ae:	b913      	cbnz	r3, 80091b6 <__swsetup_r+0x16>
 80091b0:	4628      	mov	r0, r5
 80091b2:	f7ff f9b5 	bl	8008520 <__sinit>
 80091b6:	4b2e      	ldr	r3, [pc, #184]	; (8009270 <__swsetup_r+0xd0>)
 80091b8:	429c      	cmp	r4, r3
 80091ba:	d10f      	bne.n	80091dc <__swsetup_r+0x3c>
 80091bc:	686c      	ldr	r4, [r5, #4]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091c4:	0719      	lsls	r1, r3, #28
 80091c6:	d42c      	bmi.n	8009222 <__swsetup_r+0x82>
 80091c8:	06dd      	lsls	r5, r3, #27
 80091ca:	d411      	bmi.n	80091f0 <__swsetup_r+0x50>
 80091cc:	2309      	movs	r3, #9
 80091ce:	6033      	str	r3, [r6, #0]
 80091d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091d4:	81a3      	strh	r3, [r4, #12]
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295
 80091da:	e03e      	b.n	800925a <__swsetup_r+0xba>
 80091dc:	4b25      	ldr	r3, [pc, #148]	; (8009274 <__swsetup_r+0xd4>)
 80091de:	429c      	cmp	r4, r3
 80091e0:	d101      	bne.n	80091e6 <__swsetup_r+0x46>
 80091e2:	68ac      	ldr	r4, [r5, #8]
 80091e4:	e7eb      	b.n	80091be <__swsetup_r+0x1e>
 80091e6:	4b24      	ldr	r3, [pc, #144]	; (8009278 <__swsetup_r+0xd8>)
 80091e8:	429c      	cmp	r4, r3
 80091ea:	bf08      	it	eq
 80091ec:	68ec      	ldreq	r4, [r5, #12]
 80091ee:	e7e6      	b.n	80091be <__swsetup_r+0x1e>
 80091f0:	0758      	lsls	r0, r3, #29
 80091f2:	d512      	bpl.n	800921a <__swsetup_r+0x7a>
 80091f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091f6:	b141      	cbz	r1, 800920a <__swsetup_r+0x6a>
 80091f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091fc:	4299      	cmp	r1, r3
 80091fe:	d002      	beq.n	8009206 <__swsetup_r+0x66>
 8009200:	4630      	mov	r0, r6
 8009202:	f7fd fd81 	bl	8006d08 <_free_r>
 8009206:	2300      	movs	r3, #0
 8009208:	6363      	str	r3, [r4, #52]	; 0x34
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	2300      	movs	r3, #0
 8009214:	6063      	str	r3, [r4, #4]
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	f043 0308 	orr.w	r3, r3, #8
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	b94b      	cbnz	r3, 800923a <__swsetup_r+0x9a>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800922c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009230:	d003      	beq.n	800923a <__swsetup_r+0x9a>
 8009232:	4621      	mov	r1, r4
 8009234:	4630      	mov	r0, r6
 8009236:	f000 f959 	bl	80094ec <__smakebuf_r>
 800923a:	89a0      	ldrh	r0, [r4, #12]
 800923c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009240:	f010 0301 	ands.w	r3, r0, #1
 8009244:	d00a      	beq.n	800925c <__swsetup_r+0xbc>
 8009246:	2300      	movs	r3, #0
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	6963      	ldr	r3, [r4, #20]
 800924c:	425b      	negs	r3, r3
 800924e:	61a3      	str	r3, [r4, #24]
 8009250:	6923      	ldr	r3, [r4, #16]
 8009252:	b943      	cbnz	r3, 8009266 <__swsetup_r+0xc6>
 8009254:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009258:	d1ba      	bne.n	80091d0 <__swsetup_r+0x30>
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	0781      	lsls	r1, r0, #30
 800925e:	bf58      	it	pl
 8009260:	6963      	ldrpl	r3, [r4, #20]
 8009262:	60a3      	str	r3, [r4, #8]
 8009264:	e7f4      	b.n	8009250 <__swsetup_r+0xb0>
 8009266:	2000      	movs	r0, #0
 8009268:	e7f7      	b.n	800925a <__swsetup_r+0xba>
 800926a:	bf00      	nop
 800926c:	200007ec 	.word	0x200007ec
 8009270:	08015808 	.word	0x08015808
 8009274:	08015828 	.word	0x08015828
 8009278:	080157e8 	.word	0x080157e8

0800927c <__assert_func>:
 800927c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800927e:	4614      	mov	r4, r2
 8009280:	461a      	mov	r2, r3
 8009282:	4b09      	ldr	r3, [pc, #36]	; (80092a8 <__assert_func+0x2c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4605      	mov	r5, r0
 8009288:	68d8      	ldr	r0, [r3, #12]
 800928a:	b14c      	cbz	r4, 80092a0 <__assert_func+0x24>
 800928c:	4b07      	ldr	r3, [pc, #28]	; (80092ac <__assert_func+0x30>)
 800928e:	9100      	str	r1, [sp, #0]
 8009290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009294:	4906      	ldr	r1, [pc, #24]	; (80092b0 <__assert_func+0x34>)
 8009296:	462b      	mov	r3, r5
 8009298:	f000 f8e0 	bl	800945c <fiprintf>
 800929c:	f000 f997 	bl	80095ce <abort>
 80092a0:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <__assert_func+0x38>)
 80092a2:	461c      	mov	r4, r3
 80092a4:	e7f3      	b.n	800928e <__assert_func+0x12>
 80092a6:	bf00      	nop
 80092a8:	200007ec 	.word	0x200007ec
 80092ac:	080159b5 	.word	0x080159b5
 80092b0:	080159c2 	.word	0x080159c2
 80092b4:	080159f0 	.word	0x080159f0

080092b8 <_close_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d06      	ldr	r5, [pc, #24]	; (80092d4 <_close_r+0x1c>)
 80092bc:	2300      	movs	r3, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7f8 f915 	bl	80014f2 <_close>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d102      	bne.n	80092d2 <_close_r+0x1a>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b103      	cbz	r3, 80092d2 <_close_r+0x1a>
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	200012b4 	.word	0x200012b4

080092d8 <__sflush_r>:
 80092d8:	898a      	ldrh	r2, [r1, #12]
 80092da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	4605      	mov	r5, r0
 80092e0:	0710      	lsls	r0, r2, #28
 80092e2:	460c      	mov	r4, r1
 80092e4:	d458      	bmi.n	8009398 <__sflush_r+0xc0>
 80092e6:	684b      	ldr	r3, [r1, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dc05      	bgt.n	80092f8 <__sflush_r+0x20>
 80092ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dc02      	bgt.n	80092f8 <__sflush_r+0x20>
 80092f2:	2000      	movs	r0, #0
 80092f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092fa:	2e00      	cmp	r6, #0
 80092fc:	d0f9      	beq.n	80092f2 <__sflush_r+0x1a>
 80092fe:	2300      	movs	r3, #0
 8009300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009304:	682f      	ldr	r7, [r5, #0]
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	d032      	beq.n	8009370 <__sflush_r+0x98>
 800930a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	075a      	lsls	r2, r3, #29
 8009310:	d505      	bpl.n	800931e <__sflush_r+0x46>
 8009312:	6863      	ldr	r3, [r4, #4]
 8009314:	1ac0      	subs	r0, r0, r3
 8009316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009318:	b10b      	cbz	r3, 800931e <__sflush_r+0x46>
 800931a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800931c:	1ac0      	subs	r0, r0, r3
 800931e:	2300      	movs	r3, #0
 8009320:	4602      	mov	r2, r0
 8009322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009324:	6a21      	ldr	r1, [r4, #32]
 8009326:	4628      	mov	r0, r5
 8009328:	47b0      	blx	r6
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	d106      	bne.n	800933e <__sflush_r+0x66>
 8009330:	6829      	ldr	r1, [r5, #0]
 8009332:	291d      	cmp	r1, #29
 8009334:	d82c      	bhi.n	8009390 <__sflush_r+0xb8>
 8009336:	4a2a      	ldr	r2, [pc, #168]	; (80093e0 <__sflush_r+0x108>)
 8009338:	40ca      	lsrs	r2, r1
 800933a:	07d6      	lsls	r6, r2, #31
 800933c:	d528      	bpl.n	8009390 <__sflush_r+0xb8>
 800933e:	2200      	movs	r2, #0
 8009340:	6062      	str	r2, [r4, #4]
 8009342:	04d9      	lsls	r1, r3, #19
 8009344:	6922      	ldr	r2, [r4, #16]
 8009346:	6022      	str	r2, [r4, #0]
 8009348:	d504      	bpl.n	8009354 <__sflush_r+0x7c>
 800934a:	1c42      	adds	r2, r0, #1
 800934c:	d101      	bne.n	8009352 <__sflush_r+0x7a>
 800934e:	682b      	ldr	r3, [r5, #0]
 8009350:	b903      	cbnz	r3, 8009354 <__sflush_r+0x7c>
 8009352:	6560      	str	r0, [r4, #84]	; 0x54
 8009354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009356:	602f      	str	r7, [r5, #0]
 8009358:	2900      	cmp	r1, #0
 800935a:	d0ca      	beq.n	80092f2 <__sflush_r+0x1a>
 800935c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009360:	4299      	cmp	r1, r3
 8009362:	d002      	beq.n	800936a <__sflush_r+0x92>
 8009364:	4628      	mov	r0, r5
 8009366:	f7fd fccf 	bl	8006d08 <_free_r>
 800936a:	2000      	movs	r0, #0
 800936c:	6360      	str	r0, [r4, #52]	; 0x34
 800936e:	e7c1      	b.n	80092f4 <__sflush_r+0x1c>
 8009370:	6a21      	ldr	r1, [r4, #32]
 8009372:	2301      	movs	r3, #1
 8009374:	4628      	mov	r0, r5
 8009376:	47b0      	blx	r6
 8009378:	1c41      	adds	r1, r0, #1
 800937a:	d1c7      	bne.n	800930c <__sflush_r+0x34>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0c4      	beq.n	800930c <__sflush_r+0x34>
 8009382:	2b1d      	cmp	r3, #29
 8009384:	d001      	beq.n	800938a <__sflush_r+0xb2>
 8009386:	2b16      	cmp	r3, #22
 8009388:	d101      	bne.n	800938e <__sflush_r+0xb6>
 800938a:	602f      	str	r7, [r5, #0]
 800938c:	e7b1      	b.n	80092f2 <__sflush_r+0x1a>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009394:	81a3      	strh	r3, [r4, #12]
 8009396:	e7ad      	b.n	80092f4 <__sflush_r+0x1c>
 8009398:	690f      	ldr	r7, [r1, #16]
 800939a:	2f00      	cmp	r7, #0
 800939c:	d0a9      	beq.n	80092f2 <__sflush_r+0x1a>
 800939e:	0793      	lsls	r3, r2, #30
 80093a0:	680e      	ldr	r6, [r1, #0]
 80093a2:	bf08      	it	eq
 80093a4:	694b      	ldreq	r3, [r1, #20]
 80093a6:	600f      	str	r7, [r1, #0]
 80093a8:	bf18      	it	ne
 80093aa:	2300      	movne	r3, #0
 80093ac:	eba6 0807 	sub.w	r8, r6, r7
 80093b0:	608b      	str	r3, [r1, #8]
 80093b2:	f1b8 0f00 	cmp.w	r8, #0
 80093b6:	dd9c      	ble.n	80092f2 <__sflush_r+0x1a>
 80093b8:	6a21      	ldr	r1, [r4, #32]
 80093ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093bc:	4643      	mov	r3, r8
 80093be:	463a      	mov	r2, r7
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b0      	blx	r6
 80093c4:	2800      	cmp	r0, #0
 80093c6:	dc06      	bgt.n	80093d6 <__sflush_r+0xfe>
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	e78e      	b.n	80092f4 <__sflush_r+0x1c>
 80093d6:	4407      	add	r7, r0
 80093d8:	eba8 0800 	sub.w	r8, r8, r0
 80093dc:	e7e9      	b.n	80093b2 <__sflush_r+0xda>
 80093de:	bf00      	nop
 80093e0:	20400001 	.word	0x20400001

080093e4 <_fflush_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	690b      	ldr	r3, [r1, #16]
 80093e8:	4605      	mov	r5, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	b913      	cbnz	r3, 80093f4 <_fflush_r+0x10>
 80093ee:	2500      	movs	r5, #0
 80093f0:	4628      	mov	r0, r5
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	b118      	cbz	r0, 80093fe <_fflush_r+0x1a>
 80093f6:	6983      	ldr	r3, [r0, #24]
 80093f8:	b90b      	cbnz	r3, 80093fe <_fflush_r+0x1a>
 80093fa:	f7ff f891 	bl	8008520 <__sinit>
 80093fe:	4b14      	ldr	r3, [pc, #80]	; (8009450 <_fflush_r+0x6c>)
 8009400:	429c      	cmp	r4, r3
 8009402:	d11b      	bne.n	800943c <_fflush_r+0x58>
 8009404:	686c      	ldr	r4, [r5, #4]
 8009406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0ef      	beq.n	80093ee <_fflush_r+0xa>
 800940e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009410:	07d0      	lsls	r0, r2, #31
 8009412:	d404      	bmi.n	800941e <_fflush_r+0x3a>
 8009414:	0599      	lsls	r1, r3, #22
 8009416:	d402      	bmi.n	800941e <_fflush_r+0x3a>
 8009418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800941a:	f7ff f924 	bl	8008666 <__retarget_lock_acquire_recursive>
 800941e:	4628      	mov	r0, r5
 8009420:	4621      	mov	r1, r4
 8009422:	f7ff ff59 	bl	80092d8 <__sflush_r>
 8009426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009428:	07da      	lsls	r2, r3, #31
 800942a:	4605      	mov	r5, r0
 800942c:	d4e0      	bmi.n	80093f0 <_fflush_r+0xc>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	059b      	lsls	r3, r3, #22
 8009432:	d4dd      	bmi.n	80093f0 <_fflush_r+0xc>
 8009434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009436:	f7ff f917 	bl	8008668 <__retarget_lock_release_recursive>
 800943a:	e7d9      	b.n	80093f0 <_fflush_r+0xc>
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <_fflush_r+0x70>)
 800943e:	429c      	cmp	r4, r3
 8009440:	d101      	bne.n	8009446 <_fflush_r+0x62>
 8009442:	68ac      	ldr	r4, [r5, #8]
 8009444:	e7df      	b.n	8009406 <_fflush_r+0x22>
 8009446:	4b04      	ldr	r3, [pc, #16]	; (8009458 <_fflush_r+0x74>)
 8009448:	429c      	cmp	r4, r3
 800944a:	bf08      	it	eq
 800944c:	68ec      	ldreq	r4, [r5, #12]
 800944e:	e7da      	b.n	8009406 <_fflush_r+0x22>
 8009450:	08015808 	.word	0x08015808
 8009454:	08015828 	.word	0x08015828
 8009458:	080157e8 	.word	0x080157e8

0800945c <fiprintf>:
 800945c:	b40e      	push	{r1, r2, r3}
 800945e:	b503      	push	{r0, r1, lr}
 8009460:	4601      	mov	r1, r0
 8009462:	ab03      	add	r3, sp, #12
 8009464:	4805      	ldr	r0, [pc, #20]	; (800947c <fiprintf+0x20>)
 8009466:	f853 2b04 	ldr.w	r2, [r3], #4
 800946a:	6800      	ldr	r0, [r0, #0]
 800946c:	9301      	str	r3, [sp, #4]
 800946e:	f7ff fcbf 	bl	8008df0 <_vfiprintf_r>
 8009472:	b002      	add	sp, #8
 8009474:	f85d eb04 	ldr.w	lr, [sp], #4
 8009478:	b003      	add	sp, #12
 800947a:	4770      	bx	lr
 800947c:	200007ec 	.word	0x200007ec

08009480 <_lseek_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d07      	ldr	r5, [pc, #28]	; (80094a0 <_lseek_r+0x20>)
 8009484:	4604      	mov	r4, r0
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	2200      	movs	r2, #0
 800948c:	602a      	str	r2, [r5, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	f7f8 f856 	bl	8001540 <_lseek>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_lseek_r+0x1e>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_lseek_r+0x1e>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	200012b4 	.word	0x200012b4

080094a4 <__swhatbuf_r>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	460e      	mov	r6, r1
 80094a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ac:	2900      	cmp	r1, #0
 80094ae:	b096      	sub	sp, #88	; 0x58
 80094b0:	4614      	mov	r4, r2
 80094b2:	461d      	mov	r5, r3
 80094b4:	da07      	bge.n	80094c6 <__swhatbuf_r+0x22>
 80094b6:	2300      	movs	r3, #0
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	89b3      	ldrh	r3, [r6, #12]
 80094bc:	061a      	lsls	r2, r3, #24
 80094be:	d410      	bmi.n	80094e2 <__swhatbuf_r+0x3e>
 80094c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094c4:	e00e      	b.n	80094e4 <__swhatbuf_r+0x40>
 80094c6:	466a      	mov	r2, sp
 80094c8:	f000 f888 	bl	80095dc <_fstat_r>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	dbf2      	blt.n	80094b6 <__swhatbuf_r+0x12>
 80094d0:	9a01      	ldr	r2, [sp, #4]
 80094d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094da:	425a      	negs	r2, r3
 80094dc:	415a      	adcs	r2, r3
 80094de:	602a      	str	r2, [r5, #0]
 80094e0:	e7ee      	b.n	80094c0 <__swhatbuf_r+0x1c>
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	2000      	movs	r0, #0
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	b016      	add	sp, #88	; 0x58
 80094ea:	bd70      	pop	{r4, r5, r6, pc}

080094ec <__smakebuf_r>:
 80094ec:	898b      	ldrh	r3, [r1, #12]
 80094ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094f0:	079d      	lsls	r5, r3, #30
 80094f2:	4606      	mov	r6, r0
 80094f4:	460c      	mov	r4, r1
 80094f6:	d507      	bpl.n	8009508 <__smakebuf_r+0x1c>
 80094f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	6123      	str	r3, [r4, #16]
 8009500:	2301      	movs	r3, #1
 8009502:	6163      	str	r3, [r4, #20]
 8009504:	b002      	add	sp, #8
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	ab01      	add	r3, sp, #4
 800950a:	466a      	mov	r2, sp
 800950c:	f7ff ffca 	bl	80094a4 <__swhatbuf_r>
 8009510:	9900      	ldr	r1, [sp, #0]
 8009512:	4605      	mov	r5, r0
 8009514:	4630      	mov	r0, r6
 8009516:	f7fd fc47 	bl	8006da8 <_malloc_r>
 800951a:	b948      	cbnz	r0, 8009530 <__smakebuf_r+0x44>
 800951c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009520:	059a      	lsls	r2, r3, #22
 8009522:	d4ef      	bmi.n	8009504 <__smakebuf_r+0x18>
 8009524:	f023 0303 	bic.w	r3, r3, #3
 8009528:	f043 0302 	orr.w	r3, r3, #2
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	e7e3      	b.n	80094f8 <__smakebuf_r+0xc>
 8009530:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <__smakebuf_r+0x7c>)
 8009532:	62b3      	str	r3, [r6, #40]	; 0x28
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	6020      	str	r0, [r4, #0]
 8009538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	9b00      	ldr	r3, [sp, #0]
 8009540:	6163      	str	r3, [r4, #20]
 8009542:	9b01      	ldr	r3, [sp, #4]
 8009544:	6120      	str	r0, [r4, #16]
 8009546:	b15b      	cbz	r3, 8009560 <__smakebuf_r+0x74>
 8009548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800954c:	4630      	mov	r0, r6
 800954e:	f000 f857 	bl	8009600 <_isatty_r>
 8009552:	b128      	cbz	r0, 8009560 <__smakebuf_r+0x74>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	f023 0303 	bic.w	r3, r3, #3
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	81a3      	strh	r3, [r4, #12]
 8009560:	89a0      	ldrh	r0, [r4, #12]
 8009562:	4305      	orrs	r5, r0
 8009564:	81a5      	strh	r5, [r4, #12]
 8009566:	e7cd      	b.n	8009504 <__smakebuf_r+0x18>
 8009568:	080084b9 	.word	0x080084b9

0800956c <__ascii_mbtowc>:
 800956c:	b082      	sub	sp, #8
 800956e:	b901      	cbnz	r1, 8009572 <__ascii_mbtowc+0x6>
 8009570:	a901      	add	r1, sp, #4
 8009572:	b142      	cbz	r2, 8009586 <__ascii_mbtowc+0x1a>
 8009574:	b14b      	cbz	r3, 800958a <__ascii_mbtowc+0x1e>
 8009576:	7813      	ldrb	r3, [r2, #0]
 8009578:	600b      	str	r3, [r1, #0]
 800957a:	7812      	ldrb	r2, [r2, #0]
 800957c:	1e10      	subs	r0, r2, #0
 800957e:	bf18      	it	ne
 8009580:	2001      	movne	r0, #1
 8009582:	b002      	add	sp, #8
 8009584:	4770      	bx	lr
 8009586:	4610      	mov	r0, r2
 8009588:	e7fb      	b.n	8009582 <__ascii_mbtowc+0x16>
 800958a:	f06f 0001 	mvn.w	r0, #1
 800958e:	e7f8      	b.n	8009582 <__ascii_mbtowc+0x16>

08009590 <_read_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	; (80095b0 <_read_r+0x20>)
 8009594:	4604      	mov	r4, r0
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	2200      	movs	r2, #0
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7f7 ff6e 	bl	8001480 <_read>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_read_r+0x1e>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_read_r+0x1e>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	200012b4 	.word	0x200012b4

080095b4 <__ascii_wctomb>:
 80095b4:	b149      	cbz	r1, 80095ca <__ascii_wctomb+0x16>
 80095b6:	2aff      	cmp	r2, #255	; 0xff
 80095b8:	bf85      	ittet	hi
 80095ba:	238a      	movhi	r3, #138	; 0x8a
 80095bc:	6003      	strhi	r3, [r0, #0]
 80095be:	700a      	strbls	r2, [r1, #0]
 80095c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80095c4:	bf98      	it	ls
 80095c6:	2001      	movls	r0, #1
 80095c8:	4770      	bx	lr
 80095ca:	4608      	mov	r0, r1
 80095cc:	4770      	bx	lr

080095ce <abort>:
 80095ce:	b508      	push	{r3, lr}
 80095d0:	2006      	movs	r0, #6
 80095d2:	f000 f84d 	bl	8009670 <raise>
 80095d6:	2001      	movs	r0, #1
 80095d8:	f7f7 ff48 	bl	800146c <_exit>

080095dc <_fstat_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d07      	ldr	r5, [pc, #28]	; (80095fc <_fstat_r+0x20>)
 80095e0:	2300      	movs	r3, #0
 80095e2:	4604      	mov	r4, r0
 80095e4:	4608      	mov	r0, r1
 80095e6:	4611      	mov	r1, r2
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	f7f7 ff8e 	bl	800150a <_fstat>
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	d102      	bne.n	80095f8 <_fstat_r+0x1c>
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	b103      	cbz	r3, 80095f8 <_fstat_r+0x1c>
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	bd38      	pop	{r3, r4, r5, pc}
 80095fa:	bf00      	nop
 80095fc:	200012b4 	.word	0x200012b4

08009600 <_isatty_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d06      	ldr	r5, [pc, #24]	; (800961c <_isatty_r+0x1c>)
 8009604:	2300      	movs	r3, #0
 8009606:	4604      	mov	r4, r0
 8009608:	4608      	mov	r0, r1
 800960a:	602b      	str	r3, [r5, #0]
 800960c:	f7f7 ff8d 	bl	800152a <_isatty>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_isatty_r+0x1a>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	b103      	cbz	r3, 800961a <_isatty_r+0x1a>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	200012b4 	.word	0x200012b4

08009620 <_raise_r>:
 8009620:	291f      	cmp	r1, #31
 8009622:	b538      	push	{r3, r4, r5, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	460d      	mov	r5, r1
 8009628:	d904      	bls.n	8009634 <_raise_r+0x14>
 800962a:	2316      	movs	r3, #22
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	f04f 30ff 	mov.w	r0, #4294967295
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009636:	b112      	cbz	r2, 800963e <_raise_r+0x1e>
 8009638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800963c:	b94b      	cbnz	r3, 8009652 <_raise_r+0x32>
 800963e:	4620      	mov	r0, r4
 8009640:	f000 f830 	bl	80096a4 <_getpid_r>
 8009644:	462a      	mov	r2, r5
 8009646:	4601      	mov	r1, r0
 8009648:	4620      	mov	r0, r4
 800964a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800964e:	f000 b817 	b.w	8009680 <_kill_r>
 8009652:	2b01      	cmp	r3, #1
 8009654:	d00a      	beq.n	800966c <_raise_r+0x4c>
 8009656:	1c59      	adds	r1, r3, #1
 8009658:	d103      	bne.n	8009662 <_raise_r+0x42>
 800965a:	2316      	movs	r3, #22
 800965c:	6003      	str	r3, [r0, #0]
 800965e:	2001      	movs	r0, #1
 8009660:	e7e7      	b.n	8009632 <_raise_r+0x12>
 8009662:	2400      	movs	r4, #0
 8009664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009668:	4628      	mov	r0, r5
 800966a:	4798      	blx	r3
 800966c:	2000      	movs	r0, #0
 800966e:	e7e0      	b.n	8009632 <_raise_r+0x12>

08009670 <raise>:
 8009670:	4b02      	ldr	r3, [pc, #8]	; (800967c <raise+0xc>)
 8009672:	4601      	mov	r1, r0
 8009674:	6818      	ldr	r0, [r3, #0]
 8009676:	f7ff bfd3 	b.w	8009620 <_raise_r>
 800967a:	bf00      	nop
 800967c:	200007ec 	.word	0x200007ec

08009680 <_kill_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d07      	ldr	r5, [pc, #28]	; (80096a0 <_kill_r+0x20>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	4611      	mov	r1, r2
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	f7f7 fedd 	bl	800144c <_kill>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	d102      	bne.n	800969c <_kill_r+0x1c>
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	b103      	cbz	r3, 800969c <_kill_r+0x1c>
 800969a:	6023      	str	r3, [r4, #0]
 800969c:	bd38      	pop	{r3, r4, r5, pc}
 800969e:	bf00      	nop
 80096a0:	200012b4 	.word	0x200012b4

080096a4 <_getpid_r>:
 80096a4:	f7f7 beca 	b.w	800143c <_getpid>

080096a8 <expf>:
 80096a8:	b508      	push	{r3, lr}
 80096aa:	ed2d 8b02 	vpush	{d8}
 80096ae:	eef0 8a40 	vmov.f32	s17, s0
 80096b2:	f000 f837 	bl	8009724 <__ieee754_expf>
 80096b6:	4b16      	ldr	r3, [pc, #88]	; (8009710 <expf+0x68>)
 80096b8:	f993 3000 	ldrsb.w	r3, [r3]
 80096bc:	3301      	adds	r3, #1
 80096be:	eeb0 8a40 	vmov.f32	s16, s0
 80096c2:	d011      	beq.n	80096e8 <expf+0x40>
 80096c4:	eeb0 0a68 	vmov.f32	s0, s17
 80096c8:	f000 f900 	bl	80098cc <finitef>
 80096cc:	b160      	cbz	r0, 80096e8 <expf+0x40>
 80096ce:	eddf 7a11 	vldr	s15, [pc, #68]	; 8009714 <expf+0x6c>
 80096d2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80096d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096da:	dd0a      	ble.n	80096f2 <expf+0x4a>
 80096dc:	f7fd facc 	bl	8006c78 <__errno>
 80096e0:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8009718 <expf+0x70>
 80096e4:	2322      	movs	r3, #34	; 0x22
 80096e6:	6003      	str	r3, [r0, #0]
 80096e8:	eeb0 0a48 	vmov.f32	s0, s16
 80096ec:	ecbd 8b02 	vpop	{d8}
 80096f0:	bd08      	pop	{r3, pc}
 80096f2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800971c <expf+0x74>
 80096f6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80096fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fe:	d5f3      	bpl.n	80096e8 <expf+0x40>
 8009700:	f7fd faba 	bl	8006c78 <__errno>
 8009704:	2322      	movs	r3, #34	; 0x22
 8009706:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8009720 <expf+0x78>
 800970a:	6003      	str	r3, [r0, #0]
 800970c:	e7ec      	b.n	80096e8 <expf+0x40>
 800970e:	bf00      	nop
 8009710:	200009bc 	.word	0x200009bc
 8009714:	42b17180 	.word	0x42b17180
 8009718:	7f800000 	.word	0x7f800000
 800971c:	c2cff1b5 	.word	0xc2cff1b5
 8009720:	00000000 	.word	0x00000000

08009724 <__ieee754_expf>:
 8009724:	ee10 2a10 	vmov	r2, s0
 8009728:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800972c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009730:	d902      	bls.n	8009738 <__ieee754_expf+0x14>
 8009732:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009736:	4770      	bx	lr
 8009738:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800973c:	d106      	bne.n	800974c <__ieee754_expf+0x28>
 800973e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8009884 <__ieee754_expf+0x160>
 8009742:	2b00      	cmp	r3, #0
 8009744:	bf18      	it	ne
 8009746:	eeb0 0a67 	vmovne.f32	s0, s15
 800974a:	4770      	bx	lr
 800974c:	484e      	ldr	r0, [pc, #312]	; (8009888 <__ieee754_expf+0x164>)
 800974e:	4282      	cmp	r2, r0
 8009750:	dd04      	ble.n	800975c <__ieee754_expf+0x38>
 8009752:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800988c <__ieee754_expf+0x168>
 8009756:	ee20 0a00 	vmul.f32	s0, s0, s0
 800975a:	4770      	bx	lr
 800975c:	2a00      	cmp	r2, #0
 800975e:	da03      	bge.n	8009768 <__ieee754_expf+0x44>
 8009760:	4a4b      	ldr	r2, [pc, #300]	; (8009890 <__ieee754_expf+0x16c>)
 8009762:	4291      	cmp	r1, r2
 8009764:	f200 808a 	bhi.w	800987c <__ieee754_expf+0x158>
 8009768:	4a4a      	ldr	r2, [pc, #296]	; (8009894 <__ieee754_expf+0x170>)
 800976a:	4291      	cmp	r1, r2
 800976c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009770:	d954      	bls.n	800981c <__ieee754_expf+0xf8>
 8009772:	4a49      	ldr	r2, [pc, #292]	; (8009898 <__ieee754_expf+0x174>)
 8009774:	4291      	cmp	r1, r2
 8009776:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800977a:	d836      	bhi.n	80097ea <__ieee754_expf+0xc6>
 800977c:	4947      	ldr	r1, [pc, #284]	; (800989c <__ieee754_expf+0x178>)
 800977e:	4411      	add	r1, r2
 8009780:	ed91 7a00 	vldr	s14, [r1]
 8009784:	4946      	ldr	r1, [pc, #280]	; (80098a0 <__ieee754_expf+0x17c>)
 8009786:	440a      	add	r2, r1
 8009788:	edd2 7a00 	vldr	s15, [r2]
 800978c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009790:	f1c3 0201 	rsb	r2, r3, #1
 8009794:	1ad2      	subs	r2, r2, r3
 8009796:	ee37 0a67 	vsub.f32	s0, s14, s15
 800979a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800979e:	eddf 5a41 	vldr	s11, [pc, #260]	; 80098a4 <__ieee754_expf+0x180>
 80097a2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80098a8 <__ieee754_expf+0x184>
 80097a6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80097aa:	eddf 5a40 	vldr	s11, [pc, #256]	; 80098ac <__ieee754_expf+0x188>
 80097ae:	eee5 5a26 	vfma.f32	s11, s10, s13
 80097b2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80098b0 <__ieee754_expf+0x18c>
 80097b6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80097ba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80098b4 <__ieee754_expf+0x190>
 80097be:	eee5 5a26 	vfma.f32	s11, s10, s13
 80097c2:	eeb0 5a40 	vmov.f32	s10, s0
 80097c6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80097ca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80097ce:	eef0 6a45 	vmov.f32	s13, s10
 80097d2:	ee20 5a05 	vmul.f32	s10, s0, s10
 80097d6:	bb92      	cbnz	r2, 800983e <__ieee754_expf+0x11a>
 80097d8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80097dc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80097e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80097e4:	ee36 0a40 	vsub.f32	s0, s12, s0
 80097e8:	4770      	bx	lr
 80097ea:	4b33      	ldr	r3, [pc, #204]	; (80098b8 <__ieee754_expf+0x194>)
 80097ec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80098bc <__ieee754_expf+0x198>
 80097f0:	4413      	add	r3, r2
 80097f2:	edd3 7a00 	vldr	s15, [r3]
 80097f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80097fa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80098c0 <__ieee754_expf+0x19c>
 80097fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009802:	ee17 2a90 	vmov	r2, s15
 8009806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800980a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800980e:	eeb0 7a40 	vmov.f32	s14, s0
 8009812:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80098c4 <__ieee754_expf+0x1a0>
 8009816:	ee67 7a80 	vmul.f32	s15, s15, s0
 800981a:	e7bc      	b.n	8009796 <__ieee754_expf+0x72>
 800981c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8009820:	d20b      	bcs.n	800983a <__ieee754_expf+0x116>
 8009822:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800988c <__ieee754_expf+0x168>
 8009826:	ee70 6a26 	vadd.f32	s13, s0, s13
 800982a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800982e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009832:	dd02      	ble.n	800983a <__ieee754_expf+0x116>
 8009834:	ee30 0a06 	vadd.f32	s0, s0, s12
 8009838:	4770      	bx	lr
 800983a:	2200      	movs	r2, #0
 800983c:	e7ad      	b.n	800979a <__ieee754_expf+0x76>
 800983e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8009842:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009846:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800984a:	bfb8      	it	lt
 800984c:	3264      	addlt	r2, #100	; 0x64
 800984e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009852:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009856:	ee76 7a40 	vsub.f32	s15, s12, s0
 800985a:	ee17 3a90 	vmov	r3, s15
 800985e:	bfab      	itete	ge
 8009860:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009864:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009868:	ee00 3a10 	vmovge	s0, r3
 800986c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80098c8 <__ieee754_expf+0x1a4>
 8009870:	bfbc      	itt	lt
 8009872:	ee00 3a10 	vmovlt	s0, r3
 8009876:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800987a:	4770      	bx	lr
 800987c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009884 <__ieee754_expf+0x160>
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	00000000 	.word	0x00000000
 8009888:	42b17217 	.word	0x42b17217
 800988c:	7149f2ca 	.word	0x7149f2ca
 8009890:	42cff1b5 	.word	0x42cff1b5
 8009894:	3eb17218 	.word	0x3eb17218
 8009898:	3f851591 	.word	0x3f851591
 800989c:	08015b04 	.word	0x08015b04
 80098a0:	08015b0c 	.word	0x08015b0c
 80098a4:	3331bb4c 	.word	0x3331bb4c
 80098a8:	b5ddea0e 	.word	0xb5ddea0e
 80098ac:	388ab355 	.word	0x388ab355
 80098b0:	bb360b61 	.word	0xbb360b61
 80098b4:	3e2aaaab 	.word	0x3e2aaaab
 80098b8:	08015afc 	.word	0x08015afc
 80098bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80098c0:	3f317180 	.word	0x3f317180
 80098c4:	3717f7d1 	.word	0x3717f7d1
 80098c8:	0d800000 	.word	0x0d800000

080098cc <finitef>:
 80098cc:	b082      	sub	sp, #8
 80098ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 80098d2:	9801      	ldr	r0, [sp, #4]
 80098d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80098d8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80098dc:	bfac      	ite	ge
 80098de:	2000      	movge	r0, #0
 80098e0:	2001      	movlt	r0, #1
 80098e2:	b002      	add	sp, #8
 80098e4:	4770      	bx	lr
	...

080098e8 <_init>:
 80098e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ea:	bf00      	nop
 80098ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ee:	bc08      	pop	{r3}
 80098f0:	469e      	mov	lr, r3
 80098f2:	4770      	bx	lr

080098f4 <_fini>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	bf00      	nop
 80098f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fa:	bc08      	pop	{r3}
 80098fc:	469e      	mov	lr, r3
 80098fe:	4770      	bx	lr
